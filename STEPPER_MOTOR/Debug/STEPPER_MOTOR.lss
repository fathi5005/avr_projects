
STEPPER_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000031d8  0000324c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000025a4  00000000  00000000  0000326c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b1a  00000000  00000000  00005810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000632a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000648a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000865e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000975f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000ab26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 81 18 	call	0x3102	; 0x3102 <main>
      7a:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_INTI>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

void DIO_INTI(void) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62

  DDRA_REG = conc(DIO_PA7_inti_direction, DIO_PA6_inti_direction,
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f e0       	ldi	r24, 0x0F	; 15
     c9c:	80 83       	st	Z, r24
                  DIO_PA5_inti_direction, DIO_PA4_inti_direction,
                  DIO_PA3_inti_direction, DIO_PA2_inti_direction,
                  DIO_PA1_inti_direction, DIO_PA0_inti_direction);

  DDRB_REG = conc(DIO_PB7_inti_direction, DIO_PB6_inti_direction,
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8f e0       	ldi	r24, 0x0F	; 15
     ca4:	80 83       	st	Z, r24
                  DIO_PB5_inti_direction, DIO_PB4_inti_direction,
                  DIO_PB3_inti_direction, DIO_PB2_inti_direction,
                  DIO_PB1_inti_direction, DIO_PB0_inti_direction);

  DDRC_REG = conc(DIO_PC7_inti_direction, DIO_PC6_inti_direction,
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
                  DIO_PC5_inti_direction, DIO_PC4_inti_direction,
                  DIO_PC3_inti_direction, DIO_PC2_inti_direction,
                  DIO_PC1_inti_direction, DIO_PC0_inti_direction);

  DDRD_REG = conc(DIO_PD7_inti_direction, DIO_PD6_inti_direction,
     cac:	e1 e3       	ldi	r30, 0x31	; 49
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	10 82       	st	Z, r1
                  DIO_PD5_inti_direction, DIO_PD4_inti_direction,
                  DIO_PD3_inti_direction, DIO_PD2_inti_direction,
                  DIO_PD1_inti_direction, DIO_PD0_inti_direction);

  PORTA_REG = conc(DIO_PA7_inti_value, DIO_PA6_inti_value, DIO_PA5_inti_value,
     cb2:	eb e3       	ldi	r30, 0x3B	; 59
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	80 83       	st	Z, r24
                   DIO_PA4_inti_value, DIO_PA3_inti_value, DIO_PA2_inti_value,
                   DIO_PA1_inti_value, DIO_PA0_inti_value);

  PORTB_REG = conc(DIO_PA7_inti_value, DIO_PA6_inti_value, DIO_PA5_inti_value,
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	80 83       	st	Z, r24
                   DIO_PA4_inti_value, DIO_PA3_inti_value, DIO_PA2_inti_value,
                   DIO_PA1_inti_value, DIO_PA0_inti_value);

  PORTC_REG = conc(DIO_PA7_inti_value, DIO_PA6_inti_value, DIO_PA5_inti_value,
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	80 83       	st	Z, r24
                   DIO_PA4_inti_value, DIO_PA3_inti_value, DIO_PA2_inti_value,
                   DIO_PA1_inti_value, DIO_PA0_inti_value);

  PORTD_REG = conc(DIO_PA7_inti_value, DIO_PA6_inti_value, DIO_PA5_inti_value,
     cca:	e2 e3       	ldi	r30, 0x32	; 50
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	80 83       	st	Z, r24
                   DIO_PA4_inti_value, DIO_PA3_inti_value, DIO_PA2_inti_value,
                   DIO_PA1_inti_value, DIO_PA0_inti_value);
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <DIO_set_pin_direction>:
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_set_pin_direction(uint_8 port_id, uint_8 pin_id,
                             uint_8 pin_direction) {
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <DIO_set_pin_direction+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <DIO_set_pin_direction+0x8>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <DIO_set_pin_direction+0xa>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	6b 83       	std	Y+3, r22	; 0x03
     cea:	4c 83       	std	Y+4, r20	; 0x04
  uint_8 Error_state = Return_Ok;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (pin_id <= PIN7) &&
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <DIO_set_pin_direction+0x20>
     cf6:	dc c0       	rjmp	.+440    	; 0xeb0 <DIO_set_pin_direction+0x1d8>
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	88 30       	cpi	r24, 0x08	; 8
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <DIO_set_pin_direction+0x28>
     cfe:	d8 c0       	rjmp	.+432    	; 0xeb0 <DIO_set_pin_direction+0x1d8>
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	21 f0       	breq	.+8      	; 0xd0e <DIO_set_pin_direction+0x36>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	88 23       	and	r24, r24
     d0a:	09 f0       	breq	.+2      	; 0xd0e <DIO_set_pin_direction+0x36>
     d0c:	d1 c0       	rjmp	.+418    	; 0xeb0 <DIO_set_pin_direction+0x1d8>
      (pin_direction == Output || pin_direction == INput)) {

    switch (port_id) {
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	3e 83       	std	Y+6, r19	; 0x06
     d16:	2d 83       	std	Y+5, r18	; 0x05
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	91 05       	cpc	r25, r1
     d20:	d1 f1       	breq	.+116    	; 0xd96 <DIO_set_pin_direction+0xbe>
     d22:	2d 81       	ldd	r18, Y+5	; 0x05
     d24:	3e 81       	ldd	r19, Y+6	; 0x06
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <DIO_set_pin_direction+0x56>
     d2c:	63 c0       	rjmp	.+198    	; 0xdf4 <DIO_set_pin_direction+0x11c>
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	09 f0       	breq	.+2      	; 0xd38 <DIO_set_pin_direction+0x60>
     d36:	8d c0       	rjmp	.+282    	; 0xe52 <DIO_set_pin_direction+0x17a>
    /***********  PORTA  *************/
    case (PORTA):
      switch (pin_direction) {
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	a1 f4       	brne	.+40     	; 0xd6c <DIO_set_pin_direction+0x94>
      case (Output):
        SET_BIT(DDRA_REG, pin_id);
     d44:	aa e3       	ldi	r26, 0x3A	; 58
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_set_pin_direction+0x8a>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_set_pin_direction+0x86>
     d66:	84 2b       	or	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	a3 c0       	rjmp	.+326    	; 0xeb2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRA_REG, pin_id);
     d6c:	aa e3       	ldi	r26, 0x3A	; 58
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_set_pin_direction+0xb2>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_set_pin_direction+0xae>
     d8e:	80 95       	com	r24
     d90:	84 23       	and	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	8e c0       	rjmp	.+284    	; 0xeb2 <DIO_set_pin_direction+0x1da>
      break;
    /********************************/

    /***********  PORTB *************/
    case (PORTB):
      switch (pin_direction) {
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	a1 f4       	brne	.+40     	; 0xdca <DIO_set_pin_direction+0xf2>
      case (Output):
        SET_BIT(DDRB_REG, pin_id);
     da2:	a7 e3       	ldi	r26, 0x37	; 55
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_set_pin_direction+0xe8>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_set_pin_direction+0xe4>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	74 c0       	rjmp	.+232    	; 0xeb2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRB_REG, pin_id);
     dca:	a7 e3       	ldi	r26, 0x37	; 55
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e7 e3       	ldi	r30, 0x37	; 55
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_set_pin_direction+0x110>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_set_pin_direction+0x10c>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	5f c0       	rjmp	.+190    	; 0xeb2 <DIO_set_pin_direction+0x1da>
      break;
    /********************************/

    /***********  PORTC  ************/
    case (PORTC):
      switch (pin_direction) {
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	91 05       	cpc	r25, r1
     dfe:	a1 f4       	brne	.+40     	; 0xe28 <DIO_set_pin_direction+0x150>
      case (Output):
        SET_BIT(DDRC_REG, pin_id);
     e00:	a4 e3       	ldi	r26, 0x34	; 52
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e4 e3       	ldi	r30, 0x34	; 52
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_set_pin_direction+0x146>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_set_pin_direction+0x142>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	45 c0       	rjmp	.+138    	; 0xeb2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRC_REG, pin_id);
     e28:	a4 e3       	ldi	r26, 0x34	; 52
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e4 e3       	ldi	r30, 0x34	; 52
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_set_pin_direction+0x16e>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_set_pin_direction+0x16a>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	30 c0       	rjmp	.+96     	; 0xeb2 <DIO_set_pin_direction+0x1da>
      break;
      /********************************/

    default:

      switch (pin_direction) {
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	a1 f4       	brne	.+40     	; 0xe86 <DIO_set_pin_direction+0x1ae>
      case (Output):
        SET_BIT(DDRD_REG, pin_id);
     e5e:	a1 e3       	ldi	r26, 0x31	; 49
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e1 e3       	ldi	r30, 0x31	; 49
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_set_pin_direction+0x1a4>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_set_pin_direction+0x1a0>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	16 c0       	rjmp	.+44     	; 0xeb2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRD_REG, pin_id);
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_set_pin_direction+0x1cc>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_set_pin_direction+0x1c8>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <DIO_set_pin_direction+0x1da>
      }
      break;
    }

  } else {
    Error_state = Return_NOT_Ok;
     eb0:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <DI_set_pin_value>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DI_set_pin_value(uint_8 port_id, uint_8 pin_id, uint_8 pin_value) {
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <DI_set_pin_value+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <DI_set_pin_value+0x8>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DI_set_pin_value+0xa>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	6b 83       	std	Y+3, r22	; 0x03
     ed8:	4c 83       	std	Y+4, r20	; 0x04

  uint_8 Error_state = Return_Ok;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) &&
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <DI_set_pin_value+0x20>
     ee4:	dc c0       	rjmp	.+440    	; 0x109e <DI_set_pin_value+0x1d8>
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	08 f0       	brcs	.+2      	; 0xeee <DI_set_pin_value+0x28>
     eec:	d8 c0       	rjmp	.+432    	; 0x109e <DI_set_pin_value+0x1d8>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	88 23       	and	r24, r24
     ef2:	21 f0       	breq	.+8      	; 0xefc <DI_set_pin_value+0x36>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	09 f0       	breq	.+2      	; 0xefc <DI_set_pin_value+0x36>
     efa:	d1 c0       	rjmp	.+418    	; 0x109e <DI_set_pin_value+0x1d8>
      (pin_id <= PIN7 && (pin_value == Pin_low || pin_value == Pin_high))) {

    switch (port_id) {
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3e 83       	std	Y+6, r19	; 0x06
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	8d 81       	ldd	r24, Y+5	; 0x05
     f08:	9e 81       	ldd	r25, Y+6	; 0x06
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	d1 f1       	breq	.+116    	; 0xf84 <DI_set_pin_value+0xbe>
     f10:	2d 81       	ldd	r18, Y+5	; 0x05
     f12:	3e 81       	ldd	r19, Y+6	; 0x06
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <DI_set_pin_value+0x56>
     f1a:	63 c0       	rjmp	.+198    	; 0xfe2 <DI_set_pin_value+0x11c>
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	09 f0       	breq	.+2      	; 0xf26 <DI_set_pin_value+0x60>
     f24:	8d c0       	rjmp	.+282    	; 0x1040 <DI_set_pin_value+0x17a>
    /********************  Port A  ****************************/
    case (PORTA):

      switch (pin_value) {
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	a1 f4       	brne	.+40     	; 0xf5a <DI_set_pin_value+0x94>
      case (Pin_high):
        SET_BIT(PORTA_REG, pin_id);
     f32:	ab e3       	ldi	r26, 0x3B	; 59
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DI_set_pin_value+0x8a>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DI_set_pin_value+0x86>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	a3 c0       	rjmp	.+326    	; 0x10a0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTA_REG, pin_id);
     f5a:	ab e3       	ldi	r26, 0x3B	; 59
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	eb e3       	ldi	r30, 0x3B	; 59
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DI_set_pin_value+0xb2>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DI_set_pin_value+0xae>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	8e c0       	rjmp	.+284    	; 0x10a0 <DI_set_pin_value+0x1da>
    /***********************************************************/

    /********************  Port B  ****************************/
    case (PORTB):

      switch (pin_value) {
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	91 05       	cpc	r25, r1
     f8e:	a1 f4       	brne	.+40     	; 0xfb8 <DI_set_pin_value+0xf2>
      case (Pin_high):
        SET_BIT(PORTB_REG, pin_id);
     f90:	a8 e3       	ldi	r26, 0x38	; 56
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e3       	ldi	r30, 0x38	; 56
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DI_set_pin_value+0xe8>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DI_set_pin_value+0xe4>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	74 c0       	rjmp	.+232    	; 0x10a0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTB_REG, pin_id);
     fb8:	a8 e3       	ldi	r26, 0x38	; 56
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e3       	ldi	r30, 0x38	; 56
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DI_set_pin_value+0x110>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DI_set_pin_value+0x10c>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	5f c0       	rjmp	.+190    	; 0x10a0 <DI_set_pin_value+0x1da>
    /***********************************************************/

    /********************  Port C ****************************/
    case (PORTC):

      switch (pin_value) {
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	a1 f4       	brne	.+40     	; 0x1016 <DI_set_pin_value+0x150>
      case (Pin_high):
        SET_BIT(PORTC_REG, pin_id);
     fee:	a5 e3       	ldi	r26, 0x35	; 53
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e5 e3       	ldi	r30, 0x35	; 53
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DI_set_pin_value+0x146>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DI_set_pin_value+0x142>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	45 c0       	rjmp	.+138    	; 0x10a0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTC_REG, pin_id);
    1016:	a5 e3       	ldi	r26, 0x35	; 53
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e3       	ldi	r30, 0x35	; 53
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DI_set_pin_value+0x16e>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DI_set_pin_value+0x16a>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	30 c0       	rjmp	.+96     	; 0x10a0 <DI_set_pin_value+0x1da>
      /***********************************************************/

      /********************  Port D ****************************/

    default:
      switch (pin_value) {
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	a1 f4       	brne	.+40     	; 0x1074 <DI_set_pin_value+0x1ae>
      case (Pin_high):
        SET_BIT(PORTD_REG, pin_id);
    104c:	a2 e3       	ldi	r26, 0x32	; 50
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DI_set_pin_value+0x1a4>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DI_set_pin_value+0x1a0>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	16 c0       	rjmp	.+44     	; 0x10a0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTD_REG, pin_id);
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DI_set_pin_value+0x1cc>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DI_set_pin_value+0x1c8>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <DI_set_pin_value+0x1da>

    /***********************************************************/

  } else {

    Error_state = Return_NOT_Ok;
    109e:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	26 96       	adiw	r28, 0x06	; 6
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_get_pin_value>:
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_get_pin_value(uint_8 port_id, uint_8 pin_id,
                         uint_8 *return_pin_value) {
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	27 97       	sbiw	r28, 0x07	; 7
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
    10cc:	5d 83       	std	Y+5, r21	; 0x05
    10ce:	4c 83       	std	Y+4, r20	; 0x04

  uint_8 Error_state = Return_Ok;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (pin_id <= PIN7) && (return_pin_value != NULL)) {
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_get_pin_value+0x28>
    10da:	6e c0       	rjmp	.+220    	; 0x11b8 <DIO_get_pin_value+0x104>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <DIO_get_pin_value+0x30>
    10e2:	6a c0       	rjmp	.+212    	; 0x11b8 <DIO_get_pin_value+0x104>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <DIO_get_pin_value+0x3a>
    10ec:	65 c0       	rjmp	.+202    	; 0x11b8 <DIO_get_pin_value+0x104>

    switch (port_id) {
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3f 83       	std	Y+7, r19	; 0x07
    10f6:	2e 83       	std	Y+6, r18	; 0x06
    10f8:	4e 81       	ldd	r20, Y+6	; 0x06
    10fa:	5f 81       	ldd	r21, Y+7	; 0x07
    10fc:	41 30       	cpi	r20, 0x01	; 1
    10fe:	51 05       	cpc	r21, r1
    1100:	f9 f0       	breq	.+62     	; 0x1140 <DIO_get_pin_value+0x8c>
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	9f 81       	ldd	r25, Y+7	; 0x07
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	91 05       	cpc	r25, r1
    110a:	71 f1       	breq	.+92     	; 0x1168 <DIO_get_pin_value+0xb4>
    110c:	2e 81       	ldd	r18, Y+6	; 0x06
    110e:	3f 81       	ldd	r19, Y+7	; 0x07
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	09 f0       	breq	.+2      	; 0x1118 <DIO_get_pin_value+0x64>
    1116:	3c c0       	rjmp	.+120    	; 0x1190 <DIO_get_pin_value+0xdc>
    case (PORTA):
      *return_pin_value = GET_BIT(PINA_REG, pin_id);
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_get_pin_value+0x7c>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_get_pin_value+0x78>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	ec 81       	ldd	r30, Y+4	; 0x04
    113a:	fd 81       	ldd	r31, Y+5	; 0x05
    113c:	80 83       	st	Z, r24
    113e:	3d c0       	rjmp	.+122    	; 0x11ba <DIO_get_pin_value+0x106>
      break;
    case (PORTB):
      *return_pin_value = GET_BIT(PINB_REG, pin_id);
    1140:	e6 e3       	ldi	r30, 0x36	; 54
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_get_pin_value+0xa4>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_get_pin_value+0xa0>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	ec 81       	ldd	r30, Y+4	; 0x04
    1162:	fd 81       	ldd	r31, Y+5	; 0x05
    1164:	80 83       	st	Z, r24
    1166:	29 c0       	rjmp	.+82     	; 0x11ba <DIO_get_pin_value+0x106>
      break;
    case (PORTC):
      *return_pin_value = GET_BIT(PINC_REG, pin_id);
    1168:	e3 e3       	ldi	r30, 0x33	; 51
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_get_pin_value+0xcc>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_get_pin_value+0xc8>
    1184:	ca 01       	movw	r24, r20
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	ec 81       	ldd	r30, Y+4	; 0x04
    118a:	fd 81       	ldd	r31, Y+5	; 0x05
    118c:	80 83       	st	Z, r24
    118e:	15 c0       	rjmp	.+42     	; 0x11ba <DIO_get_pin_value+0x106>
      break;
    default:
      *return_pin_value = GET_BIT(PIND_REG, pin_id);
    1190:	e0 e3       	ldi	r30, 0x30	; 48
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a9 01       	movw	r20, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_get_pin_value+0xf4>
    11a4:	55 95       	asr	r21
    11a6:	47 95       	ror	r20
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_get_pin_value+0xf0>
    11ac:	ca 01       	movw	r24, r20
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	ec 81       	ldd	r30, Y+4	; 0x04
    11b2:	fd 81       	ldd	r31, Y+5	; 0x05
    11b4:	80 83       	st	Z, r24
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <DIO_get_pin_value+0x106>
      break;
    }

  } else {

    Error_state = Return_NOT_Ok;
    11b8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	27 96       	adiw	r28, 0x07	; 7
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_set_port_direction>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_set_port_direction(uint_8 port_id, uint_8 pin_direction) {
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_set_port_direction+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_set_port_direction+0x8>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01

  if ((port_id <= PORTD) &&
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_set_port_direction+0x1e>
    11ea:	56 c0       	rjmp	.+172    	; 0x1298 <DIO_set_port_direction+0xca>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	21 f0       	breq	.+8      	; 0x11fa <DIO_set_port_direction+0x2c>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 23       	and	r24, r24
    11f6:	09 f0       	breq	.+2      	; 0x11fa <DIO_set_port_direction+0x2c>
    11f8:	4f c0       	rjmp	.+158    	; 0x1298 <DIO_set_port_direction+0xca>
      (pin_direction == Output || pin_direction == INput)) {

    switch (port_id) {
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	c1 f0       	breq	.+48     	; 0x123e <DIO_set_port_direction+0x70>
    120e:	2c 81       	ldd	r18, Y+4	; 0x04
    1210:	3d 81       	ldd	r19, Y+5	; 0x05
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	11 f1       	breq	.+68     	; 0x125c <DIO_set_port_direction+0x8e>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	69 f5       	brne	.+90     	; 0x127a <DIO_set_port_direction+0xac>

      /******************  PORT A ********************/

    case (PORTA):

      switch (pin_direction) {
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	29 f4       	brne	.+10     	; 0x1236 <DIO_set_port_direction+0x68>
      case (Output):
        DDRA_REG = 0xff;
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	80 83       	st	Z, r24
    1234:	32 c0       	rjmp	.+100    	; 0x129a <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRA_REG = 0x00;
    1236:	ea e3       	ldi	r30, 0x3A	; 58
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	10 82       	st	Z, r1
    123c:	2e c0       	rjmp	.+92     	; 0x129a <DIO_set_port_direction+0xcc>
      /***********************************************/

      /*******************PORT B***********************/
    case (PORTB):

      switch (pin_direction) {
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	29 f4       	brne	.+10     	; 0x1254 <DIO_set_port_direction+0x86>
      case (Output):
        DDRB_REG = 0xff;
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	80 83       	st	Z, r24
    1252:	23 c0       	rjmp	.+70     	; 0x129a <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRB_REG = 0x00;
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	10 82       	st	Z, r1
    125a:	1f c0       	rjmp	.+62     	; 0x129a <DIO_set_port_direction+0xcc>
      /***************************************************/

      /******************PORT C***************************/
    case (PORTC):

      switch (pin_direction) {
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	29 f4       	brne	.+10     	; 0x1272 <DIO_set_port_direction+0xa4>
      case (Output):
        DDRC_REG = 0xff;
    1268:	e4 e3       	ldi	r30, 0x34	; 52
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	80 83       	st	Z, r24
    1270:	14 c0       	rjmp	.+40     	; 0x129a <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRC_REG = 0x00;
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 82       	st	Z, r1
    1278:	10 c0       	rjmp	.+32     	; 0x129a <DIO_set_port_direction+0xcc>
      /****************************************************/

      /********************PORT D*************************/
    default:

      switch (pin_direction) {
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	29 f4       	brne	.+10     	; 0x1290 <DIO_set_port_direction+0xc2>
      case (Output):
        DDRC_REG = 0xff;
    1286:	e4 e3       	ldi	r30, 0x34	; 52
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	80 83       	st	Z, r24
    128e:	05 c0       	rjmp	.+10     	; 0x129a <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRC_REG = 0x00;
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1
    1296:	01 c0       	rjmp	.+2      	; 0x129a <DIO_set_port_direction+0xcc>

  }
  /****************************************************/
  else {

    Error_state = Return_NOT_Ok;
    1298:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DI_set_port_value>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DI_set_port_value(uint_8 port_id, uint_8 pin_value) {
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DI_set_port_value+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DI_set_port_value+0x8>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD)) {
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	38 f5       	brcc	.+78     	; 0x1316 <DI_set_port_value+0x6a>

    switch (port_id) {
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3d 83       	std	Y+5, r19	; 0x05
    12d0:	2c 83       	std	Y+4, r18	; 0x04
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	71 f0       	breq	.+28     	; 0x12f8 <DI_set_port_value+0x4c>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	71 f0       	breq	.+28     	; 0x1302 <DI_set_port_value+0x56>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	79 f4       	brne	.+30     	; 0x130c <DI_set_port_value+0x60>
    case (PORTA):
      PORTA_REG = pin_value;
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	80 83       	st	Z, r24
    12f6:	10 c0       	rjmp	.+32     	; 0x1318 <DI_set_port_value+0x6c>
      break;

    case (PORTB):
      PORTB_REG = pin_value;
    12f8:	e8 e3       	ldi	r30, 0x38	; 56
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	80 83       	st	Z, r24
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <DI_set_port_value+0x6c>
      break;

    case (PORTC):
      PORTC_REG = pin_value;
    1302:	e5 e3       	ldi	r30, 0x35	; 53
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	80 83       	st	Z, r24
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <DI_set_port_value+0x6c>
      break;

    default:
      PORTD_REG = pin_value;
    130c:	e2 e3       	ldi	r30, 0x32	; 50
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	80 83       	st	Z, r24
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <DI_set_port_value+0x6c>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    1316:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <DIO_get_port_value>:
uint_8 DIO_get_port_value(uint_8 port_id, uint_8 *return_port_value) {
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_get_port_value+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_get_port_value+0x8>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_get_port_value+0xa>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	8a 83       	std	Y+2, r24	; 0x02
    133a:	7c 83       	std	Y+4, r23	; 0x04
    133c:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (return_port_value != NULL)) {
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	98 f5       	brcc	.+102    	; 0x13ae <DIO_get_port_value+0x84>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	79 f1       	breq	.+94     	; 0x13ae <DIO_get_port_value+0x84>

    switch (port_id) {
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3e 83       	std	Y+6, r19	; 0x06
    1358:	2d 83       	std	Y+5, r18	; 0x05
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <DIO_get_port_value+0x5a>
    1364:	2d 81       	ldd	r18, Y+5	; 0x05
    1366:	3e 81       	ldd	r19, Y+6	; 0x06
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	91 f0       	breq	.+36     	; 0x1392 <DIO_get_port_value+0x68>
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	a9 f4       	brne	.+42     	; 0x13a0 <DIO_get_port_value+0x76>
    case (PORTA):
      *return_port_value = PINA_REG;
    1376:	e9 e3       	ldi	r30, 0x39	; 57
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	eb 81       	ldd	r30, Y+3	; 0x03
    137e:	fc 81       	ldd	r31, Y+4	; 0x04
    1380:	80 83       	st	Z, r24
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <DIO_get_port_value+0x86>
      break;

    case (PORTB):
      *return_port_value = PINB_REG;
    1384:	e6 e3       	ldi	r30, 0x36	; 54
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	eb 81       	ldd	r30, Y+3	; 0x03
    138c:	fc 81       	ldd	r31, Y+4	; 0x04
    138e:	80 83       	st	Z, r24
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <DIO_get_port_value+0x86>
      break;

    case (PORTC):
      *return_port_value = PINC_REG;
    1392:	e3 e3       	ldi	r30, 0x33	; 51
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	eb 81       	ldd	r30, Y+3	; 0x03
    139a:	fc 81       	ldd	r31, Y+4	; 0x04
    139c:	80 83       	st	Z, r24
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <DIO_get_port_value+0x86>
      break;

    default:
      *return_port_value = PIND_REG;
    13a0:	e0 e3       	ldi	r30, 0x30	; 48
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	eb 81       	ldd	r30, Y+3	; 0x03
    13a8:	fc 81       	ldd	r31, Y+4	; 0x04
    13aa:	80 83       	st	Z, r24
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <DIO_get_port_value+0x86>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    13ae:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b2:	26 96       	adiw	r28, 0x06	; 6
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <LCD_init>:
/*LCD includes*/
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_init(void) {
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	cc 54       	subi	r28, 0x4C	; 76
    13d2:	d0 40       	sbci	r29, 0x00	; 0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 5b       	subi	r30, 0xB7	; 183
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ac e0       	ldi	r26, 0x0C	; 12
    13ea:	b2 e4       	ldi	r27, 0x42	; 66
    13ec:	80 83       	st	Z, r24
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	8e 01       	movw	r16, r28
    13f6:	0b 5b       	subi	r16, 0xBB	; 187
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	fe 01       	movw	r30, r28
    13fc:	e7 5b       	subi	r30, 0xB7	; 183
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a ef       	ldi	r20, 0xFA	; 250
    140e:	54 e4       	ldi	r21, 0x44	; 68
    1410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	f8 01       	movw	r30, r16
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1422:	fe 01       	movw	r30, r28
    1424:	eb 5b       	subi	r30, 0xBB	; 187
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	44 f4       	brge	.+16     	; 0x1450 <LCD_init+0x8c>
		__ticks = 1;
    1440:	fe 01       	movw	r30, r28
    1442:	ed 5b       	subi	r30, 0xBD	; 189
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	64 c0       	rjmp	.+200    	; 0x1518 <LCD_init+0x154>
	else if (__tmp > 65535)
    1450:	fe 01       	movw	r30, r28
    1452:	eb 5b       	subi	r30, 0xBB	; 187
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	0c f0       	brlt	.+2      	; 0x1470 <LCD_init+0xac>
    146e:	43 c0       	rjmp	.+134    	; 0x14f6 <LCD_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	fe 01       	movw	r30, r28
    1472:	e7 5b       	subi	r30, 0xB7	; 183
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	60 81       	ld	r22, Z
    1478:	71 81       	ldd	r23, Z+1	; 0x01
    147a:	82 81       	ldd	r24, Z+2	; 0x02
    147c:	93 81       	ldd	r25, Z+3	; 0x03
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8e 01       	movw	r16, r28
    1490:	0d 5b       	subi	r16, 0xBD	; 189
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	f8 01       	movw	r30, r16
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	1f c0       	rjmp	.+62     	; 0x14e6 <LCD_init+0x122>
    14a8:	fe 01       	movw	r30, r28
    14aa:	ef 5b       	subi	r30, 0xBF	; 191
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	88 ec       	ldi	r24, 0xC8	; 200
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b6:	fe 01       	movw	r30, r28
    14b8:	ef 5b       	subi	r30, 0xBF	; 191
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_init+0xfc>
    14c4:	fe 01       	movw	r30, r28
    14c6:	ef 5b       	subi	r30, 0xBF	; 191
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ce:	de 01       	movw	r26, r28
    14d0:	ad 5b       	subi	r26, 0xBD	; 189
    14d2:	bf 4f       	sbci	r27, 0xFF	; 255
    14d4:	fe 01       	movw	r30, r28
    14d6:	ed 5b       	subi	r30, 0xBD	; 189
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	9c 93       	st	X, r25
    14e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e6:	fe 01       	movw	r30, r28
    14e8:	ed 5b       	subi	r30, 0xBD	; 189
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	d1 f6       	brne	.-76     	; 0x14a8 <LCD_init+0xe4>
    14f4:	24 c0       	rjmp	.+72     	; 0x153e <LCD_init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	8e 01       	movw	r16, r28
    14f8:	0d 5b       	subi	r16, 0xBD	; 189
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	fe 01       	movw	r30, r28
    14fe:	eb 5b       	subi	r30, 0xBB	; 187
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	f8 01       	movw	r30, r16
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	80 83       	st	Z, r24
    1518:	fe 01       	movw	r30, r28
    151a:	ed 5b       	subi	r30, 0xBD	; 189
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	fe 01       	movw	r30, r28
    1524:	ff 96       	adiw	r30, 0x3f	; 63
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	fe 01       	movw	r30, r28
    152c:	ff 96       	adiw	r30, 0x3f	; 63
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <LCD_init+0x16e>
    1536:	fe 01       	movw	r30, r28
    1538:	ff 96       	adiw	r30, 0x3f	; 63
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
#if LCD_MODE == LCD_8_BIT_MODE
  /*8_bit initialization for LCD */

  _delay_ms(35);

  LCD_send_cmnd(0b00111000);
    153e:	88 e3       	ldi	r24, 0x38	; 56
    1540:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e2       	ldi	r26, 0x20	; 32
    154a:	b2 e4       	ldi	r27, 0x42	; 66
    154c:	8b af       	std	Y+59, r24	; 0x3b
    154e:	9c af       	std	Y+60, r25	; 0x3c
    1550:	ad af       	std	Y+61, r26	; 0x3d
    1552:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1554:	6b ad       	ldd	r22, Y+59	; 0x3b
    1556:	7c ad       	ldd	r23, Y+60	; 0x3c
    1558:	8d ad       	ldd	r24, Y+61	; 0x3d
    155a:	9e ad       	ldd	r25, Y+62	; 0x3e
    155c:	2b ea       	ldi	r18, 0xAB	; 171
    155e:	3a ea       	ldi	r19, 0xAA	; 170
    1560:	4a e2       	ldi	r20, 0x2A	; 42
    1562:	50 e4       	ldi	r21, 0x40	; 64
    1564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8f ab       	std	Y+55, r24	; 0x37
    156e:	98 af       	std	Y+56, r25	; 0x38
    1570:	a9 af       	std	Y+57, r26	; 0x39
    1572:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1574:	6f a9       	ldd	r22, Y+55	; 0x37
    1576:	78 ad       	ldd	r23, Y+56	; 0x38
    1578:	89 ad       	ldd	r24, Y+57	; 0x39
    157a:	9a ad       	ldd	r25, Y+58	; 0x3a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1588:	88 23       	and	r24, r24
    158a:	1c f4       	brge	.+6      	; 0x1592 <LCD_init+0x1ce>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	8e ab       	std	Y+54, r24	; 0x36
    1590:	91 c0       	rjmp	.+290    	; 0x16b4 <LCD_init+0x2f0>
	else if (__tmp > 255)
    1592:	6f a9       	ldd	r22, Y+55	; 0x37
    1594:	78 ad       	ldd	r23, Y+56	; 0x38
    1596:	89 ad       	ldd	r24, Y+57	; 0x39
    1598:	9a ad       	ldd	r25, Y+58	; 0x3a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	53 e4       	ldi	r21, 0x43	; 67
    15a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	0c f0       	brlt	.+2      	; 0x15ac <LCD_init+0x1e8>
    15aa:	7b c0       	rjmp	.+246    	; 0x16a2 <LCD_init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    15ac:	6b ad       	ldd	r22, Y+59	; 0x3b
    15ae:	7c ad       	ldd	r23, Y+60	; 0x3c
    15b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8a ab       	std	Y+50, r24	; 0x32
    15c6:	9b ab       	std	Y+51, r25	; 0x33
    15c8:	ac ab       	std	Y+52, r26	; 0x34
    15ca:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6a a9       	ldd	r22, Y+50	; 0x32
    15ce:	7b a9       	ldd	r23, Y+51	; 0x33
    15d0:	8c a9       	ldd	r24, Y+52	; 0x34
    15d2:	9d a9       	ldd	r25, Y+53	; 0x35
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8e a7       	std	Y+46, r24	; 0x2e
    15e6:	9f a7       	std	Y+47, r25	; 0x2f
    15e8:	a8 ab       	std	Y+48, r26	; 0x30
    15ea:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    15ec:	6e a5       	ldd	r22, Y+46	; 0x2e
    15ee:	7f a5       	ldd	r23, Y+47	; 0x2f
    15f0:	88 a9       	ldd	r24, Y+48	; 0x30
    15f2:	99 a9       	ldd	r25, Y+49	; 0x31
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_init+0x24a>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9d a7       	std	Y+45, r25	; 0x2d
    160a:	8c a7       	std	Y+44, r24	; 0x2c
    160c:	3f c0       	rjmp	.+126    	; 0x168c <LCD_init+0x2c8>
	else if (__tmp > 65535)
    160e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1610:	7f a5       	ldd	r23, Y+47	; 0x2f
    1612:	88 a9       	ldd	r24, Y+48	; 0x30
    1614:	99 a9       	ldd	r25, Y+49	; 0x31
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <LCD_init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6a a9       	ldd	r22, Y+50	; 0x32
    1628:	7b a9       	ldd	r23, Y+51	; 0x33
    162a:	8c a9       	ldd	r24, Y+52	; 0x34
    162c:	9d a9       	ldd	r25, Y+53	; 0x35
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9d a7       	std	Y+45, r25	; 0x2d
    164c:	8c a7       	std	Y+44, r24	; 0x2c
    164e:	0f c0       	rjmp	.+30     	; 0x166e <LCD_init+0x2aa>
    1650:	88 ec       	ldi	r24, 0xC8	; 200
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9b a7       	std	Y+43, r25	; 0x2b
    1656:	8a a7       	std	Y+42, r24	; 0x2a
    1658:	8a a5       	ldd	r24, Y+42	; 0x2a
    165a:	9b a5       	ldd	r25, Y+43	; 0x2b
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_init+0x298>
    1660:	9b a7       	std	Y+43, r25	; 0x2b
    1662:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8c a5       	ldd	r24, Y+44	; 0x2c
    1666:	9d a5       	ldd	r25, Y+45	; 0x2d
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9d a7       	std	Y+45, r25	; 0x2d
    166c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1670:	9d a5       	ldd	r25, Y+45	; 0x2d
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <LCD_init+0x28c>
    1676:	24 c0       	rjmp	.+72     	; 0x16c0 <LCD_init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6e a5       	ldd	r22, Y+46	; 0x2e
    167a:	7f a5       	ldd	r23, Y+47	; 0x2f
    167c:	88 a9       	ldd	r24, Y+48	; 0x30
    167e:	99 a9       	ldd	r25, Y+49	; 0x31
    1680:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9d a7       	std	Y+45, r25	; 0x2d
    168a:	8c a7       	std	Y+44, r24	; 0x2c
    168c:	8c a5       	ldd	r24, Y+44	; 0x2c
    168e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1690:	99 a7       	std	Y+41, r25	; 0x29
    1692:	88 a7       	std	Y+40, r24	; 0x28
    1694:	88 a5       	ldd	r24, Y+40	; 0x28
    1696:	99 a5       	ldd	r25, Y+41	; 0x29
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_init+0x2d4>
    169c:	99 a7       	std	Y+41, r25	; 0x29
    169e:	88 a7       	std	Y+40, r24	; 0x28
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <LCD_init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16a2:	6f a9       	ldd	r22, Y+55	; 0x37
    16a4:	78 ad       	ldd	r23, Y+56	; 0x38
    16a6:	89 ad       	ldd	r24, Y+57	; 0x39
    16a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8e ab       	std	Y+54, r24	; 0x36
    16b4:	8e a9       	ldd	r24, Y+54	; 0x36
    16b6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16b8:	8f a1       	ldd	r24, Y+39	; 0x27
    16ba:	8a 95       	dec	r24
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <LCD_init+0x2f6>
    16be:	8f a3       	std	Y+39, r24	; 0x27

  _delay_us(40);

  LCD_send_cmnd(0b00001111);
    16c0:	8f e0       	ldi	r24, 0x0F	; 15
    16c2:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e2       	ldi	r26, 0x20	; 32
    16cc:	b2 e4       	ldi	r27, 0x42	; 66
    16ce:	8b a3       	std	Y+35, r24	; 0x23
    16d0:	9c a3       	std	Y+36, r25	; 0x24
    16d2:	ad a3       	std	Y+37, r26	; 0x25
    16d4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16d6:	6b a1       	ldd	r22, Y+35	; 0x23
    16d8:	7c a1       	ldd	r23, Y+36	; 0x24
    16da:	8d a1       	ldd	r24, Y+37	; 0x25
    16dc:	9e a1       	ldd	r25, Y+38	; 0x26
    16de:	2b ea       	ldi	r18, 0xAB	; 171
    16e0:	3a ea       	ldi	r19, 0xAA	; 170
    16e2:	4a e2       	ldi	r20, 0x2A	; 42
    16e4:	50 e4       	ldi	r21, 0x40	; 64
    16e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8f 8f       	std	Y+31, r24	; 0x1f
    16f0:	98 a3       	std	Y+32, r25	; 0x20
    16f2:	a9 a3       	std	Y+33, r26	; 0x21
    16f4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16f8:	78 a1       	ldd	r23, Y+32	; 0x20
    16fa:	89 a1       	ldd	r24, Y+33	; 0x21
    16fc:	9a a1       	ldd	r25, Y+34	; 0x22
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	1c f4       	brge	.+6      	; 0x1714 <LCD_init+0x350>
		__ticks = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	8e 8f       	std	Y+30, r24	; 0x1e
    1712:	91 c0       	rjmp	.+290    	; 0x1836 <LCD_init+0x472>
	else if (__tmp > 255)
    1714:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1716:	78 a1       	ldd	r23, Y+32	; 0x20
    1718:	89 a1       	ldd	r24, Y+33	; 0x21
    171a:	9a a1       	ldd	r25, Y+34	; 0x22
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4f e7       	ldi	r20, 0x7F	; 127
    1722:	53 e4       	ldi	r21, 0x43	; 67
    1724:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1728:	18 16       	cp	r1, r24
    172a:	0c f0       	brlt	.+2      	; 0x172e <LCD_init+0x36a>
    172c:	7b c0       	rjmp	.+246    	; 0x1824 <LCD_init+0x460>
	{
		_delay_ms(__us / 1000.0);
    172e:	6b a1       	ldd	r22, Y+35	; 0x23
    1730:	7c a1       	ldd	r23, Y+36	; 0x24
    1732:	8d a1       	ldd	r24, Y+37	; 0x25
    1734:	9e a1       	ldd	r25, Y+38	; 0x26
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a e7       	ldi	r20, 0x7A	; 122
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8a 8f       	std	Y+26, r24	; 0x1a
    1748:	9b 8f       	std	Y+27, r25	; 0x1b
    174a:	ac 8f       	std	Y+28, r26	; 0x1c
    174c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1750:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1752:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1754:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a ef       	ldi	r20, 0xFA	; 250
    175c:	54 e4       	ldi	r21, 0x44	; 68
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	8e 8b       	std	Y+22, r24	; 0x16
    1768:	9f 8b       	std	Y+23, r25	; 0x17
    176a:	a8 8f       	std	Y+24, r26	; 0x18
    176c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    176e:	6e 89       	ldd	r22, Y+22	; 0x16
    1770:	7f 89       	ldd	r23, Y+23	; 0x17
    1772:	88 8d       	ldd	r24, Y+24	; 0x18
    1774:	99 8d       	ldd	r25, Y+25	; 0x19
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_init+0x3cc>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9d 8b       	std	Y+21, r25	; 0x15
    178c:	8c 8b       	std	Y+20, r24	; 0x14
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_init+0x44a>
	else if (__tmp > 65535)
    1790:	6e 89       	ldd	r22, Y+22	; 0x16
    1792:	7f 89       	ldd	r23, Y+23	; 0x17
    1794:	88 8d       	ldd	r24, Y+24	; 0x18
    1796:	99 8d       	ldd	r25, Y+25	; 0x19
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9d 8b       	std	Y+21, r25	; 0x15
    17ce:	8c 8b       	std	Y+20, r24	; 0x14
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_init+0x42c>
    17d2:	88 ec       	ldi	r24, 0xC8	; 200
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9b 8b       	std	Y+19, r25	; 0x13
    17d8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17da:	8a 89       	ldd	r24, Y+18	; 0x12
    17dc:	9b 89       	ldd	r25, Y+19	; 0x13
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_init+0x41a>
    17e2:	9b 8b       	std	Y+19, r25	; 0x13
    17e4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8c 89       	ldd	r24, Y+20	; 0x14
    17e8:	9d 89       	ldd	r25, Y+21	; 0x15
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	9d 8b       	std	Y+21, r25	; 0x15
    17ee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8c 89       	ldd	r24, Y+20	; 0x14
    17f2:	9d 89       	ldd	r25, Y+21	; 0x15
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_init+0x40e>
    17f8:	24 c0       	rjmp	.+72     	; 0x1842 <LCD_init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	6e 89       	ldd	r22, Y+22	; 0x16
    17fc:	7f 89       	ldd	r23, Y+23	; 0x17
    17fe:	88 8d       	ldd	r24, Y+24	; 0x18
    1800:	99 8d       	ldd	r25, Y+25	; 0x19
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9d 8b       	std	Y+21, r25	; 0x15
    180c:	8c 8b       	std	Y+20, r24	; 0x14
    180e:	8c 89       	ldd	r24, Y+20	; 0x14
    1810:	9d 89       	ldd	r25, Y+21	; 0x15
    1812:	99 8b       	std	Y+17, r25	; 0x11
    1814:	88 8b       	std	Y+16, r24	; 0x10
    1816:	88 89       	ldd	r24, Y+16	; 0x10
    1818:	99 89       	ldd	r25, Y+17	; 0x11
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_init+0x456>
    181e:	99 8b       	std	Y+17, r25	; 0x11
    1820:	88 8b       	std	Y+16, r24	; 0x10
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1824:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1826:	78 a1       	ldd	r23, Y+32	; 0x20
    1828:	89 a1       	ldd	r24, Y+33	; 0x21
    182a:	9a a1       	ldd	r25, Y+34	; 0x22
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8e 8f       	std	Y+30, r24	; 0x1e
    1836:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1838:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    183a:	8f 85       	ldd	r24, Y+15	; 0x0f
    183c:	8a 95       	dec	r24
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_init+0x478>
    1840:	8f 87       	std	Y+15, r24	; 0x0f

  _delay_us(40);

  LCD_send_cmnd(0b00000001);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e4       	ldi	r27, 0x40	; 64
    1850:	8b 87       	std	Y+11, r24	; 0x0b
    1852:	9c 87       	std	Y+12, r25	; 0x0c
    1854:	ad 87       	std	Y+13, r26	; 0x0d
    1856:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6b 85       	ldd	r22, Y+11	; 0x0b
    185a:	7c 85       	ldd	r23, Y+12	; 0x0c
    185c:	8d 85       	ldd	r24, Y+13	; 0x0d
    185e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8f 83       	std	Y+7, r24	; 0x07
    1872:	98 87       	std	Y+8, r25	; 0x08
    1874:	a9 87       	std	Y+9, r26	; 0x09
    1876:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1878:	6f 81       	ldd	r22, Y+7	; 0x07
    187a:	78 85       	ldd	r23, Y+8	; 0x08
    187c:	89 85       	ldd	r24, Y+9	; 0x09
    187e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <LCD_init+0x4d6>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <LCD_init+0x554>
	else if (__tmp > 65535)
    189a:	6f 81       	ldd	r22, Y+7	; 0x07
    189c:	78 85       	ldd	r23, Y+8	; 0x08
    189e:	89 85       	ldd	r24, Y+9	; 0x09
    18a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <LCD_init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <LCD_init+0x536>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_init+0x524>
    18ec:	9c 83       	std	Y+4, r25	; 0x04
    18ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <LCD_init+0x518>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <LCD_init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6f 81       	ldd	r22, Y+7	; 0x07
    1906:	78 85       	ldd	r23, Y+8	; 0x08
    1908:	89 85       	ldd	r24, Y+9	; 0x09
    190a:	9a 85       	ldd	r25, Y+10	; 0x0a
    190c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_init+0x560>
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01

  _delay_ms(2);

  LCD_send_cmnd(0b00000110);
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>

  LCD_send_cmnd(0b00000000);
  LCD_send_cmnd(0b01100000);

#endif
}
    1932:	c4 5b       	subi	r28, 0xB4	; 180
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <LCD_send_cmnd>:
void LCD_send_cmnd(uint_8 cmnd) {
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	69 97       	sbiw	r28, 0x19	; 25
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	89 8f       	std	Y+25, r24	; 0x19

  /*directons of all pins will be set from config file of DIO driver*/

#if LCD_MODE == LCD_8_BIT_MODE

  DI_set_pin_value(LCD_PORT_RS, LCD_PIN_RS,
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
                   Pin_low); /* RS low vlotage to recive cmnd*/

  DI_set_pin_value(LCD_PORT_Rw, LCD_PIN_RW,
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	65 e0       	ldi	r22, 0x05	; 5
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
                   Pin_low); /* RW low vlotage to write on LCD*/

  DI_set_port_value(LCD_PORT_DATA,
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	69 8d       	ldd	r22, Y+25	; 0x19
    1978:	0e 94 56 09 	call	0x12ac	; 0x12ac <DI_set_port_value>
                    cmnd); /* wrire cmnd on port that is connected with LCD*/

  DI_set_pin_value(
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	67 e0       	ldi	r22, 0x07	; 7
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e8       	ldi	r26, 0x80	; 128
    198c:	bf e3       	ldi	r27, 0x3F	; 63
    198e:	8d 8b       	std	Y+21, r24	; 0x15
    1990:	9e 8b       	std	Y+22, r25	; 0x16
    1992:	af 8b       	std	Y+23, r26	; 0x17
    1994:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1996:	6d 89       	ldd	r22, Y+21	; 0x15
    1998:	7e 89       	ldd	r23, Y+22	; 0x16
    199a:	8f 89       	ldd	r24, Y+23	; 0x17
    199c:	98 8d       	ldd	r25, Y+24	; 0x18
    199e:	2b ea       	ldi	r18, 0xAB	; 171
    19a0:	3a ea       	ldi	r19, 0xAA	; 170
    19a2:	4a e2       	ldi	r20, 0x2A	; 42
    19a4:	50 e4       	ldi	r21, 0x40	; 64
    19a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	89 8b       	std	Y+17, r24	; 0x11
    19b0:	9a 8b       	std	Y+18, r25	; 0x12
    19b2:	ab 8b       	std	Y+19, r26	; 0x13
    19b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19b6:	69 89       	ldd	r22, Y+17	; 0x11
    19b8:	7a 89       	ldd	r23, Y+18	; 0x12
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	1c f4       	brge	.+6      	; 0x19d4 <LCD_send_cmnd+0x8a>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	88 8b       	std	Y+16, r24	; 0x10
    19d2:	91 c0       	rjmp	.+290    	; 0x1af6 <LCD_send_cmnd+0x1ac>
	else if (__tmp > 255)
    19d4:	69 89       	ldd	r22, Y+17	; 0x11
    19d6:	7a 89       	ldd	r23, Y+18	; 0x12
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	53 e4       	ldi	r21, 0x43	; 67
    19e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	0c f0       	brlt	.+2      	; 0x19ee <LCD_send_cmnd+0xa4>
    19ec:	7b c0       	rjmp	.+246    	; 0x1ae4 <LCD_send_cmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a e7       	ldi	r20, 0x7A	; 122
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8c 87       	std	Y+12, r24	; 0x0c
    1a08:	9d 87       	std	Y+13, r25	; 0x0d
    1a0a:	ae 87       	std	Y+14, r26	; 0x0e
    1a0c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a10:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a ef       	ldi	r20, 0xFA	; 250
    1a1c:	54 e4       	ldi	r21, 0x44	; 68
    1a1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	88 87       	std	Y+8, r24	; 0x08
    1a28:	99 87       	std	Y+9, r25	; 0x09
    1a2a:	aa 87       	std	Y+10, r26	; 0x0a
    1a2c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a2e:	68 85       	ldd	r22, Y+8	; 0x08
    1a30:	79 85       	ldd	r23, Y+9	; 0x09
    1a32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <LCD_send_cmnd+0x106>
		__ticks = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9f 83       	std	Y+7, r25	; 0x07
    1a4c:	8e 83       	std	Y+6, r24	; 0x06
    1a4e:	3f c0       	rjmp	.+126    	; 0x1ace <LCD_send_cmnd+0x184>
	else if (__tmp > 65535)
    1a50:	68 85       	ldd	r22, Y+8	; 0x08
    1a52:	79 85       	ldd	r23, Y+9	; 0x09
    1a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	3f ef       	ldi	r19, 0xFF	; 255
    1a5c:	4f e7       	ldi	r20, 0x7F	; 127
    1a5e:	57 e4       	ldi	r21, 0x47	; 71
    1a60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a64:	18 16       	cp	r1, r24
    1a66:	4c f5       	brge	.+82     	; 0x1aba <LCD_send_cmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a68:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9f 83       	std	Y+7, r25	; 0x07
    1a8e:	8e 83       	std	Y+6, r24	; 0x06
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <LCD_send_cmnd+0x166>
    1a92:	88 ec       	ldi	r24, 0xC8	; 200
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9d 83       	std	Y+5, r25	; 0x05
    1a98:	8c 83       	std	Y+4, r24	; 0x04
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_send_cmnd+0x154>
    1aa2:	9d 83       	std	Y+5, r25	; 0x05
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	9f 83       	std	Y+7, r25	; 0x07
    1aae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	69 f7       	brne	.-38     	; 0x1a92 <LCD_send_cmnd+0x148>
    1ab8:	24 c0       	rjmp	.+72     	; 0x1b02 <LCD_send_cmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aba:	68 85       	ldd	r22, Y+8	; 0x08
    1abc:	79 85       	ldd	r23, Y+9	; 0x09
    1abe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ac0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	9f 83       	std	Y+7, r25	; 0x07
    1acc:	8e 83       	std	Y+6, r24	; 0x06
    1ace:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad2:	9b 83       	std	Y+3, r25	; 0x03
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_send_cmnd+0x190>
    1ade:	9b 83       	std	Y+3, r25	; 0x03
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <LCD_send_cmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ae4:	69 89       	ldd	r22, Y+17	; 0x11
    1ae6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aea:	9c 89       	ldd	r25, Y+20	; 0x14
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	88 8b       	std	Y+16, r24	; 0x10
    1af6:	88 89       	ldd	r24, Y+16	; 0x10
    1af8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	8a 95       	dec	r24
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_send_cmnd+0x1b2>
    1b00:	89 83       	std	Y+1, r24	; 0x01
      LCD_PORT_EN, LCD_PIN_EN,
      Pin_high); /*active enable of LCD to make LCD read the cmnd or data*/

  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	67 e0       	ldi	r22, 0x07	; 7
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low);
      /*cancel enable of LCD */ /*cancel enable of LCD */

#endif
}
    1b0c:	69 96       	adiw	r28, 0x19	; 25
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <LCD_write_char>:
void LCD_write_char(uint_8 data) {
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	69 97       	sbiw	r28, 0x19	; 25
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_MODE == LCD_8_BIT_MODE

  DI_set_pin_value(LCD_PORT_RS, LCD_PIN_RS,
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	62 e0       	ldi	r22, 0x02	; 2
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
                   Pin_high); /* RS high vlotage to recive data*/

  DI_set_pin_value(LCD_PORT_Rw, LCD_PIN_RW,
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	65 e0       	ldi	r22, 0x05	; 5
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
                   Pin_low); /* RW low vlotage to write on LCD*/

  DI_set_port_value(LCD_PORT_DATA,
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4c:	0e 94 56 09 	call	0x12ac	; 0x12ac <DI_set_port_value>
                    data); /* wrire cmnd on port that is connected with LCD*/

  DI_set_pin_value(
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	67 e0       	ldi	r22, 0x07	; 7
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e8       	ldi	r26, 0x80	; 128
    1b60:	bf e3       	ldi	r27, 0x3F	; 63
    1b62:	8d 8b       	std	Y+21, r24	; 0x15
    1b64:	9e 8b       	std	Y+22, r25	; 0x16
    1b66:	af 8b       	std	Y+23, r26	; 0x17
    1b68:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b70:	98 8d       	ldd	r25, Y+24	; 0x18
    1b72:	2b ea       	ldi	r18, 0xAB	; 171
    1b74:	3a ea       	ldi	r19, 0xAA	; 170
    1b76:	4a e2       	ldi	r20, 0x2A	; 42
    1b78:	50 e4       	ldi	r21, 0x40	; 64
    1b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	89 8b       	std	Y+17, r24	; 0x11
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	ab 8b       	std	Y+19, r26	; 0x13
    1b88:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b8a:	69 89       	ldd	r22, Y+17	; 0x11
    1b8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b90:	9c 89       	ldd	r25, Y+20	; 0x14
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	1c f4       	brge	.+6      	; 0x1ba8 <LCD_write_char+0x8a>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	88 8b       	std	Y+16, r24	; 0x10
    1ba6:	91 c0       	rjmp	.+290    	; 0x1cca <LCD_write_char+0x1ac>
	else if (__tmp > 255)
    1ba8:	69 89       	ldd	r22, Y+17	; 0x11
    1baa:	7a 89       	ldd	r23, Y+18	; 0x12
    1bac:	8b 89       	ldd	r24, Y+19	; 0x13
    1bae:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	53 e4       	ldi	r21, 0x43	; 67
    1bb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	0c f0       	brlt	.+2      	; 0x1bc2 <LCD_write_char+0xa4>
    1bc0:	7b c0       	rjmp	.+246    	; 0x1cb8 <LCD_write_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a e7       	ldi	r20, 0x7A	; 122
    1bd0:	54 e4       	ldi	r21, 0x44	; 68
    1bd2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	8c 87       	std	Y+12, r24	; 0x0c
    1bdc:	9d 87       	std	Y+13, r25	; 0x0d
    1bde:	ae 87       	std	Y+14, r26	; 0x0e
    1be0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1be4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1be6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a ef       	ldi	r20, 0xFA	; 250
    1bf0:	54 e4       	ldi	r21, 0x44	; 68
    1bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	88 87       	std	Y+8, r24	; 0x08
    1bfc:	99 87       	std	Y+9, r25	; 0x09
    1bfe:	aa 87       	std	Y+10, r26	; 0x0a
    1c00:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c02:	68 85       	ldd	r22, Y+8	; 0x08
    1c04:	79 85       	ldd	r23, Y+9	; 0x09
    1c06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <LCD_write_char+0x106>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9f 83       	std	Y+7, r25	; 0x07
    1c20:	8e 83       	std	Y+6, r24	; 0x06
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <LCD_write_char+0x184>
	else if (__tmp > 65535)
    1c24:	68 85       	ldd	r22, Y+8	; 0x08
    1c26:	79 85       	ldd	r23, Y+9	; 0x09
    1c28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <LCD_write_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9f 83       	std	Y+7, r25	; 0x07
    1c62:	8e 83       	std	Y+6, r24	; 0x06
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <LCD_write_char+0x166>
    1c66:	88 ec       	ldi	r24, 0xC8	; 200
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9d 83       	std	Y+5, r25	; 0x05
    1c6c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	9d 81       	ldd	r25, Y+5	; 0x05
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_write_char+0x154>
    1c76:	9d 83       	std	Y+5, r25	; 0x05
    1c78:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9f 83       	std	Y+7, r25	; 0x07
    1c82:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	8e 81       	ldd	r24, Y+6	; 0x06
    1c86:	9f 81       	ldd	r25, Y+7	; 0x07
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <LCD_write_char+0x148>
    1c8c:	24 c0       	rjmp	.+72     	; 0x1cd6 <LCD_write_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	68 85       	ldd	r22, Y+8	; 0x08
    1c90:	79 85       	ldd	r23, Y+9	; 0x09
    1c92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9f 83       	std	Y+7, r25	; 0x07
    1ca0:	8e 83       	std	Y+6, r24	; 0x06
    1ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca6:	9b 83       	std	Y+3, r25	; 0x03
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_write_char+0x190>
    1cb2:	9b 83       	std	Y+3, r25	; 0x03
    1cb4:	8a 83       	std	Y+2, r24	; 0x02
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <LCD_write_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cb8:	69 89       	ldd	r22, Y+17	; 0x11
    1cba:	7a 89       	ldd	r23, Y+18	; 0x12
    1cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	88 8b       	std	Y+16, r24	; 0x10
    1cca:	88 89       	ldd	r24, Y+16	; 0x10
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	8a 95       	dec	r24
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_write_char+0x1b2>
    1cd4:	89 83       	std	Y+1, r24	; 0x01
      LCD_PORT_EN, LCD_PIN_EN,
      Pin_high); /*active enable of LCD to make LCD read the cmnd or data*/

  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	67 e0       	ldi	r22, 0x07	; 7
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */

#endif
}
    1ce0:	69 96       	adiw	r28, 0x19	; 25
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <LCD_write_string>:

void LCD_write_string(uint_8 *ptr) {
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	61 97       	sbiw	r28, 0x11	; 17
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	99 8b       	std	Y+17, r25	; 0x11
    1d08:	88 8b       	std	Y+16, r24	; 0x10

  uint_8 counter = 0;
    1d0a:	1f 86       	std	Y+15, r1	; 0x0f
  if (ptr != NULL) {
    1d0c:	88 89       	ldd	r24, Y+16	; 0x10
    1d0e:	99 89       	ldd	r25, Y+17	; 0x11
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <LCD_write_string+0x24>
    1d14:	8d c0       	rjmp	.+282    	; 0x1e30 <LCD_write_string+0x13e>
    1d16:	80 c0       	rjmp	.+256    	; 0x1e18 <LCD_write_string+0x126>
    while (ptr[counter] != '\0') {

      LCD_write_char(ptr[counter]);
    1d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	88 89       	ldd	r24, Y+16	; 0x10
    1d20:	99 89       	ldd	r25, Y+17	; 0x11
    1d22:	fc 01       	movw	r30, r24
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	80 81       	ld	r24, Z
    1d2a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>

      counter++;
    1d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a8 ec       	ldi	r26, 0xC8	; 200
    1d3a:	b1 e4       	ldi	r27, 0x41	; 65
    1d3c:	8b 87       	std	Y+11, r24	; 0x0b
    1d3e:	9c 87       	std	Y+12, r25	; 0x0c
    1d40:	ad 87       	std	Y+13, r26	; 0x0d
    1d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a ef       	ldi	r20, 0xFA	; 250
    1d52:	54 e4       	ldi	r21, 0x44	; 68
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8f 83       	std	Y+7, r24	; 0x07
    1d5e:	98 87       	std	Y+8, r25	; 0x08
    1d60:	a9 87       	std	Y+9, r26	; 0x09
    1d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d64:	6f 81       	ldd	r22, Y+7	; 0x07
    1d66:	78 85       	ldd	r23, Y+8	; 0x08
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <LCD_write_string+0x94>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <LCD_write_string+0x112>
	else if (__tmp > 65535)
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <LCD_write_string+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e2       	ldi	r20, 0x20	; 32
    1dac:	51 e4       	ldi	r21, 0x41	; 65
    1dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <LCD_write_string+0xf4>
    1dc8:	88 ec       	ldi	r24, 0xC8	; 200
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_write_string+0xe2>
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <LCD_write_string+0xd6>
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <LCD_write_string+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	6f 81       	ldd	r22, Y+7	; 0x07
    1df2:	78 85       	ldd	r23, Y+8	; 0x08
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_write_string+0x11e>
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01

void LCD_write_string(uint_8 *ptr) {

  uint_8 counter = 0;
  if (ptr != NULL) {
    while (ptr[counter] != '\0') {
    1e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	88 89       	ldd	r24, Y+16	; 0x10
    1e20:	99 89       	ldd	r25, Y+17	; 0x11
    1e22:	fc 01       	movw	r30, r24
    1e24:	e2 0f       	add	r30, r18
    1e26:	f3 1f       	adc	r31, r19
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <LCD_write_string+0x13e>
    1e2e:	74 cf       	rjmp	.-280    	; 0x1d18 <LCD_write_string+0x26>

      counter++;
      _delay_ms(25);
    }
  }
}
    1e30:	61 96       	adiw	r28, 0x11	; 17
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <LCD_move_address_counter_of_DDRAM>:

uint_8 LCD_move_address_counter_of_DDRAM(uint_8 line_num, uint_8 location_num) {
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <LCD_move_address_counter_of_DDRAM+0x6>
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	89 83       	std	Y+1, r24	; 0x01
  if ((line_num == LCD_LINE1 || line_num == LCD_LINE2) &&
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	19 f0       	breq	.+6      	; 0x1e62 <LCD_move_address_counter_of_DDRAM+0x20>
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	99 f4       	brne	.+38     	; 0x1e88 <LCD_move_address_counter_of_DDRAM+0x46>
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 32       	cpi	r24, 0x28	; 40
    1e66:	80 f4       	brcc	.+32     	; 0x1e88 <LCD_move_address_counter_of_DDRAM+0x46>
      (location_num <= 39)) {

    switch (line_num) {
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	91 05       	cpc	r25, r1
    1e72:	29 f4       	brne	.+10     	; 0x1e7e <LCD_move_address_counter_of_DDRAM+0x3c>

    case LCD_LINE1:
      LCD_send_cmnd(0x80 + location_num);
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	80 58       	subi	r24, 0x80	; 128
    1e78:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <LCD_move_address_counter_of_DDRAM+0x48>
      break;

    default:
      LCD_send_cmnd(0xc0 + location_num);
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	80 54       	subi	r24, 0x40	; 64
    1e82:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <LCD_move_address_counter_of_DDRAM+0x48>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    1e88:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_write_special_char>:

uint_8 LCD_write_special_char(uint_8 char_num, uint_8 *pattern, uint_8 line_num,
                              uint_8 loaction) {
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	8c 83       	std	Y+4, r24	; 0x04
    1eae:	7e 83       	std	Y+6, r23	; 0x06
    1eb0:	6d 83       	std	Y+5, r22	; 0x05
    1eb2:	4f 83       	std	Y+7, r20	; 0x07
    1eb4:	28 87       	std	Y+8, r18	; 0x08

  uint_8 Error_state = Return_Ok;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	8b 83       	std	Y+3, r24	; 0x03

  if ((char_num <= 7) && (line_num == 1 || line_num == 2) && (loaction <= 39)) {
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	88 30       	cpi	r24, 0x08	; 8
    1ebe:	08 f0       	brcs	.+2      	; 0x1ec2 <LCD_write_special_char+0x2a>
    1ec0:	c1 c0       	rjmp	.+386    	; 0x2044 <LCD_write_special_char+0x1ac>
    1ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	21 f0       	breq	.+8      	; 0x1ed0 <LCD_write_special_char+0x38>
    1ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <LCD_write_special_char+0x38>
    1ece:	ba c0       	rjmp	.+372    	; 0x2044 <LCD_write_special_char+0x1ac>
    1ed0:	88 85       	ldd	r24, Y+8	; 0x08
    1ed2:	88 32       	cpi	r24, 0x28	; 40
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <LCD_write_special_char+0x40>
    1ed6:	b6 c0       	rjmp	.+364    	; 0x2044 <LCD_write_special_char+0x1ac>
    switch (char_num) {
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3c 87       	std	Y+12, r19	; 0x0c
    1ee0:	2b 87       	std	Y+11, r18	; 0x0b
    1ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee6:	83 30       	cpi	r24, 0x03	; 3
    1ee8:	91 05       	cpc	r25, r1
    1eea:	81 f1       	breq	.+96     	; 0x1f4c <LCD_write_special_char+0xb4>
    1eec:	2b 85       	ldd	r18, Y+11	; 0x0b
    1eee:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ef0:	24 30       	cpi	r18, 0x04	; 4
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	7c f4       	brge	.+30     	; 0x1f14 <LCD_write_special_char+0x7c>
    1ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ef8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	91 05       	cpc	r25, r1
    1efe:	f1 f0       	breq	.+60     	; 0x1f3c <LCD_write_special_char+0xa4>
    1f00:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f02:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	ec f4       	brge	.+58     	; 0x1f44 <LCD_write_special_char+0xac>
    1f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	89 f0       	breq	.+34     	; 0x1f34 <LCD_write_special_char+0x9c>
    1f12:	2c c0       	rjmp	.+88     	; 0x1f6c <LCD_write_special_char+0xd4>
    1f14:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f16:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f18:	25 30       	cpi	r18, 0x05	; 5
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	f9 f0       	breq	.+62     	; 0x1f5c <LCD_write_special_char+0xc4>
    1f1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f20:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f22:	85 30       	cpi	r24, 0x05	; 5
    1f24:	91 05       	cpc	r25, r1
    1f26:	b4 f0       	brlt	.+44     	; 0x1f54 <LCD_write_special_char+0xbc>
    1f28:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f2c:	26 30       	cpi	r18, 0x06	; 6
    1f2e:	31 05       	cpc	r19, r1
    1f30:	c9 f0       	breq	.+50     	; 0x1f64 <LCD_write_special_char+0xcc>
    1f32:	1c c0       	rjmp	.+56     	; 0x1f6c <LCD_write_special_char+0xd4>

      /* set address counter in CGRAM*/

    case char0:
      LCD_send_cmnd(0b01000000);
    1f34:	80 e4       	ldi	r24, 0x40	; 64
    1f36:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f3a:	1b c0       	rjmp	.+54     	; 0x1f72 <LCD_write_special_char+0xda>
      break;

    case char1:
      LCD_send_cmnd(0b01001000);
    1f3c:	88 e4       	ldi	r24, 0x48	; 72
    1f3e:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f42:	17 c0       	rjmp	.+46     	; 0x1f72 <LCD_write_special_char+0xda>
      break;

    case char2:
      LCD_send_cmnd(0b01010000);
    1f44:	80 e5       	ldi	r24, 0x50	; 80
    1f46:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f4a:	13 c0       	rjmp	.+38     	; 0x1f72 <LCD_write_special_char+0xda>
      break;
    case char3:
      LCD_send_cmnd(0b01011000);
    1f4c:	88 e5       	ldi	r24, 0x58	; 88
    1f4e:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <LCD_write_special_char+0xda>
      break;

    case char4:
      LCD_send_cmnd(0b01100000);
    1f54:	80 e6       	ldi	r24, 0x60	; 96
    1f56:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f5a:	0b c0       	rjmp	.+22     	; 0x1f72 <LCD_write_special_char+0xda>
      break;
    case char5:
      LCD_send_cmnd(0b01101000);
    1f5c:	88 e6       	ldi	r24, 0x68	; 104
    1f5e:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <LCD_write_special_char+0xda>
      break;

    case char6:
      LCD_send_cmnd(0b01110000);
    1f64:	80 e7       	ldi	r24, 0x70	; 112
    1f66:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <LCD_write_special_char+0xda>
      break;

    default:
      LCD_send_cmnd(0b01111000);
    1f6c:	88 e7       	ldi	r24, 0x78	; 120
    1f6e:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_send_cmnd>
      break;
    }

    /*wtite special char in CGRAM*/

    for (int i = 0; i < 8; i++) {
    1f72:	1a 82       	std	Y+2, r1	; 0x02
    1f74:	19 82       	std	Y+1, r1	; 0x01
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <LCD_write_special_char+0xfe>
      LCD_write_char(pattern[i]);
    1f78:	29 81       	ldd	r18, Y+1	; 0x01
    1f7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	80 81       	ld	r24, Z
    1f88:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
      break;
    }

    /*wtite special char in CGRAM*/

    for (int i = 0; i < 8; i++) {
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	88 30       	cpi	r24, 0x08	; 8
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	64 f3       	brlt	.-40     	; 0x1f78 <LCD_write_special_char+0xe0>
      LCD_write_char(pattern[i]);
    }
    /*return address counter to DDRAM*/
    LCD_move_address_counter_of_DDRAM(line_num, loaction);
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	68 85       	ldd	r22, Y+8	; 0x08
    1fa4:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <LCD_move_address_counter_of_DDRAM>

    switch (char_num) {
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	3a 87       	std	Y+10, r19	; 0x0a
    1fb0:	29 87       	std	Y+9, r18	; 0x09
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	91 05       	cpc	r25, r1
    1fba:	81 f1       	breq	.+96     	; 0x201c <LCD_write_special_char+0x184>
    1fbc:	29 85       	ldd	r18, Y+9	; 0x09
    1fbe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fc0:	24 30       	cpi	r18, 0x04	; 4
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	7c f4       	brge	.+30     	; 0x1fe4 <LCD_write_special_char+0x14c>
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	f1 f0       	breq	.+60     	; 0x200c <LCD_write_special_char+0x174>
    1fd0:	29 85       	ldd	r18, Y+9	; 0x09
    1fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	ec f4       	brge	.+58     	; 0x2014 <LCD_write_special_char+0x17c>
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	89 f0       	breq	.+34     	; 0x2004 <LCD_write_special_char+0x16c>
    1fe2:	2c c0       	rjmp	.+88     	; 0x203c <LCD_write_special_char+0x1a4>
    1fe4:	29 85       	ldd	r18, Y+9	; 0x09
    1fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe8:	25 30       	cpi	r18, 0x05	; 5
    1fea:	31 05       	cpc	r19, r1
    1fec:	f9 f0       	breq	.+62     	; 0x202c <LCD_write_special_char+0x194>
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	85 30       	cpi	r24, 0x05	; 5
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	b4 f0       	brlt	.+44     	; 0x2024 <LCD_write_special_char+0x18c>
    1ff8:	29 85       	ldd	r18, Y+9	; 0x09
    1ffa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ffc:	26 30       	cpi	r18, 0x06	; 6
    1ffe:	31 05       	cpc	r19, r1
    2000:	c9 f0       	breq	.+50     	; 0x2034 <LCD_write_special_char+0x19c>
    2002:	1c c0       	rjmp	.+56     	; 0x203c <LCD_write_special_char+0x1a4>

      /* show the required char in CGRAM */

    case char0:
      LCD_write_char(0);
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    200a:	1d c0       	rjmp	.+58     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    case char1:
      LCD_write_char(1);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    2012:	19 c0       	rjmp	.+50     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    case char2:
      LCD_write_char(2);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    201a:	15 c0       	rjmp	.+42     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    case char3:
      LCD_write_char(3);
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    2022:	11 c0       	rjmp	.+34     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    case char4:
      LCD_write_char(4);
    2024:	84 e0       	ldi	r24, 0x04	; 4
    2026:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    case char5:
      LCD_write_char(5);
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    case char6:
      LCD_write_char(6);
    2034:	86 e0       	ldi	r24, 0x06	; 6
    2036:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <LCD_write_special_char+0x1ae>
      break;

    default:
      LCD_write_char(7);
    203c:	87 e0       	ldi	r24, 0x07	; 7
    203e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <LCD_write_char>
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <LCD_write_special_char+0x1ae>

  }

  else {

    Error_state = Return_NOT_Ok;
    2044:	1b 82       	std	Y+3, r1	; 0x03
  }

  return Error_state;
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2048:	2c 96       	adiw	r28, 0x0c	; 12
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <KeyPad_Return_key>:
uint_8 Keypad_shape[4][4] = KPD_FRAM; 

/***************************************************************************************************/
/***************************************************************************************************/

uint_8 KeyPad_Return_key(uint_8 *returned_key) {
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	65 97       	sbiw	r28, 0x15	; 21
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	9d 8b       	std	Y+21, r25	; 0x15
    2070:	8c 8b       	std	Y+20, r24	; 0x14

  uint_8 flag = 0;
    2072:	1a 8a       	std	Y+18, r1	; 0x12

  uint_8 Error_state = Return_Ok;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	89 8b       	std	Y+17, r24	; 0x11

  uint_8 Returned_pin_value = 0;
    2078:	1b 8a       	std	Y+19, r1	; 0x13

  //DI_set_port_value(PORTA, 0xff); /******** will set all pins from DIO configer file   *******/

  if (returned_key != NULL) {
    207a:	8c 89       	ldd	r24, Y+20	; 0x14
    207c:	9d 89       	ldd	r25, Y+21	; 0x15
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	09 f4       	brne	.+2      	; 0x2084 <KeyPad_Return_key+0x2a>
    2082:	ec c0       	rjmp	.+472    	; 0x225c <KeyPad_Return_key+0x202>

    for (uint_8 row_num = 0; row_num < 4; row_num++) {
    2084:	18 8a       	std	Y+16, r1	; 0x10
    2086:	e5 c0       	rjmp	.+458    	; 0x2252 <KeyPad_Return_key+0x1f8>

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_low);
    2088:	88 89       	ldd	r24, Y+16	; 0x10
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	fc 01       	movw	r30, r24
    2090:	e8 59       	subi	r30, 0x98	; 152
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	90 81       	ld	r25, Z
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	69 2f       	mov	r22, r25
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
     
      for (uint_8 colum_num = 0; colum_num < 4; colum_num++) {
    20a0:	1f 86       	std	Y+15, r1	; 0x0f
    20a2:	c1 c0       	rjmp	.+386    	; 0x2226 <KeyPad_Return_key+0x1cc>

        DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value);
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	fc 01       	movw	r30, r24
    20ac:	e4 59       	subi	r30, 0x94	; 148
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	90 81       	ld	r25, Z
    20b2:	9e 01       	movw	r18, r28
    20b4:	2d 5e       	subi	r18, 0xED	; 237
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	69 2f       	mov	r22, r25
    20bc:	a9 01       	movw	r20, r18
    20be:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_get_pin_value>
                          
        if (Returned_pin_value == Pin_low) {
    20c2:	8b 89       	ldd	r24, Y+19	; 0x13
    20c4:	88 23       	and	r24, r24
    20c6:	09 f0       	breq	.+2      	; 0x20ca <KeyPad_Return_key+0x70>
    20c8:	ab c0       	rjmp	.+342    	; 0x2220 <KeyPad_Return_key+0x1c6>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 ea       	ldi	r26, 0xA0	; 160
    20d0:	b1 e4       	ldi	r27, 0x41	; 65
    20d2:	8b 87       	std	Y+11, r24	; 0x0b
    20d4:	9c 87       	std	Y+12, r25	; 0x0c
    20d6:	ad 87       	std	Y+13, r26	; 0x0d
    20d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6b 85       	ldd	r22, Y+11	; 0x0b
    20dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a ef       	ldi	r20, 0xFA	; 250
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8f 83       	std	Y+7, r24	; 0x07
    20f4:	98 87       	std	Y+8, r25	; 0x08
    20f6:	a9 87       	std	Y+9, r26	; 0x09
    20f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fa:	6f 81       	ldd	r22, Y+7	; 0x07
    20fc:	78 85       	ldd	r23, Y+8	; 0x08
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	9a 85       	ldd	r25, Y+10	; 0x0a
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <KeyPad_Return_key+0xc2>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	3f c0       	rjmp	.+126    	; 0x219a <KeyPad_Return_key+0x140>
	else if (__tmp > 65535)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <KeyPad_Return_key+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6b 85       	ldd	r22, Y+11	; 0x0b
    2136:	7c 85       	ldd	r23, Y+12	; 0x0c
    2138:	8d 85       	ldd	r24, Y+13	; 0x0d
    213a:	9e 85       	ldd	r25, Y+14	; 0x0e
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	0f c0       	rjmp	.+30     	; 0x217c <KeyPad_Return_key+0x122>
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <KeyPad_Return_key+0x110>
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <KeyPad_Return_key+0x104>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <KeyPad_Return_key+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <KeyPad_Return_key+0x14c>
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
           1- read the pins again to update its value
           2-if its value still low that mean you still press on the key
           so we using while loop to update the value of the pin until iys value chang to high
           */

         /*1-*/ DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value); 
    21ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	e4 59       	subi	r30, 0x94	; 148
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	90 81       	ld	r25, Z
    21bc:	9e 01       	movw	r18, r28
    21be:	2d 5e       	subi	r18, 0xED	; 237
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	69 2f       	mov	r22, r25
    21c6:	a9 01       	movw	r20, r18
    21c8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_get_pin_value>
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <KeyPad_Return_key+0x192>
                            

         /*2-*/ while (Returned_pin_value == Pin_low) /* comment*/
          {

            DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num], &Returned_pin_value); /* comment*/
    21ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	fc 01       	movw	r30, r24
    21d6:	e4 59       	subi	r30, 0x94	; 148
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	90 81       	ld	r25, Z
    21dc:	9e 01       	movw	r18, r28
    21de:	2d 5e       	subi	r18, 0xED	; 237
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	69 2f       	mov	r22, r25
    21e6:	a9 01       	movw	r20, r18
    21e8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_get_pin_value>
           */

         /*1-*/ DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value); 
                            

         /*2-*/ while (Returned_pin_value == Pin_low) /* comment*/
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	88 23       	and	r24, r24
    21f0:	71 f3       	breq	.-36     	; 0x21ce <KeyPad_Return_key+0x174>

            DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num], &Returned_pin_value); /* comment*/
                             
          }

          *returned_key = Keypad_shape[row_num][colum_num];
    21f2:	88 89       	ldd	r24, Y+16	; 0x10
    21f4:	48 2f       	mov	r20, r24
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	ca 01       	movw	r24, r20
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	82 0f       	add	r24, r18
    220a:	93 1f       	adc	r25, r19
    220c:	fc 01       	movw	r30, r24
    220e:	e0 59       	subi	r30, 0x90	; 144
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	ec 89       	ldd	r30, Y+20	; 0x14
    2216:	fd 89       	ldd	r31, Y+21	; 0x15
    2218:	80 83       	st	Z, r24

          flag = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	8a 8b       	std	Y+18, r24	; 0x12
    221e:	07 c0       	rjmp	.+14     	; 0x222e <KeyPad_Return_key+0x1d4>

    for (uint_8 row_num = 0; row_num < 4; row_num++) {

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_low);
     
      for (uint_8 colum_num = 0; colum_num < 4; colum_num++) {
    2220:	8f 85       	ldd	r24, Y+15	; 0x0f
    2222:	8f 5f       	subi	r24, 0xFF	; 255
    2224:	8f 87       	std	Y+15, r24	; 0x0f
    2226:	8f 85       	ldd	r24, Y+15	; 0x0f
    2228:	84 30       	cpi	r24, 0x04	; 4
    222a:	08 f4       	brcc	.+2      	; 0x222e <KeyPad_Return_key+0x1d4>
    222c:	3b cf       	rjmp	.-394    	; 0x20a4 <KeyPad_Return_key+0x4a>

          break;
        }
      }

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_high);
    222e:	88 89       	ldd	r24, Y+16	; 0x10
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	fc 01       	movw	r30, r24
    2236:	e8 59       	subi	r30, 0x98	; 152
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	90 81       	ld	r25, Z
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	69 2f       	mov	r22, r25
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>

      if (flag == 1) {
    2246:	8a 89       	ldd	r24, Y+18	; 0x12
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	49 f0       	breq	.+18     	; 0x225e <KeyPad_Return_key+0x204>

  //DI_set_port_value(PORTA, 0xff); /******** will set all pins from DIO configer file   *******/

  if (returned_key != NULL) {

    for (uint_8 row_num = 0; row_num < 4; row_num++) {
    224c:	88 89       	ldd	r24, Y+16	; 0x10
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	88 8b       	std	Y+16, r24	; 0x10
    2252:	88 89       	ldd	r24, Y+16	; 0x10
    2254:	84 30       	cpi	r24, 0x04	; 4
    2256:	08 f4       	brcc	.+2      	; 0x225a <KeyPad_Return_key+0x200>
    2258:	17 cf       	rjmp	.-466    	; 0x2088 <KeyPad_Return_key+0x2e>
    225a:	01 c0       	rjmp	.+2      	; 0x225e <KeyPad_Return_key+0x204>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    225c:	19 8a       	std	Y+17, r1	; 0x11
  }

  return Error_state;
    225e:	89 89       	ldd	r24, Y+17	; 0x11
    2260:	65 96       	adiw	r28, 0x15	; 21
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <MOVE_STEPPER_MOTOR>:



#include "stepper_interface.h"

uint_8 MOVE_STEPPER_MOTOR(sint_8 direction , uint_16 angle){
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	c5 59       	subi	r28, 0x95	; 149
    2280:	d0 40       	sbci	r29, 0x00	; 0
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	fe 01       	movw	r30, r28
    228e:	ed 56       	subi	r30, 0x6D	; 109
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 83       	st	Z, r24
    2294:	fe 01       	movw	r30, r28
    2296:	ec 56       	subi	r30, 0x6C	; 108
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	71 83       	std	Z+1, r23	; 0x01
    229c:	60 83       	st	Z, r22

	uint_8 error_state = Return_Ok;
    229e:	fe 01       	movw	r30, r28
    22a0:	ee 56       	subi	r30, 0x6E	; 110
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	80 83       	st	Z, r24
	uint_8 counter = ((angle*2048UL)/360)/4;
    22a8:	fe 01       	movw	r30, r28
    22aa:	ec 56       	subi	r30, 0x6C	; 108
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	cc 01       	movw	r24, r24
    22b4:	a0 e0       	ldi	r26, 0x00	; 0
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	07 2e       	mov	r0, r23
    22ba:	7b e0       	ldi	r23, 0x0B	; 11
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	aa 1f       	adc	r26, r26
    22c2:	bb 1f       	adc	r27, r27
    22c4:	7a 95       	dec	r23
    22c6:	d1 f7       	brne	.-12     	; 0x22bc <MOVE_STEPPER_MOTOR+0x4a>
    22c8:	70 2d       	mov	r23, r0
    22ca:	20 ea       	ldi	r18, 0xA0	; 160
    22cc:	35 e0       	ldi	r19, 0x05	; 5
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodsi4>
    22da:	da 01       	movw	r26, r20
    22dc:	c9 01       	movw	r24, r18
    22de:	fe 01       	movw	r30, r28
    22e0:	ef 56       	subi	r30, 0x6F	; 111
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 83       	st	Z, r24

	if(  (angle>0)  &&   (angle<=360)  ){
    22e6:	fe 01       	movw	r30, r28
    22e8:	ec 56       	subi	r30, 0x6C	; 108
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <MOVE_STEPPER_MOTOR+0x84>
    22f4:	f2 c6       	rjmp	.+3556   	; 0x30da <MOVE_STEPPER_MOTOR+0xe68>
    22f6:	fe 01       	movw	r30, r28
    22f8:	ec 56       	subi	r30, 0x6C	; 108
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	89 36       	cpi	r24, 0x69	; 105
    2304:	92 07       	cpc	r25, r18
    2306:	08 f0       	brcs	.+2      	; 0x230a <MOVE_STEPPER_MOTOR+0x98>
    2308:	e8 c6       	rjmp	.+3536   	; 0x30da <MOVE_STEPPER_MOTOR+0xe68>

		switch (direction) {
    230a:	fe 01       	movw	r30, r28
    230c:	ed 56       	subi	r30, 0x6D	; 109
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	99 27       	eor	r25, r25
    2314:	87 fd       	sbrc	r24, 7
    2316:	90 95       	com	r25
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	91 05       	cpc	r25, r1
    231c:	09 f0       	breq	.+2      	; 0x2320 <MOVE_STEPPER_MOTOR+0xae>
    231e:	08 c4       	rjmp	.+2064   	; 0x2b30 <MOVE_STEPPER_MOTOR+0x8be>
				/*#define STEPPER_MOTOR_FIRST_PIN			PIN0
#define STEPPER_MOTOR_SECOND_PIN		PIN1
#define STEPPER_MOTOR_THIRD_PIN			PIN2
#define STEPPER_MOTOR_FOURTH_PIN*/

				DI_set_pin_value(STEPPER_MOTOR_PORT, STEPPER_MOTOR_FIRST_PIN , Pin_low);
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	63 e0       	ldi	r22, 0x03	; 3
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2348:	fe 01       	movw	r30, r28
    234a:	e7 57       	subi	r30, 0x77	; 119
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e2       	ldi	r26, 0x20	; 32
    2354:	b1 e4       	ldi	r27, 0x41	; 65
    2356:	80 83       	st	Z, r24
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	a2 83       	std	Z+2, r26	; 0x02
    235c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	8e 01       	movw	r16, r28
    2360:	0b 57       	subi	r16, 0x7B	; 123
    2362:	1f 4f       	sbci	r17, 0xFF	; 255
    2364:	fe 01       	movw	r30, r28
    2366:	e7 57       	subi	r30, 0x77	; 119
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	f8 01       	movw	r30, r16
    2384:	80 83       	st	Z, r24
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	a2 83       	std	Z+2, r26	; 0x02
    238a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    238c:	fe 01       	movw	r30, r28
    238e:	eb 57       	subi	r30, 0x7B	; 123
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	60 81       	ld	r22, Z
    2394:	71 81       	ldd	r23, Z+1	; 0x01
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	44 f4       	brge	.+16     	; 0x23ba <MOVE_STEPPER_MOTOR+0x148>
		__ticks = 1;
    23aa:	fe 01       	movw	r30, r28
    23ac:	ed 57       	subi	r30, 0x7D	; 125
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	80 83       	st	Z, r24
    23b8:	64 c0       	rjmp	.+200    	; 0x2482 <MOVE_STEPPER_MOTOR+0x210>
	else if (__tmp > 65535)
    23ba:	fe 01       	movw	r30, r28
    23bc:	eb 57       	subi	r30, 0x7B	; 123
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	0c f0       	brlt	.+2      	; 0x23da <MOVE_STEPPER_MOTOR+0x168>
    23d8:	43 c0       	rjmp	.+134    	; 0x2460 <MOVE_STEPPER_MOTOR+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	fe 01       	movw	r30, r28
    23dc:	e7 57       	subi	r30, 0x77	; 119
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8e 01       	movw	r16, r28
    23fa:	0d 57       	subi	r16, 0x7D	; 125
    23fc:	1f 4f       	sbci	r17, 0xFF	; 255
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	f8 01       	movw	r30, r16
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	1f c0       	rjmp	.+62     	; 0x2450 <MOVE_STEPPER_MOTOR+0x1de>
    2412:	fe 01       	movw	r30, r28
    2414:	ef 57       	subi	r30, 0x7F	; 127
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	fe 01       	movw	r30, r28
    2422:	ef 57       	subi	r30, 0x7F	; 127
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <MOVE_STEPPER_MOTOR+0x1b8>
    242e:	fe 01       	movw	r30, r28
    2430:	ef 57       	subi	r30, 0x7F	; 127
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2438:	de 01       	movw	r26, r28
    243a:	ad 57       	subi	r26, 0x7D	; 125
    243c:	bf 4f       	sbci	r27, 0xFF	; 255
    243e:	fe 01       	movw	r30, r28
    2440:	ed 57       	subi	r30, 0x7D	; 125
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	11 96       	adiw	r26, 0x01	; 1
    244c:	9c 93       	st	X, r25
    244e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	fe 01       	movw	r30, r28
    2452:	ed 57       	subi	r30, 0x7D	; 125
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	d1 f6       	brne	.-76     	; 0x2412 <MOVE_STEPPER_MOTOR+0x1a0>
    245e:	28 c0       	rjmp	.+80     	; 0x24b0 <MOVE_STEPPER_MOTOR+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	8e 01       	movw	r16, r28
    2462:	0d 57       	subi	r16, 0x7D	; 125
    2464:	1f 4f       	sbci	r17, 0xFF	; 255
    2466:	fe 01       	movw	r30, r28
    2468:	eb 57       	subi	r30, 0x7B	; 123
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	60 81       	ld	r22, Z
    246e:	71 81       	ldd	r23, Z+1	; 0x01
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	f8 01       	movw	r30, r16
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
    2482:	de 01       	movw	r26, r28
    2484:	a1 58       	subi	r26, 0x81	; 129
    2486:	bf 4f       	sbci	r27, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	ed 57       	subi	r30, 0x7D	; 125
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	9c 93       	st	X, r25
    2496:	8e 93       	st	-X, r24
    2498:	fe 01       	movw	r30, r28
    249a:	e1 58       	subi	r30, 0x81	; 129
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <MOVE_STEPPER_MOTOR+0x230>
    24a6:	fe 01       	movw	r30, r28
    24a8:	e1 58       	subi	r30, 0x81	; 129
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
				_delay_ms(10);


			for(int i = 1 ; i <=counter ; i++){
    24b0:	fe 01       	movw	r30, r28
    24b2:	e1 57       	subi	r30, 0x71	; 113
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	28 c3       	rjmp	.+1616   	; 0x2b10 <MOVE_STEPPER_MOTOR+0x89e>


						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	61 e0       	ldi	r22, 0x01	; 1
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	63 e0       	ldi	r22, 0x03	; 3
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    24e8:	fe 01       	movw	r30, r28
    24ea:	e5 58       	subi	r30, 0x85	; 133
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	a0 e2       	ldi	r26, 0x20	; 32
    24f4:	b1 e4       	ldi	r27, 0x41	; 65
    24f6:	80 83       	st	Z, r24
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	a2 83       	std	Z+2, r26	; 0x02
    24fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fe:	8e 01       	movw	r16, r28
    2500:	09 58       	subi	r16, 0x89	; 137
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	fe 01       	movw	r30, r28
    2506:	e5 58       	subi	r30, 0x85	; 133
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	f8 01       	movw	r30, r16
    2524:	80 83       	st	Z, r24
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	a2 83       	std	Z+2, r26	; 0x02
    252a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    252c:	fe 01       	movw	r30, r28
    252e:	e9 58       	subi	r30, 0x89	; 137
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	44 f4       	brge	.+16     	; 0x255a <MOVE_STEPPER_MOTOR+0x2e8>
		__ticks = 1;
    254a:	fe 01       	movw	r30, r28
    254c:	eb 58       	subi	r30, 0x8B	; 139
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	64 c0       	rjmp	.+200    	; 0x2622 <MOVE_STEPPER_MOTOR+0x3b0>
	else if (__tmp > 65535)
    255a:	fe 01       	movw	r30, r28
    255c:	e9 58       	subi	r30, 0x89	; 137
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	0c f0       	brlt	.+2      	; 0x257a <MOVE_STEPPER_MOTOR+0x308>
    2578:	43 c0       	rjmp	.+134    	; 0x2600 <MOVE_STEPPER_MOTOR+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	fe 01       	movw	r30, r28
    257c:	e5 58       	subi	r30, 0x85	; 133
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	8e 01       	movw	r16, r28
    259a:	0b 58       	subi	r16, 0x8B	; 139
    259c:	1f 4f       	sbci	r17, 0xFF	; 255
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	1f c0       	rjmp	.+62     	; 0x25f0 <MOVE_STEPPER_MOTOR+0x37e>
    25b2:	fe 01       	movw	r30, r28
    25b4:	ed 58       	subi	r30, 0x8D	; 141
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 58       	subi	r30, 0x8D	; 141
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <MOVE_STEPPER_MOTOR+0x358>
    25ce:	fe 01       	movw	r30, r28
    25d0:	ed 58       	subi	r30, 0x8D	; 141
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	de 01       	movw	r26, r28
    25da:	ab 58       	subi	r26, 0x8B	; 139
    25dc:	bf 4f       	sbci	r27, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	eb 58       	subi	r30, 0x8B	; 139
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	11 96       	adiw	r26, 0x01	; 1
    25ec:	9c 93       	st	X, r25
    25ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f0:	fe 01       	movw	r30, r28
    25f2:	eb 58       	subi	r30, 0x8B	; 139
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	d1 f6       	brne	.-76     	; 0x25b2 <MOVE_STEPPER_MOTOR+0x340>
    25fe:	27 c0       	rjmp	.+78     	; 0x264e <MOVE_STEPPER_MOTOR+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2600:	8e 01       	movw	r16, r28
    2602:	0b 58       	subi	r16, 0x8B	; 139
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e9 58       	subi	r30, 0x89	; 137
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	f8 01       	movw	r30, r16
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24
    2622:	de 01       	movw	r26, r28
    2624:	af 58       	subi	r26, 0x8F	; 143
    2626:	bf 4f       	sbci	r27, 0xFF	; 255
    2628:	fe 01       	movw	r30, r28
    262a:	eb 58       	subi	r30, 0x8B	; 139
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	8d 93       	st	X+, r24
    2634:	9c 93       	st	X, r25
    2636:	fe 01       	movw	r30, r28
    2638:	ef 58       	subi	r30, 0x8F	; 143
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <MOVE_STEPPER_MOTOR+0x3ce>
    2644:	fe 01       	movw	r30, r28
    2646:	ef 58       	subi	r30, 0x8F	; 143
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
						_delay_ms(10);

						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_low);
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2676:	fe 01       	movw	r30, r28
    2678:	e3 59       	subi	r30, 0x93	; 147
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a0 e2       	ldi	r26, 0x20	; 32
    2682:	b1 e4       	ldi	r27, 0x41	; 65
    2684:	80 83       	st	Z, r24
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	a2 83       	std	Z+2, r26	; 0x02
    268a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268c:	8e 01       	movw	r16, r28
    268e:	07 59       	subi	r16, 0x97	; 151
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	fe 01       	movw	r30, r28
    2694:	e3 59       	subi	r30, 0x93	; 147
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a ef       	ldi	r20, 0xFA	; 250
    26a6:	54 e4       	ldi	r21, 0x44	; 68
    26a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	f8 01       	movw	r30, r16
    26b2:	80 83       	st	Z, r24
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	a2 83       	std	Z+2, r26	; 0x02
    26b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ba:	fe 01       	movw	r30, r28
    26bc:	e7 59       	subi	r30, 0x97	; 151
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	93 81       	ldd	r25, Z+3	; 0x03
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	44 f4       	brge	.+16     	; 0x26e8 <MOVE_STEPPER_MOTOR+0x476>
		__ticks = 1;
    26d8:	fe 01       	movw	r30, r28
    26da:	e9 59       	subi	r30, 0x99	; 153
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
    26e6:	64 c0       	rjmp	.+200    	; 0x27b0 <MOVE_STEPPER_MOTOR+0x53e>
	else if (__tmp > 65535)
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 59       	subi	r30, 0x97	; 151
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	3f ef       	ldi	r19, 0xFF	; 255
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	57 e4       	ldi	r21, 0x47	; 71
    26fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2702:	18 16       	cp	r1, r24
    2704:	0c f0       	brlt	.+2      	; 0x2708 <MOVE_STEPPER_MOTOR+0x496>
    2706:	43 c0       	rjmp	.+134    	; 0x278e <MOVE_STEPPER_MOTOR+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	fe 01       	movw	r30, r28
    270a:	e3 59       	subi	r30, 0x93	; 147
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e2       	ldi	r20, 0x20	; 32
    271c:	51 e4       	ldi	r21, 0x41	; 65
    271e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8e 01       	movw	r16, r28
    2728:	09 59       	subi	r16, 0x99	; 153
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	f8 01       	movw	r30, r16
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
    273e:	1f c0       	rjmp	.+62     	; 0x277e <MOVE_STEPPER_MOTOR+0x50c>
    2740:	fe 01       	movw	r30, r28
    2742:	eb 59       	subi	r30, 0x9B	; 155
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	fe 01       	movw	r30, r28
    2750:	eb 59       	subi	r30, 0x9B	; 155
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <MOVE_STEPPER_MOTOR+0x4e6>
    275c:	fe 01       	movw	r30, r28
    275e:	eb 59       	subi	r30, 0x9B	; 155
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2766:	de 01       	movw	r26, r28
    2768:	a9 59       	subi	r26, 0x99	; 153
    276a:	bf 4f       	sbci	r27, 0xFF	; 255
    276c:	fe 01       	movw	r30, r28
    276e:	e9 59       	subi	r30, 0x99	; 153
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	11 96       	adiw	r26, 0x01	; 1
    277a:	9c 93       	st	X, r25
    277c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277e:	fe 01       	movw	r30, r28
    2780:	e9 59       	subi	r30, 0x99	; 153
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	d1 f6       	brne	.-76     	; 0x2740 <MOVE_STEPPER_MOTOR+0x4ce>
    278c:	27 c0       	rjmp	.+78     	; 0x27dc <MOVE_STEPPER_MOTOR+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	8e 01       	movw	r16, r28
    2790:	09 59       	subi	r16, 0x99	; 153
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	fe 01       	movw	r30, r28
    2796:	e7 59       	subi	r30, 0x97	; 151
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	f8 01       	movw	r30, r16
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	80 83       	st	Z, r24
    27b0:	de 01       	movw	r26, r28
    27b2:	ad 59       	subi	r26, 0x9D	; 157
    27b4:	bf 4f       	sbci	r27, 0xFF	; 255
    27b6:	fe 01       	movw	r30, r28
    27b8:	e9 59       	subi	r30, 0x99	; 153
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	8d 93       	st	X+, r24
    27c2:	9c 93       	st	X, r25
    27c4:	fe 01       	movw	r30, r28
    27c6:	ed 59       	subi	r30, 0x9D	; 157
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <MOVE_STEPPER_MOTOR+0x55c>
    27d2:	fe 01       	movw	r30, r28
    27d4:	ed 59       	subi	r30, 0x9D	; 157
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
						_delay_ms(10);

						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_low);
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	62 e0       	ldi	r22, 0x02	; 2
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	63 e0       	ldi	r22, 0x03	; 3
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2804:	fe 01       	movw	r30, r28
    2806:	e1 5a       	subi	r30, 0xA1	; 161
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a0 e2       	ldi	r26, 0x20	; 32
    2810:	b1 e4       	ldi	r27, 0x41	; 65
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281a:	8e 01       	movw	r16, r28
    281c:	05 5a       	subi	r16, 0xA5	; 165
    281e:	1f 4f       	sbci	r17, 0xFF	; 255
    2820:	fe 01       	movw	r30, r28
    2822:	e1 5a       	subi	r30, 0xA1	; 161
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a ef       	ldi	r20, 0xFA	; 250
    2834:	54 e4       	ldi	r21, 0x44	; 68
    2836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	f8 01       	movw	r30, r16
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2848:	fe 01       	movw	r30, r28
    284a:	e5 5a       	subi	r30, 0xA5	; 165
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	44 f4       	brge	.+16     	; 0x2876 <MOVE_STEPPER_MOTOR+0x604>
		__ticks = 1;
    2866:	fe 01       	movw	r30, r28
    2868:	e7 5a       	subi	r30, 0xA7	; 167
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	80 83       	st	Z, r24
    2874:	64 c0       	rjmp	.+200    	; 0x293e <MOVE_STEPPER_MOTOR+0x6cc>
	else if (__tmp > 65535)
    2876:	fe 01       	movw	r30, r28
    2878:	e5 5a       	subi	r30, 0xA5	; 165
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	0c f0       	brlt	.+2      	; 0x2896 <MOVE_STEPPER_MOTOR+0x624>
    2894:	43 c0       	rjmp	.+134    	; 0x291c <MOVE_STEPPER_MOTOR+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	fe 01       	movw	r30, r28
    2898:	e1 5a       	subi	r30, 0xA1	; 161
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8e 01       	movw	r16, r28
    28b6:	07 5a       	subi	r16, 0xA7	; 167
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	f8 01       	movw	r30, r16
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
    28cc:	1f c0       	rjmp	.+62     	; 0x290c <MOVE_STEPPER_MOTOR+0x69a>
    28ce:	fe 01       	movw	r30, r28
    28d0:	e9 5a       	subi	r30, 0xA9	; 169
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	88 ec       	ldi	r24, 0xC8	; 200
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 5a       	subi	r30, 0xA9	; 169
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <MOVE_STEPPER_MOTOR+0x674>
    28ea:	fe 01       	movw	r30, r28
    28ec:	e9 5a       	subi	r30, 0xA9	; 169
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	de 01       	movw	r26, r28
    28f6:	a7 5a       	subi	r26, 0xA7	; 167
    28f8:	bf 4f       	sbci	r27, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	e7 5a       	subi	r30, 0xA7	; 167
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	9c 93       	st	X, r25
    290a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	fe 01       	movw	r30, r28
    290e:	e7 5a       	subi	r30, 0xA7	; 167
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	d1 f6       	brne	.-76     	; 0x28ce <MOVE_STEPPER_MOTOR+0x65c>
    291a:	27 c0       	rjmp	.+78     	; 0x296a <MOVE_STEPPER_MOTOR+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	8e 01       	movw	r16, r28
    291e:	07 5a       	subi	r16, 0xA7	; 167
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	e5 5a       	subi	r30, 0xA5	; 165
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	f8 01       	movw	r30, r16
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	de 01       	movw	r26, r28
    2940:	ab 5a       	subi	r26, 0xAB	; 171
    2942:	bf 4f       	sbci	r27, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	e7 5a       	subi	r30, 0xA7	; 167
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	8d 93       	st	X+, r24
    2950:	9c 93       	st	X, r25
    2952:	fe 01       	movw	r30, r28
    2954:	eb 5a       	subi	r30, 0xAB	; 171
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <MOVE_STEPPER_MOTOR+0x6ea>
    2960:	fe 01       	movw	r30, r28
    2962:	eb 5a       	subi	r30, 0xAB	; 171
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
						_delay_ms(10);



						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_low);
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    2974:	83 e0       	ldi	r24, 0x03	; 3
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	41 e0       	ldi	r20, 0x01	; 1
    297a:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	62 e0       	ldi	r22, 0x02	; 2
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	63 e0       	ldi	r22, 0x03	; 3
    298c:	41 e0       	ldi	r20, 0x01	; 1
    298e:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2992:	fe 01       	movw	r30, r28
    2994:	ef 5a       	subi	r30, 0xAF	; 175
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e2       	ldi	r26, 0x20	; 32
    299e:	b1 e4       	ldi	r27, 0x41	; 65
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	8e 01       	movw	r16, r28
    29aa:	03 5b       	subi	r16, 0xB3	; 179
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	fe 01       	movw	r30, r28
    29b0:	ef 5a       	subi	r30, 0xAF	; 175
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	4a ef       	ldi	r20, 0xFA	; 250
    29c2:	54 e4       	ldi	r21, 0x44	; 68
    29c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	f8 01       	movw	r30, r16
    29ce:	80 83       	st	Z, r24
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	a2 83       	std	Z+2, r26	; 0x02
    29d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29d6:	fe 01       	movw	r30, r28
    29d8:	e3 5b       	subi	r30, 0xB3	; 179
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	44 f4       	brge	.+16     	; 0x2a04 <MOVE_STEPPER_MOTOR+0x792>
		__ticks = 1;
    29f4:	fe 01       	movw	r30, r28
    29f6:	e5 5b       	subi	r30, 0xB5	; 181
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	64 c0       	rjmp	.+200    	; 0x2acc <MOVE_STEPPER_MOTOR+0x85a>
	else if (__tmp > 65535)
    2a04:	fe 01       	movw	r30, r28
    2a06:	e3 5b       	subi	r30, 0xB3	; 179
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	0c f0       	brlt	.+2      	; 0x2a24 <MOVE_STEPPER_MOTOR+0x7b2>
    2a22:	43 c0       	rjmp	.+134    	; 0x2aaa <MOVE_STEPPER_MOTOR+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a24:	fe 01       	movw	r30, r28
    2a26:	ef 5a       	subi	r30, 0xAF	; 175
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e2       	ldi	r20, 0x20	; 32
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	8e 01       	movw	r16, r28
    2a44:	05 5b       	subi	r16, 0xB5	; 181
    2a46:	1f 4f       	sbci	r17, 0xFF	; 255
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	f8 01       	movw	r30, r16
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
    2a5a:	1f c0       	rjmp	.+62     	; 0x2a9a <MOVE_STEPPER_MOTOR+0x828>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e7 5b       	subi	r30, 0xB7	; 183
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	88 ec       	ldi	r24, 0xC8	; 200
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5b       	subi	r30, 0xB7	; 183
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <MOVE_STEPPER_MOTOR+0x802>
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e7 5b       	subi	r30, 0xB7	; 183
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a82:	de 01       	movw	r26, r28
    2a84:	a5 5b       	subi	r26, 0xB5	; 181
    2a86:	bf 4f       	sbci	r27, 0xFF	; 255
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e5 5b       	subi	r30, 0xB5	; 181
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	91 81       	ldd	r25, Z+1	; 0x01
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	11 96       	adiw	r26, 0x01	; 1
    2a96:	9c 93       	st	X, r25
    2a98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e5 5b       	subi	r30, 0xB5	; 181
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	d1 f6       	brne	.-76     	; 0x2a5c <MOVE_STEPPER_MOTOR+0x7ea>
    2aa8:	27 c0       	rjmp	.+78     	; 0x2af8 <MOVE_STEPPER_MOTOR+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	8e 01       	movw	r16, r28
    2aac:	05 5b       	subi	r16, 0xB5	; 181
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	e3 5b       	subi	r30, 0xB3	; 179
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	60 81       	ld	r22, Z
    2ab8:	71 81       	ldd	r23, Z+1	; 0x01
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	93 81       	ldd	r25, Z+3	; 0x03
    2abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	de 01       	movw	r26, r28
    2ace:	a9 5b       	subi	r26, 0xB9	; 185
    2ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e5 5b       	subi	r30, 0xB5	; 181
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	8d 93       	st	X+, r24
    2ade:	9c 93       	st	X, r25
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e9 5b       	subi	r30, 0xB9	; 185
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <MOVE_STEPPER_MOTOR+0x878>
    2aee:	fe 01       	movw	r30, r28
    2af0:	e9 5b       	subi	r30, 0xB9	; 185
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
				_delay_ms(10);


			for(int i = 1 ; i <=counter ; i++){
    2af8:	de 01       	movw	r26, r28
    2afa:	a1 57       	subi	r26, 0x71	; 113
    2afc:	bf 4f       	sbci	r27, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	e1 57       	subi	r30, 0x71	; 113
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	11 96       	adiw	r26, 0x01	; 1
    2b0c:	9c 93       	st	X, r25
    2b0e:	8e 93       	st	-X, r24
    2b10:	fe 01       	movw	r30, r28
    2b12:	ef 56       	subi	r30, 0x6F	; 111
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e1 57       	subi	r30, 0x71	; 113
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	28 17       	cp	r18, r24
    2b28:	39 07       	cpc	r19, r25
    2b2a:	0c f0       	brlt	.+2      	; 0x2b2e <MOVE_STEPPER_MOTOR+0x8bc>
    2b2c:	c9 cc       	rjmp	.-1646   	; 0x24c0 <MOVE_STEPPER_MOTOR+0x24e>
    2b2e:	d9 c2       	rjmp	.+1458   	; 0x30e2 <MOVE_STEPPER_MOTOR+0xe70>
			default:



				/*power to the motor*/
				DI_set_pin_value(STEPPER_MOTOR_PORT, STEPPER_MOTOR_FIRST_PIN , Pin_high);
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	41 e0       	ldi	r20, 0x01	; 1
    2b36:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	61 e0       	ldi	r22, 0x01	; 1
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	62 e0       	ldi	r22, 0x02	; 2
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
    2b50:	63 e0       	ldi	r22, 0x03	; 3
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ed 5b       	subi	r30, 0xBD	; 189
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e2       	ldi	r26, 0x20	; 32
    2b64:	b1 e4       	ldi	r27, 0x41	; 65
    2b66:	80 83       	st	Z, r24
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	a2 83       	std	Z+2, r26	; 0x02
    2b6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6e:	8e 01       	movw	r16, r28
    2b70:	01 5c       	subi	r16, 0xC1	; 193
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	ed 5b       	subi	r30, 0xBD	; 189
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a ef       	ldi	r20, 0xFA	; 250
    2b88:	54 e4       	ldi	r21, 0x44	; 68
    2b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	f8 01       	movw	r30, r16
    2b94:	80 83       	st	Z, r24
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	a2 83       	std	Z+2, r26	; 0x02
    2b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ff 96       	adiw	r30, 0x3f	; 63
    2ba0:	60 81       	ld	r22, Z
    2ba2:	71 81       	ldd	r23, Z+1	; 0x01
    2ba4:	82 81       	ldd	r24, Z+2	; 0x02
    2ba6:	93 81       	ldd	r25, Z+3	; 0x03
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e8       	ldi	r20, 0x80	; 128
    2bae:	5f e3       	ldi	r21, 0x3F	; 63
    2bb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bb4:	88 23       	and	r24, r24
    2bb6:	2c f4       	brge	.+10     	; 0x2bc2 <MOVE_STEPPER_MOTOR+0x950>
		__ticks = 1;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9e af       	std	Y+62, r25	; 0x3e
    2bbe:	8d af       	std	Y+61, r24	; 0x3d
    2bc0:	46 c0       	rjmp	.+140    	; 0x2c4e <MOVE_STEPPER_MOTOR+0x9dc>
	else if (__tmp > 65535)
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ff 96       	adiw	r30, 0x3f	; 63
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	64 f5       	brge	.+88     	; 0x2c36 <MOVE_STEPPER_MOTOR+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	fe 01       	movw	r30, r28
    2be0:	ed 5b       	subi	r30, 0xBD	; 189
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e af       	std	Y+62, r25	; 0x3e
    2c0a:	8d af       	std	Y+61, r24	; 0x3d
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <MOVE_STEPPER_MOTOR+0x9ba>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c af       	std	Y+60, r25	; 0x3c
    2c14:	8b af       	std	Y+59, r24	; 0x3b
    2c16:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c18:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <MOVE_STEPPER_MOTOR+0x9a8>
    2c1e:	9c af       	std	Y+60, r25	; 0x3c
    2c20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c24:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e af       	std	Y+62, r25	; 0x3e
    2c2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <MOVE_STEPPER_MOTOR+0x99c>
    2c34:	16 c0       	rjmp	.+44     	; 0x2c62 <MOVE_STEPPER_MOTOR+0x9f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	fe 01       	movw	r30, r28
    2c38:	ff 96       	adiw	r30, 0x3f	; 63
    2c3a:	60 81       	ld	r22, Z
    2c3c:	71 81       	ldd	r23, Z+1	; 0x01
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9e af       	std	Y+62, r25	; 0x3e
    2c4c:	8d af       	std	Y+61, r24	; 0x3d
    2c4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c50:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c52:	9a af       	std	Y+58, r25	; 0x3a
    2c54:	89 af       	std	Y+57, r24	; 0x39
    2c56:	89 ad       	ldd	r24, Y+57	; 0x39
    2c58:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <MOVE_STEPPER_MOTOR+0x9e8>
    2c5e:	9a af       	std	Y+58, r25	; 0x3a
    2c60:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(10);


				for(int i = 1 ; i <=counter ; i++){
    2c62:	fe 01       	movw	r30, r28
    2c64:	e3 57       	subi	r30, 0x73	; 115
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
    2c70:	24 c2       	rjmp	.+1096   	; 0x30ba <MOVE_STEPPER_MOTOR+0xe48>


					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_low);
    2c72:	83 e0       	ldi	r24, 0x03	; 3
    2c74:	60 e0       	ldi	r22, 0x00	; 0
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    2c7c:	83 e0       	ldi	r24, 0x03	; 3
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    2c86:	83 e0       	ldi	r24, 0x03	; 3
    2c88:	62 e0       	ldi	r22, 0x02	; 2
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    2c90:	83 e0       	ldi	r24, 0x03	; 3
    2c92:	63 e0       	ldi	r22, 0x03	; 3
    2c94:	41 e0       	ldi	r20, 0x01	; 1
    2c96:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a0 e2       	ldi	r26, 0x20	; 32
    2ca0:	b1 e4       	ldi	r27, 0x41	; 65
    2ca2:	8d ab       	std	Y+53, r24	; 0x35
    2ca4:	9e ab       	std	Y+54, r25	; 0x36
    2ca6:	af ab       	std	Y+55, r26	; 0x37
    2ca8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2caa:	6d a9       	ldd	r22, Y+53	; 0x35
    2cac:	7e a9       	ldd	r23, Y+54	; 0x36
    2cae:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb0:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a ef       	ldi	r20, 0xFA	; 250
    2cb8:	54 e4       	ldi	r21, 0x44	; 68
    2cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	89 ab       	std	Y+49, r24	; 0x31
    2cc4:	9a ab       	std	Y+50, r25	; 0x32
    2cc6:	ab ab       	std	Y+51, r26	; 0x33
    2cc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cca:	69 a9       	ldd	r22, Y+49	; 0x31
    2ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cce:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <MOVE_STEPPER_MOTOR+0xa7a>
		__ticks = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	98 ab       	std	Y+48, r25	; 0x30
    2ce8:	8f a7       	std	Y+47, r24	; 0x2f
    2cea:	3f c0       	rjmp	.+126    	; 0x2d6a <MOVE_STEPPER_MOTOR+0xaf8>
	else if (__tmp > 65535)
    2cec:	69 a9       	ldd	r22, Y+49	; 0x31
    2cee:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf0:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf2:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	4c f5       	brge	.+82     	; 0x2d56 <MOVE_STEPPER_MOTOR+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d04:	6d a9       	ldd	r22, Y+53	; 0x35
    2d06:	7e a9       	ldd	r23, Y+54	; 0x36
    2d08:	8f a9       	ldd	r24, Y+55	; 0x37
    2d0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e2       	ldi	r20, 0x20	; 32
    2d12:	51 e4       	ldi	r21, 0x41	; 65
    2d14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	98 ab       	std	Y+48, r25	; 0x30
    2d2a:	8f a7       	std	Y+47, r24	; 0x2f
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <MOVE_STEPPER_MOTOR+0xada>
    2d2e:	88 ec       	ldi	r24, 0xC8	; 200
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9e a7       	std	Y+46, r25	; 0x2e
    2d34:	8d a7       	std	Y+45, r24	; 0x2d
    2d36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <MOVE_STEPPER_MOTOR+0xac8>
    2d3e:	9e a7       	std	Y+46, r25	; 0x2e
    2d40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d44:	98 a9       	ldd	r25, Y+48	; 0x30
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	98 ab       	std	Y+48, r25	; 0x30
    2d4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	69 f7       	brne	.-38     	; 0x2d2e <MOVE_STEPPER_MOTOR+0xabc>
    2d54:	14 c0       	rjmp	.+40     	; 0x2d7e <MOVE_STEPPER_MOTOR+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d56:	69 a9       	ldd	r22, Y+49	; 0x31
    2d58:	7a a9       	ldd	r23, Y+50	; 0x32
    2d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	98 ab       	std	Y+48, r25	; 0x30
    2d68:	8f a7       	std	Y+47, r24	; 0x2f
    2d6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6e:	9c a7       	std	Y+44, r25	; 0x2c
    2d70:	8b a7       	std	Y+43, r24	; 0x2b
    2d72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <MOVE_STEPPER_MOTOR+0xb04>
    2d7a:	9c a7       	std	Y+44, r25	; 0x2c
    2d7c:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(10);

					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    2d7e:	83 e0       	ldi	r24, 0x03	; 3
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_low);
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	61 e0       	ldi	r22, 0x01	; 1
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    2d92:	83 e0       	ldi	r24, 0x03	; 3
    2d94:	62 e0       	ldi	r22, 0x02	; 2
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    2d9c:	83 e0       	ldi	r24, 0x03	; 3
    2d9e:	63 e0       	ldi	r22, 0x03	; 3
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e2       	ldi	r26, 0x20	; 32
    2dac:	b1 e4       	ldi	r27, 0x41	; 65
    2dae:	8f a3       	std	Y+39, r24	; 0x27
    2db0:	98 a7       	std	Y+40, r25	; 0x28
    2db2:	a9 a7       	std	Y+41, r26	; 0x29
    2db4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db6:	6f a1       	ldd	r22, Y+39	; 0x27
    2db8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dba:	89 a5       	ldd	r24, Y+41	; 0x29
    2dbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	4a ef       	ldi	r20, 0xFA	; 250
    2dc4:	54 e4       	ldi	r21, 0x44	; 68
    2dc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	8b a3       	std	Y+35, r24	; 0x23
    2dd0:	9c a3       	std	Y+36, r25	; 0x24
    2dd2:	ad a3       	std	Y+37, r26	; 0x25
    2dd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dda:	8d a1       	ldd	r24, Y+37	; 0x25
    2ddc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2dea:	88 23       	and	r24, r24
    2dec:	2c f4       	brge	.+10     	; 0x2df8 <MOVE_STEPPER_MOTOR+0xb86>
		__ticks = 1;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9a a3       	std	Y+34, r25	; 0x22
    2df4:	89 a3       	std	Y+33, r24	; 0x21
    2df6:	3f c0       	rjmp	.+126    	; 0x2e76 <MOVE_STEPPER_MOTOR+0xc04>
	else if (__tmp > 65535)
    2df8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	4c f5       	brge	.+82     	; 0x2e62 <MOVE_STEPPER_MOTOR+0xbf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e10:	6f a1       	ldd	r22, Y+39	; 0x27
    2e12:	78 a5       	ldd	r23, Y+40	; 0x28
    2e14:	89 a5       	ldd	r24, Y+41	; 0x29
    2e16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e2       	ldi	r20, 0x20	; 32
    2e1e:	51 e4       	ldi	r21, 0x41	; 65
    2e20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9a a3       	std	Y+34, r25	; 0x22
    2e36:	89 a3       	std	Y+33, r24	; 0x21
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <MOVE_STEPPER_MOTOR+0xbe6>
    2e3a:	88 ec       	ldi	r24, 0xC8	; 200
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	98 a3       	std	Y+32, r25	; 0x20
    2e40:	8f 8f       	std	Y+31, r24	; 0x1f
    2e42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e44:	98 a1       	ldd	r25, Y+32	; 0x20
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <MOVE_STEPPER_MOTOR+0xbd4>
    2e4a:	98 a3       	std	Y+32, r25	; 0x20
    2e4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e50:	9a a1       	ldd	r25, Y+34	; 0x22
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	9a a3       	std	Y+34, r25	; 0x22
    2e56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e58:	89 a1       	ldd	r24, Y+33	; 0x21
    2e5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	69 f7       	brne	.-38     	; 0x2e3a <MOVE_STEPPER_MOTOR+0xbc8>
    2e60:	14 c0       	rjmp	.+40     	; 0x2e8a <MOVE_STEPPER_MOTOR+0xc18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e62:	6b a1       	ldd	r22, Y+35	; 0x23
    2e64:	7c a1       	ldd	r23, Y+36	; 0x24
    2e66:	8d a1       	ldd	r24, Y+37	; 0x25
    2e68:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9a a3       	std	Y+34, r25	; 0x22
    2e74:	89 a3       	std	Y+33, r24	; 0x21
    2e76:	89 a1       	ldd	r24, Y+33	; 0x21
    2e78:	9a a1       	ldd	r25, Y+34	; 0x22
    2e7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e7c:	8d 8f       	std	Y+29, r24	; 0x1d
    2e7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <MOVE_STEPPER_MOTOR+0xc10>
    2e86:	9e 8f       	std	Y+30, r25	; 0x1e
    2e88:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(10);

					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    2e8a:	83 e0       	ldi	r24, 0x03	; 3
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	41 e0       	ldi	r20, 0x01	; 1
    2e90:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    2e94:	83 e0       	ldi	r24, 0x03	; 3
    2e96:	61 e0       	ldi	r22, 0x01	; 1
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_low);
    2e9e:	83 e0       	ldi	r24, 0x03	; 3
    2ea0:	62 e0       	ldi	r22, 0x02	; 2
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    2ea8:	83 e0       	ldi	r24, 0x03	; 3
    2eaa:	63 e0       	ldi	r22, 0x03	; 3
    2eac:	41 e0       	ldi	r20, 0x01	; 1
    2eae:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e2       	ldi	r26, 0x20	; 32
    2eb8:	b1 e4       	ldi	r27, 0x41	; 65
    2eba:	89 8f       	std	Y+25, r24	; 0x19
    2ebc:	9a 8f       	std	Y+26, r25	; 0x1a
    2ebe:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4a ef       	ldi	r20, 0xFA	; 250
    2ed0:	54 e4       	ldi	r21, 0x44	; 68
    2ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	8d 8b       	std	Y+21, r24	; 0x15
    2edc:	9e 8b       	std	Y+22, r25	; 0x16
    2ede:	af 8b       	std	Y+23, r26	; 0x17
    2ee0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e8       	ldi	r20, 0x80	; 128
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ef6:	88 23       	and	r24, r24
    2ef8:	2c f4       	brge	.+10     	; 0x2f04 <MOVE_STEPPER_MOTOR+0xc92>
		__ticks = 1;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9c 8b       	std	Y+20, r25	; 0x14
    2f00:	8b 8b       	std	Y+19, r24	; 0x13
    2f02:	3f c0       	rjmp	.+126    	; 0x2f82 <MOVE_STEPPER_MOTOR+0xd10>
	else if (__tmp > 65535)
    2f04:	6d 89       	ldd	r22, Y+21	; 0x15
    2f06:	7e 89       	ldd	r23, Y+22	; 0x16
    2f08:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	3f ef       	ldi	r19, 0xFF	; 255
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	57 e4       	ldi	r21, 0x47	; 71
    2f14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	4c f5       	brge	.+82     	; 0x2f6e <MOVE_STEPPER_MOTOR+0xcfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e2       	ldi	r20, 0x20	; 32
    2f2a:	51 e4       	ldi	r21, 0x41	; 65
    2f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9c 8b       	std	Y+20, r25	; 0x14
    2f42:	8b 8b       	std	Y+19, r24	; 0x13
    2f44:	0f c0       	rjmp	.+30     	; 0x2f64 <MOVE_STEPPER_MOTOR+0xcf2>
    2f46:	88 ec       	ldi	r24, 0xC8	; 200
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9a 8b       	std	Y+18, r25	; 0x12
    2f4c:	89 8b       	std	Y+17, r24	; 0x11
    2f4e:	89 89       	ldd	r24, Y+17	; 0x11
    2f50:	9a 89       	ldd	r25, Y+18	; 0x12
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <MOVE_STEPPER_MOTOR+0xce0>
    2f56:	9a 8b       	std	Y+18, r25	; 0x12
    2f58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	9c 8b       	std	Y+20, r25	; 0x14
    2f62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	8b 89       	ldd	r24, Y+19	; 0x13
    2f66:	9c 89       	ldd	r25, Y+20	; 0x14
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	69 f7       	brne	.-38     	; 0x2f46 <MOVE_STEPPER_MOTOR+0xcd4>
    2f6c:	14 c0       	rjmp	.+40     	; 0x2f96 <MOVE_STEPPER_MOTOR+0xd24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f70:	7e 89       	ldd	r23, Y+22	; 0x16
    2f72:	8f 89       	ldd	r24, Y+23	; 0x17
    2f74:	98 8d       	ldd	r25, Y+24	; 0x18
    2f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9c 8b       	std	Y+20, r25	; 0x14
    2f80:	8b 8b       	std	Y+19, r24	; 0x13
    2f82:	8b 89       	ldd	r24, Y+19	; 0x13
    2f84:	9c 89       	ldd	r25, Y+20	; 0x14
    2f86:	98 8b       	std	Y+16, r25	; 0x10
    2f88:	8f 87       	std	Y+15, r24	; 0x0f
    2f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8c:	98 89       	ldd	r25, Y+16	; 0x10
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <MOVE_STEPPER_MOTOR+0xd1c>
    2f92:	98 8b       	std	Y+16, r25	; 0x10
    2f94:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10);



					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    2fa0:	83 e0       	ldi	r24, 0x03	; 3
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	62 e0       	ldi	r22, 0x02	; 2
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	63 e0       	ldi	r22, 0x03	; 3
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	0e 94 63 07 	call	0xec6	; 0xec6 <DI_set_pin_value>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 e2       	ldi	r26, 0x20	; 32
    2fc4:	b1 e4       	ldi	r27, 0x41	; 65
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	9c 87       	std	Y+12, r25	; 0x0c
    2fca:	ad 87       	std	Y+13, r26	; 0x0d
    2fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8f 83       	std	Y+7, r24	; 0x07
    2fe8:	98 87       	std	Y+8, r25	; 0x08
    2fea:	a9 87       	std	Y+9, r26	; 0x09
    2fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	89 85       	ldd	r24, Y+9	; 0x09
    2ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <MOVE_STEPPER_MOTOR+0xd9e>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
    300e:	3f c0       	rjmp	.+126    	; 0x308e <MOVE_STEPPER_MOTOR+0xe1c>
	else if (__tmp > 65535)
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <MOVE_STEPPER_MOTOR+0xe08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	6b 85       	ldd	r22, Y+11	; 0x0b
    302a:	7c 85       	ldd	r23, Y+12	; 0x0c
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <MOVE_STEPPER_MOTOR+0xdfe>
    3052:	88 ec       	ldi	r24, 0xC8	; 200
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9c 83       	std	Y+4, r25	; 0x04
    3058:	8b 83       	std	Y+3, r24	; 0x03
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <MOVE_STEPPER_MOTOR+0xdec>
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9e 83       	std	Y+6, r25	; 0x06
    306e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8d 81       	ldd	r24, Y+5	; 0x05
    3072:	9e 81       	ldd	r25, Y+6	; 0x06
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <MOVE_STEPPER_MOTOR+0xde0>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <MOVE_STEPPER_MOTOR+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6f 81       	ldd	r22, Y+7	; 0x07
    307c:	78 85       	ldd	r23, Y+8	; 0x08
    307e:	89 85       	ldd	r24, Y+9	; 0x09
    3080:	9a 85       	ldd	r25, Y+10	; 0x0a
    3082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	9e 81       	ldd	r25, Y+6	; 0x06
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <MOVE_STEPPER_MOTOR+0xe28>
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	89 83       	std	Y+1, r24	; 0x01
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
				_delay_ms(10);


				for(int i = 1 ; i <=counter ; i++){
    30a2:	de 01       	movw	r26, r28
    30a4:	a3 57       	subi	r26, 0x73	; 115
    30a6:	bf 4f       	sbci	r27, 0xFF	; 255
    30a8:	fe 01       	movw	r30, r28
    30aa:	e3 57       	subi	r30, 0x73	; 115
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	11 96       	adiw	r26, 0x01	; 1
    30b6:	9c 93       	st	X, r25
    30b8:	8e 93       	st	-X, r24
    30ba:	fe 01       	movw	r30, r28
    30bc:	ef 56       	subi	r30, 0x6F	; 111
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	80 81       	ld	r24, Z
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	fe 01       	movw	r30, r28
    30c8:	e3 57       	subi	r30, 0x73	; 115
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 81       	ld	r24, Z
    30ce:	91 81       	ldd	r25, Z+1	; 0x01
    30d0:	28 17       	cp	r18, r24
    30d2:	39 07       	cpc	r19, r25
    30d4:	0c f0       	brlt	.+2      	; 0x30d8 <MOVE_STEPPER_MOTOR+0xe66>
    30d6:	cd cd       	rjmp	.-1126   	; 0x2c72 <MOVE_STEPPER_MOTOR+0xa00>
    30d8:	04 c0       	rjmp	.+8      	; 0x30e2 <MOVE_STEPPER_MOTOR+0xe70>

	}

	else{

		error_state=Return_NOT_Ok;
    30da:	fe 01       	movw	r30, r28
    30dc:	ee 56       	subi	r30, 0x6E	; 110
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	10 82       	st	Z, r1

	}


	return error_state;
    30e2:	fe 01       	movw	r30, r28
    30e4:	ee 56       	subi	r30, 0x6E	; 110
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z


}
    30ea:	cb 56       	subi	r28, 0x6B	; 107
    30ec:	df 4f       	sbci	r29, 0xFF	; 255
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	08 95       	ret

00003102 <main>:

#include  <util/delay.h>
#define  F_CPU  8000000UL

int main()
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62

	DIO_INTI();
    310a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_INTI>

	MOVE_STEPPER_MOTOR(CCW,9);
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	69 e0       	ldi	r22, 0x09	; 9
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	0e 94 39 11 	call	0x2272	; 0x2272 <MOVE_STEPPER_MOTOR>


	return 0 ;
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
}
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <__udivmodsi4>:
    3122:	a1 e2       	ldi	r26, 0x21	; 33
    3124:	1a 2e       	mov	r1, r26
    3126:	aa 1b       	sub	r26, r26
    3128:	bb 1b       	sub	r27, r27
    312a:	fd 01       	movw	r30, r26
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <__udivmodsi4_ep>

0000312e <__udivmodsi4_loop>:
    312e:	aa 1f       	adc	r26, r26
    3130:	bb 1f       	adc	r27, r27
    3132:	ee 1f       	adc	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	a2 17       	cp	r26, r18
    3138:	b3 07       	cpc	r27, r19
    313a:	e4 07       	cpc	r30, r20
    313c:	f5 07       	cpc	r31, r21
    313e:	20 f0       	brcs	.+8      	; 0x3148 <__udivmodsi4_ep>
    3140:	a2 1b       	sub	r26, r18
    3142:	b3 0b       	sbc	r27, r19
    3144:	e4 0b       	sbc	r30, r20
    3146:	f5 0b       	sbc	r31, r21

00003148 <__udivmodsi4_ep>:
    3148:	66 1f       	adc	r22, r22
    314a:	77 1f       	adc	r23, r23
    314c:	88 1f       	adc	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	1a 94       	dec	r1
    3152:	69 f7       	brne	.-38     	; 0x312e <__udivmodsi4_loop>
    3154:	60 95       	com	r22
    3156:	70 95       	com	r23
    3158:	80 95       	com	r24
    315a:	90 95       	com	r25
    315c:	9b 01       	movw	r18, r22
    315e:	ac 01       	movw	r20, r24
    3160:	bd 01       	movw	r22, r26
    3162:	cf 01       	movw	r24, r30
    3164:	08 95       	ret

00003166 <__prologue_saves__>:
    3166:	2f 92       	push	r2
    3168:	3f 92       	push	r3
    316a:	4f 92       	push	r4
    316c:	5f 92       	push	r5
    316e:	6f 92       	push	r6
    3170:	7f 92       	push	r7
    3172:	8f 92       	push	r8
    3174:	9f 92       	push	r9
    3176:	af 92       	push	r10
    3178:	bf 92       	push	r11
    317a:	cf 92       	push	r12
    317c:	df 92       	push	r13
    317e:	ef 92       	push	r14
    3180:	ff 92       	push	r15
    3182:	0f 93       	push	r16
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	ca 1b       	sub	r28, r26
    3190:	db 0b       	sbc	r29, r27
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	09 94       	ijmp

0000319e <__epilogue_restores__>:
    319e:	2a 88       	ldd	r2, Y+18	; 0x12
    31a0:	39 88       	ldd	r3, Y+17	; 0x11
    31a2:	48 88       	ldd	r4, Y+16	; 0x10
    31a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    31ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    31b0:	b9 84       	ldd	r11, Y+9	; 0x09
    31b2:	c8 84       	ldd	r12, Y+8	; 0x08
    31b4:	df 80       	ldd	r13, Y+7	; 0x07
    31b6:	ee 80       	ldd	r14, Y+6	; 0x06
    31b8:	fd 80       	ldd	r15, Y+5	; 0x05
    31ba:	0c 81       	ldd	r16, Y+4	; 0x04
    31bc:	1b 81       	ldd	r17, Y+3	; 0x03
    31be:	aa 81       	ldd	r26, Y+2	; 0x02
    31c0:	b9 81       	ldd	r27, Y+1	; 0x01
    31c2:	ce 0f       	add	r28, r30
    31c4:	d1 1d       	adc	r29, r1
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	ed 01       	movw	r28, r26
    31d2:	08 95       	ret

000031d4 <_exit>:
    31d4:	f8 94       	cli

000031d6 <__stop_program>:
    31d6:	ff cf       	rjmp	.-2      	; 0x31d6 <__stop_program>
