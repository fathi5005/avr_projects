
KEYPAD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00004170  00004204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800136  00800136  000042da  2**0
                  ALLOC
  3 .stab         0000354c  00000000  00000000  000042dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d43  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000856b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000086cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000885a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a89f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000caa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_1>
       8:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_2>
       c:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <main>
      8a:	0c 94 b6 20 	jmp	0x416c	; 0x416c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 20 	jmp	0x410e	; 0x410e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ef       	ldi	r22, 0xFD	; 253
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_INTI>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

void DIO_INTI(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

  DDRA_REG = conc(DIO_PA7_inti_direction, DIO_PA6_inti_direction,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
                  DIO_PA5_inti_direction, DIO_PA4_inti_direction,
                  DIO_PA3_inti_direction, DIO_PA2_inti_direction,
                  DIO_PA1_inti_direction, DIO_PA0_inti_direction);

  DDRB_REG = conc(DIO_PB7_inti_direction, DIO_PB6_inti_direction,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8b ef       	ldi	r24, 0xFB	; 251
     cb4:	80 83       	st	Z, r24
                  DIO_PB5_inti_direction, DIO_PB4_inti_direction,
                  DIO_PB3_inti_direction, DIO_PB2_inti_direction,
                  DIO_PB1_inti_direction, DIO_PB0_inti_direction);

  DDRC_REG = conc(DIO_PC7_inti_direction, DIO_PC6_inti_direction,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
                  DIO_PC5_inti_direction, DIO_PC4_inti_direction,
                  DIO_PC3_inti_direction, DIO_PC2_inti_direction,
                  DIO_PC1_inti_direction, DIO_PC0_inti_direction);

  DDRD_REG = conc(DIO_PD7_inti_direction, DIO_PD6_inti_direction,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	80 83       	st	Z, r24
                  DIO_PD5_inti_direction, DIO_PD4_inti_direction,
                  DIO_PD3_inti_direction, DIO_PD2_inti_direction,
                  DIO_PD1_inti_direction, DIO_PD0_inti_direction);

  PORTA_REG = conc(DIO_PA7_inti_value, DIO_PA6_inti_value, DIO_PA5_inti_value,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
                   DIO_PA4_inti_value, DIO_PA3_inti_value, DIO_PA2_inti_value,
                   DIO_PA1_inti_value, DIO_PA0_inti_value);

  PORTB_REG = conc(DIO_PB7_inti_value, DIO_PB6_inti_value, DIO_PB5_inti_value,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	80 83       	st	Z, r24
                   DIO_PB4_inti_value, DIO_PB3_inti_value, DIO_PB2_inti_value,
                   DIO_PB1_inti_value, DIO_PB0_inti_value);

  PORTC_REG = conc(DIO_PC7_inti_value, DIO_PC6_inti_value, DIO_PC5_inti_value,
     cd4:	e5 e3       	ldi	r30, 0x35	; 53
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	10 82       	st	Z, r1
                   DIO_PC4_inti_value, DIO_PC3_inti_value, DIO_PC2_inti_value,
                   DIO_PC1_inti_value, DIO_PC0_inti_value);

  PORTD_REG = conc(DIO_PD7_inti_value, DIO_PD6_inti_value, DIO_PD5_inti_value,
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	80 83       	st	Z, r24
                   DIO_PD4_inti_value, DIO_PD3_inti_value, DIO_PD2_inti_value,
                   DIO_PD1_inti_value, DIO_PD0_inti_value);
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <DIO_set_pin_direction>:
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_set_pin_direction(uint_8 port_id, uint_8 pin_id,
                             uint_8 pin_direction) {
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_set_pin_direction+0x6>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <DIO_set_pin_direction+0x8>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <DIO_set_pin_direction+0xa>
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	8a 83       	std	Y+2, r24	; 0x02
     cf8:	6b 83       	std	Y+3, r22	; 0x03
     cfa:	4c 83       	std	Y+4, r20	; 0x04
  uint_8 Error_state = Return_Ok;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (pin_id <= PIN7) &&
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	08 f0       	brcs	.+2      	; 0xd08 <DIO_set_pin_direction+0x20>
     d06:	dc c0       	rjmp	.+440    	; 0xec0 <DIO_set_pin_direction+0x1d8>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_set_pin_direction+0x28>
     d0e:	d8 c0       	rjmp	.+432    	; 0xec0 <DIO_set_pin_direction+0x1d8>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	21 f0       	breq	.+8      	; 0xd1e <DIO_set_pin_direction+0x36>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	88 23       	and	r24, r24
     d1a:	09 f0       	breq	.+2      	; 0xd1e <DIO_set_pin_direction+0x36>
     d1c:	d1 c0       	rjmp	.+418    	; 0xec0 <DIO_set_pin_direction+0x1d8>
      (pin_direction == Output || pin_direction == INput)) {

    switch (port_id) {
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3e 83       	std	Y+6, r19	; 0x06
     d26:	2d 83       	std	Y+5, r18	; 0x05
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	9e 81       	ldd	r25, Y+6	; 0x06
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	d1 f1       	breq	.+116    	; 0xda6 <DIO_set_pin_direction+0xbe>
     d32:	2d 81       	ldd	r18, Y+5	; 0x05
     d34:	3e 81       	ldd	r19, Y+6	; 0x06
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <DIO_set_pin_direction+0x56>
     d3c:	63 c0       	rjmp	.+198    	; 0xe04 <DIO_set_pin_direction+0x11c>
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	09 f0       	breq	.+2      	; 0xd48 <DIO_set_pin_direction+0x60>
     d46:	8d c0       	rjmp	.+282    	; 0xe62 <DIO_set_pin_direction+0x17a>
    /***********  PORTA  *************/
    case (PORTA):
      switch (pin_direction) {
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	a1 f4       	brne	.+40     	; 0xd7c <DIO_set_pin_direction+0x94>
      case (Output):
        SET_BIT(DDRA_REG, pin_id);
     d54:	aa e3       	ldi	r26, 0x3A	; 58
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ea e3       	ldi	r30, 0x3A	; 58
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_set_pin_direction+0x8a>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_set_pin_direction+0x86>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	a3 c0       	rjmp	.+326    	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRA_REG, pin_id);
     d7c:	aa e3       	ldi	r26, 0x3A	; 58
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_set_pin_direction+0xb2>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_set_pin_direction+0xae>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	8e c0       	rjmp	.+284    	; 0xec2 <DIO_set_pin_direction+0x1da>
      break;
    /********************************/

    /***********  PORTB *************/
    case (PORTB):
      switch (pin_direction) {
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	a1 f4       	brne	.+40     	; 0xdda <DIO_set_pin_direction+0xf2>
      case (Output):
        SET_BIT(DDRB_REG, pin_id);
     db2:	a7 e3       	ldi	r26, 0x37	; 55
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_set_pin_direction+0xe8>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_set_pin_direction+0xe4>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	74 c0       	rjmp	.+232    	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRB_REG, pin_id);
     dda:	a7 e3       	ldi	r26, 0x37	; 55
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e3       	ldi	r30, 0x37	; 55
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_set_pin_direction+0x110>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_set_pin_direction+0x10c>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	5f c0       	rjmp	.+190    	; 0xec2 <DIO_set_pin_direction+0x1da>
      break;
    /********************************/

    /***********  PORTC  ************/
    case (PORTC):
      switch (pin_direction) {
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <DIO_set_pin_direction+0x150>
      case (Output):
        SET_BIT(DDRC_REG, pin_id);
     e10:	a4 e3       	ldi	r26, 0x34	; 52
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e4 e3       	ldi	r30, 0x34	; 52
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_set_pin_direction+0x146>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_set_pin_direction+0x142>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	45 c0       	rjmp	.+138    	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRC_REG, pin_id);
     e38:	a4 e3       	ldi	r26, 0x34	; 52
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e3       	ldi	r30, 0x34	; 52
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_set_pin_direction+0x16e>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_set_pin_direction+0x16a>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	30 c0       	rjmp	.+96     	; 0xec2 <DIO_set_pin_direction+0x1da>
      break;
      /********************************/

    default:

      switch (pin_direction) {
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	91 05       	cpc	r25, r1
     e6c:	a1 f4       	brne	.+40     	; 0xe96 <DIO_set_pin_direction+0x1ae>
      case (Output):
        SET_BIT(DDRD_REG, pin_id);
     e6e:	a1 e3       	ldi	r26, 0x31	; 49
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_set_pin_direction+0x1a4>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_set_pin_direction+0x1a0>
     e90:	84 2b       	or	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	16 c0       	rjmp	.+44     	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRD_REG, pin_id);
     e96:	a1 e3       	ldi	r26, 0x31	; 49
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e3       	ldi	r30, 0x31	; 49
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_set_pin_direction+0x1cc>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_set_pin_direction+0x1c8>
     eb8:	80 95       	com	r24
     eba:	84 23       	and	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <DIO_set_pin_direction+0x1da>
      }
      break;
    }

  } else {
    Error_state = Return_NOT_Ok;
     ec0:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	26 96       	adiw	r28, 0x06	; 6
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DI_set_pin_value>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DI_set_pin_value(uint_8 port_id, uint_8 pin_id, uint_8 pin_value) {
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DI_set_pin_value+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DI_set_pin_value+0x8>
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DI_set_pin_value+0xa>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
     ee8:	4c 83       	std	Y+4, r20	; 0x04

  uint_8 Error_state = Return_Ok;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) &&
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DI_set_pin_value+0x20>
     ef4:	dc c0       	rjmp	.+440    	; 0x10ae <DI_set_pin_value+0x1d8>
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <DI_set_pin_value+0x28>
     efc:	d8 c0       	rjmp	.+432    	; 0x10ae <DI_set_pin_value+0x1d8>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 23       	and	r24, r24
     f02:	21 f0       	breq	.+8      	; 0xf0c <DI_set_pin_value+0x36>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DI_set_pin_value+0x36>
     f0a:	d1 c0       	rjmp	.+418    	; 0x10ae <DI_set_pin_value+0x1d8>
      (pin_id <= PIN7 && (pin_value == Pin_low || pin_value == Pin_high))) {

    switch (port_id) {
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3e 83       	std	Y+6, r19	; 0x06
     f14:	2d 83       	std	Y+5, r18	; 0x05
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	d1 f1       	breq	.+116    	; 0xf94 <DI_set_pin_value+0xbe>
     f20:	2d 81       	ldd	r18, Y+5	; 0x05
     f22:	3e 81       	ldd	r19, Y+6	; 0x06
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DI_set_pin_value+0x56>
     f2a:	63 c0       	rjmp	.+198    	; 0xff2 <DI_set_pin_value+0x11c>
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <DI_set_pin_value+0x60>
     f34:	8d c0       	rjmp	.+282    	; 0x1050 <DI_set_pin_value+0x17a>
    /********************  Port A  ****************************/
    case (PORTA):

      switch (pin_value) {
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	91 05       	cpc	r25, r1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <DI_set_pin_value+0x94>
      case (Pin_high):
        SET_BIT(PORTA_REG, pin_id);
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DI_set_pin_value+0x8a>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DI_set_pin_value+0x86>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	a3 c0       	rjmp	.+326    	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTA_REG, pin_id);
     f6a:	ab e3       	ldi	r26, 0x3B	; 59
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DI_set_pin_value+0xb2>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DI_set_pin_value+0xae>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	8e c0       	rjmp	.+284    	; 0x10b0 <DI_set_pin_value+0x1da>
    /***********************************************************/

    /********************  Port B  ****************************/
    case (PORTB):

      switch (pin_value) {
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <DI_set_pin_value+0xf2>
      case (Pin_high):
        SET_BIT(PORTB_REG, pin_id);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DI_set_pin_value+0xe8>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DI_set_pin_value+0xe4>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	74 c0       	rjmp	.+232    	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTB_REG, pin_id);
     fc8:	a8 e3       	ldi	r26, 0x38	; 56
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DI_set_pin_value+0x110>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DI_set_pin_value+0x10c>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	5f c0       	rjmp	.+190    	; 0x10b0 <DI_set_pin_value+0x1da>
    /***********************************************************/

    /********************  Port C ****************************/
    case (PORTC):

      switch (pin_value) {
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	a1 f4       	brne	.+40     	; 0x1026 <DI_set_pin_value+0x150>
      case (Pin_high):
        SET_BIT(PORTC_REG, pin_id);
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DI_set_pin_value+0x146>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DI_set_pin_value+0x142>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	45 c0       	rjmp	.+138    	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTC_REG, pin_id);
    1026:	a5 e3       	ldi	r26, 0x35	; 53
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DI_set_pin_value+0x16e>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DI_set_pin_value+0x16a>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	30 c0       	rjmp	.+96     	; 0x10b0 <DI_set_pin_value+0x1da>
      /***********************************************************/

      /********************  Port D ****************************/

    default:
      switch (pin_value) {
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	91 05       	cpc	r25, r1
    105a:	a1 f4       	brne	.+40     	; 0x1084 <DI_set_pin_value+0x1ae>
      case (Pin_high):
        SET_BIT(PORTD_REG, pin_id);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DI_set_pin_value+0x1a4>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DI_set_pin_value+0x1a0>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	16 c0       	rjmp	.+44     	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTD_REG, pin_id);
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DI_set_pin_value+0x1cc>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DI_set_pin_value+0x1c8>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <DI_set_pin_value+0x1da>

    /***********************************************************/

  } else {

    Error_state = Return_NOT_Ok;
    10ae:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_get_pin_value>:
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_get_pin_value(uint_8 port_id, uint_8 pin_id,
                         uint_8 *return_pin_value) {
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	27 97       	sbiw	r28, 0x07	; 7
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	8a 83       	std	Y+2, r24	; 0x02
    10da:	6b 83       	std	Y+3, r22	; 0x03
    10dc:	5d 83       	std	Y+5, r21	; 0x05
    10de:	4c 83       	std	Y+4, r20	; 0x04

  uint_8 Error_state = Return_Ok;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (pin_id <= PIN7) && (return_pin_value != NULL)) {
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_get_pin_value+0x28>
    10ea:	6e c0       	rjmp	.+220    	; 0x11c8 <DIO_get_pin_value+0x104>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <DIO_get_pin_value+0x30>
    10f2:	6a c0       	rjmp	.+212    	; 0x11c8 <DIO_get_pin_value+0x104>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	09 f4       	brne	.+2      	; 0x10fe <DIO_get_pin_value+0x3a>
    10fc:	65 c0       	rjmp	.+202    	; 0x11c8 <DIO_get_pin_value+0x104>

    switch (port_id) {
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3f 83       	std	Y+7, r19	; 0x07
    1106:	2e 83       	std	Y+6, r18	; 0x06
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	41 30       	cpi	r20, 0x01	; 1
    110e:	51 05       	cpc	r21, r1
    1110:	f9 f0       	breq	.+62     	; 0x1150 <DIO_get_pin_value+0x8c>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	71 f1       	breq	.+92     	; 0x1178 <DIO_get_pin_value+0xb4>
    111c:	2e 81       	ldd	r18, Y+6	; 0x06
    111e:	3f 81       	ldd	r19, Y+7	; 0x07
    1120:	21 15       	cp	r18, r1
    1122:	31 05       	cpc	r19, r1
    1124:	09 f0       	breq	.+2      	; 0x1128 <DIO_get_pin_value+0x64>
    1126:	3c c0       	rjmp	.+120    	; 0x11a0 <DIO_get_pin_value+0xdc>
    case (PORTA):
      *return_pin_value = GET_BIT(PINA_REG, pin_id);
    1128:	e9 e3       	ldi	r30, 0x39	; 57
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_get_pin_value+0x7c>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_get_pin_value+0x78>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	ec 81       	ldd	r30, Y+4	; 0x04
    114a:	fd 81       	ldd	r31, Y+5	; 0x05
    114c:	80 83       	st	Z, r24
    114e:	3d c0       	rjmp	.+122    	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    case (PORTB):
      *return_pin_value = GET_BIT(PINB_REG, pin_id);
    1150:	e6 e3       	ldi	r30, 0x36	; 54
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_get_pin_value+0xa4>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_get_pin_value+0xa0>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	ec 81       	ldd	r30, Y+4	; 0x04
    1172:	fd 81       	ldd	r31, Y+5	; 0x05
    1174:	80 83       	st	Z, r24
    1176:	29 c0       	rjmp	.+82     	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    case (PORTC):
      *return_pin_value = GET_BIT(PINC_REG, pin_id);
    1178:	e3 e3       	ldi	r30, 0x33	; 51
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_get_pin_value+0xcc>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_get_pin_value+0xc8>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 83       	st	Z, r24
    119e:	15 c0       	rjmp	.+42     	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    default:
      *return_pin_value = GET_BIT(PIND_REG, pin_id);
    11a0:	e0 e3       	ldi	r30, 0x30	; 48
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_get_pin_value+0xf4>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_get_pin_value+0xf0>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	ec 81       	ldd	r30, Y+4	; 0x04
    11c2:	fd 81       	ldd	r31, Y+5	; 0x05
    11c4:	80 83       	st	Z, r24
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    }

  } else {

    Error_state = Return_NOT_Ok;
    11c8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	27 96       	adiw	r28, 0x07	; 7
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_set_port_direction>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_set_port_direction(uint_8 port_id, uint_8 pin_direction) {
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_set_port_direction+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_set_port_direction+0x8>
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01

  if ((port_id <= PORTD) &&
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <DIO_set_port_direction+0x1e>
    11fa:	56 c0       	rjmp	.+172    	; 0x12a8 <DIO_set_port_direction+0xca>
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	21 f0       	breq	.+8      	; 0x120a <DIO_set_port_direction+0x2c>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 23       	and	r24, r24
    1206:	09 f0       	breq	.+2      	; 0x120a <DIO_set_port_direction+0x2c>
    1208:	4f c0       	rjmp	.+158    	; 0x12a8 <DIO_set_port_direction+0xca>
      (pin_direction == Output || pin_direction == INput)) {

    switch (port_id) {
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	c1 f0       	breq	.+48     	; 0x124e <DIO_set_port_direction+0x70>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	11 f1       	breq	.+68     	; 0x126c <DIO_set_port_direction+0x8e>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f5       	brne	.+90     	; 0x128a <DIO_set_port_direction+0xac>

      /******************  PORT A ********************/

    case (PORTA):

      switch (pin_direction) {
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	29 f4       	brne	.+10     	; 0x1246 <DIO_set_port_direction+0x68>
      case (Output):
        DDRA_REG = 0xff;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	80 83       	st	Z, r24
    1244:	32 c0       	rjmp	.+100    	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRA_REG = 0x00;
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	10 82       	st	Z, r1
    124c:	2e c0       	rjmp	.+92     	; 0x12aa <DIO_set_port_direction+0xcc>
      /***********************************************/

      /*******************PORT B***********************/
    case (PORTB):

      switch (pin_direction) {
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	29 f4       	brne	.+10     	; 0x1264 <DIO_set_port_direction+0x86>
      case (Output):
        DDRB_REG = 0xff;
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 83       	st	Z, r24
    1262:	23 c0       	rjmp	.+70     	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRB_REG = 0x00;
    1264:	e7 e3       	ldi	r30, 0x37	; 55
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	10 82       	st	Z, r1
    126a:	1f c0       	rjmp	.+62     	; 0x12aa <DIO_set_port_direction+0xcc>
      /***************************************************/

      /******************PORT C***************************/
    case (PORTC):

      switch (pin_direction) {
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	29 f4       	brne	.+10     	; 0x1282 <DIO_set_port_direction+0xa4>
      case (Output):
        DDRC_REG = 0xff;
    1278:	e4 e3       	ldi	r30, 0x34	; 52
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	80 83       	st	Z, r24
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRC_REG = 0x00;
    1282:	e4 e3       	ldi	r30, 0x34	; 52
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	10 82       	st	Z, r1
    1288:	10 c0       	rjmp	.+32     	; 0x12aa <DIO_set_port_direction+0xcc>
      /****************************************************/

      /********************PORT D*************************/
    default:

      switch (pin_direction) {
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	29 f4       	brne	.+10     	; 0x12a0 <DIO_set_port_direction+0xc2>
      case (Output):
        DDRC_REG = 0xff;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	80 83       	st	Z, r24
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRC_REG = 0x00;
    12a0:	e4 e3       	ldi	r30, 0x34	; 52
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	10 82       	st	Z, r1
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <DIO_set_port_direction+0xcc>

  }
  /****************************************************/
  else {

    Error_state = Return_NOT_Ok;
    12a8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <DI_set_port_value>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DI_set_port_value(uint_8 port_id, uint_8 pin_value) {
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DI_set_port_value+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <DI_set_port_value+0x8>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	8a 83       	std	Y+2, r24	; 0x02
    12cc:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD)) {
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	38 f5       	brcc	.+78     	; 0x1326 <DI_set_port_value+0x6a>

    switch (port_id) {
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3d 83       	std	Y+5, r19	; 0x05
    12e0:	2c 83       	std	Y+4, r18	; 0x04
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	71 f0       	breq	.+28     	; 0x1308 <DI_set_port_value+0x4c>
    12ec:	2c 81       	ldd	r18, Y+4	; 0x04
    12ee:	3d 81       	ldd	r19, Y+5	; 0x05
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	71 f0       	breq	.+28     	; 0x1312 <DI_set_port_value+0x56>
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	79 f4       	brne	.+30     	; 0x131c <DI_set_port_value+0x60>
    case (PORTA):
      PORTA_REG = pin_value;
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	80 83       	st	Z, r24
    1306:	10 c0       	rjmp	.+32     	; 0x1328 <DI_set_port_value+0x6c>
      break;

    case (PORTB):
      PORTB_REG = pin_value;
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	80 83       	st	Z, r24
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <DI_set_port_value+0x6c>
      break;

    case (PORTC):
      PORTC_REG = pin_value;
    1312:	e5 e3       	ldi	r30, 0x35	; 53
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	80 83       	st	Z, r24
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <DI_set_port_value+0x6c>
      break;

    default:
      PORTD_REG = pin_value;
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	80 83       	st	Z, r24
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <DI_set_port_value+0x6c>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    1326:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <DIO_get_port_value>:
uint_8 DIO_get_port_value(uint_8 port_id, uint_8 *return_port_value) {
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_get_port_value+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_get_port_value+0x8>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_get_port_value+0xa>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	7c 83       	std	Y+4, r23	; 0x04
    134c:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (return_port_value != NULL)) {
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	98 f5       	brcc	.+102    	; 0x13be <DIO_get_port_value+0x84>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	79 f1       	breq	.+94     	; 0x13be <DIO_get_port_value+0x84>

    switch (port_id) {
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <DIO_get_port_value+0x5a>
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	91 f0       	breq	.+36     	; 0x13a2 <DIO_get_port_value+0x68>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	a9 f4       	brne	.+42     	; 0x13b0 <DIO_get_port_value+0x76>
    case (PORTA):
      *return_port_value = PINA_REG;
    1386:	e9 e3       	ldi	r30, 0x39	; 57
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	80 83       	st	Z, r24
    1392:	16 c0       	rjmp	.+44     	; 0x13c0 <DIO_get_port_value+0x86>
      break;

    case (PORTB):
      *return_port_value = PINB_REG;
    1394:	e6 e3       	ldi	r30, 0x36	; 54
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	80 83       	st	Z, r24
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <DIO_get_port_value+0x86>
      break;

    case (PORTC):
      *return_port_value = PINC_REG;
    13a2:	e3 e3       	ldi	r30, 0x33	; 51
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	eb 81       	ldd	r30, Y+3	; 0x03
    13aa:	fc 81       	ldd	r31, Y+4	; 0x04
    13ac:	80 83       	st	Z, r24
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <DIO_get_port_value+0x86>
      break;

    default:
      *return_port_value = PIND_REG;
    13b0:	e0 e3       	ldi	r30, 0x30	; 48
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	eb 81       	ldd	r30, Y+3	; 0x03
    13b8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ba:	80 83       	st	Z, r24
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <DIO_get_port_value+0x86>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    13be:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	26 96       	adiw	r28, 0x06	; 6
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <GIE_Enable>:


void (*INT_array[3])(void) = {NULL,NULL,NULL};


void GIE_Enable(void){
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62

    SET_BIT(SREG_GIE_REG,7);
    13dc:	af e5       	ldi	r26, 0x5F	; 95
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ef e5       	ldi	r30, 0x5F	; 95
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 68       	ori	r24, 0x80	; 128
    13e8:	8c 93       	st	X, r24

}
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <GIE_Disable>:

void GIE_Disable(void){
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62

    CLR_BIT(SREG_GIE_REG,7);
    13f8:	af e5       	ldi	r26, 0x5F	; 95
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ef e5       	ldi	r30, 0x5F	; 95
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8f 77       	andi	r24, 0x7F	; 127
    1404:	8c 93       	st	X, r24

}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <set_call_fun>:





uint_8 set_call_fun(uint_8 INT_Num , void(*App_fun)(void)){
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <set_call_fun+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <set_call_fun+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	7c 83       	std	Y+4, r23	; 0x04
    141c:	6b 83       	std	Y+3, r22	; 0x03

    uint_8 Error_state = Return_Ok;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01

    if( (INT_Num<=INT2) &&  (App_fun!=NULL)){
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	88 f4       	brcc	.+34     	; 0x144a <set_call_fun+0x3e>
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f0       	breq	.+26     	; 0x144a <set_call_fun+0x3e>
        INT_array[INT_Num]=App_fun;
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	fc 01       	movw	r30, r24
    143c:	ea 5c       	subi	r30, 0xCA	; 202
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
    1448:	01 c0       	rjmp	.+2      	; 0x144c <set_call_fun+0x40>

    }
    else{
    Error_state=Return_NOT_Ok;
    144a:	19 82       	std	Y+1, r1	; 0x01
    }

return Error_state;
    144c:	89 81       	ldd	r24, Y+1	; 0x01


}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <INT_Enable>:

uint_8 INT_Enable(uint_8 Int_num , uint_8 Int_sensor_control){
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	2b 97       	sbiw	r28, 0x0b	; 11
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	6b 83       	std	Y+3, r22	; 0x03

    uint_8 Error_state=Return_Ok;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01

    if(  (Int_num==INT0||Int_num==INT1||Int_num==INT2)    &&   
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	88 23       	and	r24, r24
    147c:	39 f0       	breq	.+14     	; 0x148c <INT_Enable+0x30>
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	21 f0       	breq	.+8      	; 0x148c <INT_Enable+0x30>
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	09 f0       	breq	.+2      	; 0x148c <INT_Enable+0x30>
    148a:	27 c1       	rjmp	.+590    	; 0x16da <INT_Enable+0x27e>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	51 f0       	breq	.+20     	; 0x14a6 <INT_Enable+0x4a>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	39 f0       	breq	.+14     	; 0x14a6 <INT_Enable+0x4a>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	21 f0       	breq	.+8      	; 0x14a6 <INT_Enable+0x4a>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <INT_Enable+0x4a>
    14a4:	1a c1       	rjmp	.+564    	; 0x16da <INT_Enable+0x27e>
      (Int_sensor_control==RISING_EDGE||  Int_sensor_control==FALLING_EDGE  ||
       Int_sensor_control==LOW_LEVEL ||Int_sensor_control==ANY_LOGICAL_CHANGE)  )
    {

switch (Int_num)
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3b 87       	std	Y+11, r19	; 0x0b
    14ae:	2a 87       	std	Y+10, r18	; 0x0a
    14b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	39 f0       	breq	.+14     	; 0x14c6 <INT_Enable+0x6a>
    14b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    14ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    14bc:	21 30       	cpi	r18, 0x01	; 1
    14be:	31 05       	cpc	r19, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <INT_Enable+0x68>
    14c2:	6e c0       	rjmp	.+220    	; 0x15a0 <INT_Enable+0x144>
    14c4:	da c0       	rjmp	.+436    	; 0x167a <INT_Enable+0x21e>

 /********************************************************************************************/
case (INT0): //1


switch (Int_sensor_control)
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	39 87       	std	Y+9, r19	; 0x09
    14ce:	28 87       	std	Y+8, r18	; 0x08
    14d0:	88 85       	ldd	r24, Y+8	; 0x08
    14d2:	99 85       	ldd	r25, Y+9	; 0x09
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f1       	breq	.+66     	; 0x151c <INT_Enable+0xc0>
    14da:	28 85       	ldd	r18, Y+8	; 0x08
    14dc:	39 85       	ldd	r19, Y+9	; 0x09
    14de:	23 30       	cpi	r18, 0x03	; 3
    14e0:	31 05       	cpc	r19, r1
    14e2:	91 f1       	breq	.+100    	; 0x1548 <INT_Enable+0xec>
    14e4:	88 85       	ldd	r24, Y+8	; 0x08
    14e6:	99 85       	ldd	r25, Y+9	; 0x09
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <INT_Enable+0x94>
    14ee:	42 c0       	rjmp	.+132    	; 0x1574 <INT_Enable+0x118>
{
    case (RISING_EDGE):
        SET_BIT(MCUCR_SENSE_CONTROL_REG,0);
    14f0:	a5 e5       	ldi	r26, 0x55	; 85
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e5 e5       	ldi	r30, 0x55	; 85
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	8c 93       	st	X, r24
        SET_BIT(MCUCR_SENSE_CONTROL_REG,1);
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	82 60       	ori	r24, 0x02	; 2
    150a:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,6);
    150c:	ab e5       	ldi	r26, 0x5B	; 91
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	eb e5       	ldi	r30, 0x5B	; 91
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8c 93       	st	X, r24
    151a:	e0 c0       	rjmp	.+448    	; 0x16dc <INT_Enable+0x280>
    break;

    case  (FALLING_EDGE):
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,0);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8e 7f       	andi	r24, 0xFE	; 254
    1528:	8c 93       	st	X, r24
        SET_BIT(MCUCR_SENSE_CONTROL_REG,1);
    152a:	a5 e5       	ldi	r26, 0x55	; 85
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e5       	ldi	r30, 0x55	; 85
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,6);
    1538:	ab e5       	ldi	r26, 0x5B	; 91
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	eb e5       	ldi	r30, 0x5B	; 91
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 64       	ori	r24, 0x40	; 64
    1544:	8c 93       	st	X, r24
    1546:	ca c0       	rjmp	.+404    	; 0x16dc <INT_Enable+0x280>
    break;

    case  (LOW_LEVEL) :
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,0);
    1548:	a5 e5       	ldi	r26, 0x55	; 85
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e5       	ldi	r30, 0x55	; 85
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	8c 93       	st	X, r24
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,1);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8d 7f       	andi	r24, 0xFD	; 253
    1562:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,6);
    1564:	ab e5       	ldi	r26, 0x5B	; 91
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e5       	ldi	r30, 0x5B	; 91
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 64       	ori	r24, 0x40	; 64
    1570:	8c 93       	st	X, r24
    1572:	b4 c0       	rjmp	.+360    	; 0x16dc <INT_Enable+0x280>
    break;

default: /*ANY_LOGICAL_CHANGE*/

        SET_BIT(MCUCR_SENSE_CONTROL_REG,0);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	8c 93       	st	X, r24
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,1);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,6);
    1590:	ab e5       	ldi	r26, 0x5B	; 91
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e5       	ldi	r30, 0x5B	; 91
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 64       	ori	r24, 0x40	; 64
    159c:	8c 93       	st	X, r24
    159e:	9e c0       	rjmp	.+316    	; 0x16dc <INT_Enable+0x280>

 /********************************************************************************************/
    case( INT1)://2


switch (Int_sensor_control)
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3f 83       	std	Y+7, r19	; 0x07
    15a8:	2e 83       	std	Y+6, r18	; 0x06
    15aa:	8e 81       	ldd	r24, Y+6	; 0x06
    15ac:	9f 81       	ldd	r25, Y+7	; 0x07
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f1       	breq	.+66     	; 0x15f6 <INT_Enable+0x19a>
    15b4:	2e 81       	ldd	r18, Y+6	; 0x06
    15b6:	3f 81       	ldd	r19, Y+7	; 0x07
    15b8:	23 30       	cpi	r18, 0x03	; 3
    15ba:	31 05       	cpc	r19, r1
    15bc:	91 f1       	breq	.+100    	; 0x1622 <INT_Enable+0x1c6>
    15be:	8e 81       	ldd	r24, Y+6	; 0x06
    15c0:	9f 81       	ldd	r25, Y+7	; 0x07
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <INT_Enable+0x16e>
    15c8:	42 c0       	rjmp	.+132    	; 0x164e <INT_Enable+0x1f2>
{
    case (RISING_EDGE):
        SET_BIT(MCUCR_SENSE_CONTROL_REG,2);
    15ca:	a5 e5       	ldi	r26, 0x55	; 85
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e5       	ldi	r30, 0x55	; 85
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	84 60       	ori	r24, 0x04	; 4
    15d6:	8c 93       	st	X, r24
        SET_BIT(MCUCR_SENSE_CONTROL_REG,3);
    15d8:	a5 e5       	ldi	r26, 0x55	; 85
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e5 e5       	ldi	r30, 0x55	; 85
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 60       	ori	r24, 0x08	; 8
    15e4:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,7);
    15e6:	ab e5       	ldi	r26, 0x5B	; 91
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e5       	ldi	r30, 0x5B	; 91
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	8c 93       	st	X, r24
    15f4:	73 c0       	rjmp	.+230    	; 0x16dc <INT_Enable+0x280>
    break;

    case  (FALLING_EDGE):
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,2);
    15f6:	a5 e5       	ldi	r26, 0x55	; 85
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e5       	ldi	r30, 0x55	; 85
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8b 7f       	andi	r24, 0xFB	; 251
    1602:	8c 93       	st	X, r24
        SET_BIT(MCUCR_SENSE_CONTROL_REG,3);
    1604:	a5 e5       	ldi	r26, 0x55	; 85
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e5       	ldi	r30, 0x55	; 85
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	88 60       	ori	r24, 0x08	; 8
    1610:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,7);
    1612:	ab e5       	ldi	r26, 0x5B	; 91
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e5       	ldi	r30, 0x5B	; 91
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	8c 93       	st	X, r24
    1620:	5d c0       	rjmp	.+186    	; 0x16dc <INT_Enable+0x280>
    break;

    case  (LOW_LEVEL) :
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,2);
    1622:	a5 e5       	ldi	r26, 0x55	; 85
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e5       	ldi	r30, 0x55	; 85
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8b 7f       	andi	r24, 0xFB	; 251
    162e:	8c 93       	st	X, r24
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,3);
    1630:	a5 e5       	ldi	r26, 0x55	; 85
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e5       	ldi	r30, 0x55	; 85
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	87 7f       	andi	r24, 0xF7	; 247
    163c:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,7);
    163e:	ab e5       	ldi	r26, 0x5B	; 91
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	eb e5       	ldi	r30, 0x5B	; 91
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	8c 93       	st	X, r24
    164c:	47 c0       	rjmp	.+142    	; 0x16dc <INT_Enable+0x280>
    break;

default: /*ANY_LOGICAL_CHANGE*/

        SET_BIT(MCUCR_SENSE_CONTROL_REG,2);
    164e:	a5 e5       	ldi	r26, 0x55	; 85
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e5       	ldi	r30, 0x55	; 85
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	84 60       	ori	r24, 0x04	; 4
    165a:	8c 93       	st	X, r24
        CLR_BIT(MCUCR_SENSE_CONTROL_REG,3);
    165c:	a5 e5       	ldi	r26, 0x55	; 85
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e5 e5       	ldi	r30, 0x55	; 85
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	87 7f       	andi	r24, 0xF7	; 247
    1668:	8c 93       	st	X, r24
        SET_BIT(GICR_PIE_REG,7);
    166a:	ab e5       	ldi	r26, 0x5B	; 91
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e5       	ldi	r30, 0x5B	; 91
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	8c 93       	st	X, r24
    1678:	31 c0       	rjmp	.+98     	; 0x16dc <INT_Enable+0x280>

    break;//2
 /********************************************************************************************/
default://3  /*INT2*/

switch (Int_sensor_control)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3d 83       	std	Y+5, r19	; 0x05
    1682:	2c 83       	std	Y+4, r18	; 0x04
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	31 f0       	breq	.+12     	; 0x169a <INT_Enable+0x23e>
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <INT_Enable+0x25c>
    1698:	1e c0       	rjmp	.+60     	; 0x16d6 <INT_Enable+0x27a>
{
    case (RISING_EDGE):

    SET_BIT(MCUCSR_SENSE_CONTROL_REG,6);
    169a:	a4 e5       	ldi	r26, 0x54	; 84
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e4 e5       	ldi	r30, 0x54	; 84
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 64       	ori	r24, 0x40	; 64
    16a6:	8c 93       	st	X, r24
    SET_BIT(GICR_PIE_REG,5);
    16a8:	ab e5       	ldi	r26, 0x5B	; 91
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e5       	ldi	r30, 0x5B	; 91
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 62       	ori	r24, 0x20	; 32
    16b4:	8c 93       	st	X, r24
    16b6:	12 c0       	rjmp	.+36     	; 0x16dc <INT_Enable+0x280>
    break;

    case  (FALLING_EDGE):

    CLR_BIT(MCUCSR_SENSE_CONTROL_REG,6);
    16b8:	a4 e5       	ldi	r26, 0x54	; 84
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e4 e5       	ldi	r30, 0x54	; 84
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 7b       	andi	r24, 0xBF	; 191
    16c4:	8c 93       	st	X, r24
    SET_BIT(GICR_PIE_REG,5);
    16c6:	ab e5       	ldi	r26, 0x5B	; 91
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e5       	ldi	r30, 0x5B	; 91
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 62       	ori	r24, 0x20	; 32
    16d2:	8c 93       	st	X, r24
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <INT_Enable+0x280>
    break;

    default:

     Error_state=Return_NOT_Ok;
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <INT_Enable+0x280>
}


    }
    else{
        Error_state=Return_NOT_Ok;
    16da:	19 82       	std	Y+1, r1	; 0x01

    }

return  Error_state;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16de:	2b 96       	adiw	r28, 0x0b	; 11
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <__vector_1>:


void __vector_1 (void)      __attribute__((signal));
void __vector_1 (void) {
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	2f 93       	push	r18
    16fc:	3f 93       	push	r19
    16fe:	4f 93       	push	r20
    1700:	5f 93       	push	r21
    1702:	6f 93       	push	r22
    1704:	7f 93       	push	r23
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	af 93       	push	r26
    170c:	bf 93       	push	r27
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    
    if(INT_array[INT0]!=NULL){
    171a:	80 91 36 01 	lds	r24, 0x0136
    171e:	90 91 37 01 	lds	r25, 0x0137
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	29 f0       	breq	.+10     	; 0x1730 <__vector_1+0x40>
    INT_array[INT0]();
    1726:	e0 91 36 01 	lds	r30, 0x0136
    172a:	f0 91 37 01 	lds	r31, 0x0137
    172e:	09 95       	icall
    }



}
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_2>:
void __vector_2 (void)      __attribute__((signal));
void __vector_2 (void) {
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62

if(INT_array[INT1]!=NULL){
    1780:	80 91 38 01 	lds	r24, 0x0138
    1784:	90 91 39 01 	lds	r25, 0x0139
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	29 f0       	breq	.+10     	; 0x1796 <__vector_2+0x40>
    INT_array[INT1]();
    178c:	e0 91 38 01 	lds	r30, 0x0138
    1790:	f0 91 39 01 	lds	r31, 0x0139
    1794:	09 95       	icall
    }


    
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	ff 91       	pop	r31
    179c:	ef 91       	pop	r30
    179e:	bf 91       	pop	r27
    17a0:	af 91       	pop	r26
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	7f 91       	pop	r23
    17a8:	6f 91       	pop	r22
    17aa:	5f 91       	pop	r21
    17ac:	4f 91       	pop	r20
    17ae:	3f 91       	pop	r19
    17b0:	2f 91       	pop	r18
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <__vector_3>:
void __vector_3 (void)      __attribute__((signal));
void __vector_3 (void) {
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62

if(INT_array[INT2]!=NULL){
    17e6:	80 91 3a 01 	lds	r24, 0x013A
    17ea:	90 91 3b 01 	lds	r25, 0x013B
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	29 f0       	breq	.+10     	; 0x17fc <__vector_3+0x40>
    INT_array[INT2]();
    17f2:	e0 91 3a 01 	lds	r30, 0x013A
    17f6:	f0 91 3b 01 	lds	r31, 0x013B
    17fa:	09 95       	icall
    }


    
}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <LCD_init>:
/*LCD includes*/
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_init(void) {
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	cc 54       	subi	r28, 0x4C	; 76
    1830:	d0 40       	sbci	r29, 0x00	; 0
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	ac e0       	ldi	r26, 0x0C	; 12
    1848:	b2 e4       	ldi	r27, 0x42	; 66
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	8e 01       	movw	r16, r28
    1854:	0b 5b       	subi	r16, 0xBB	; 187
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e7 5b       	subi	r30, 0xB7	; 183
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a ef       	ldi	r20, 0xFA	; 250
    186c:	54 e4       	ldi	r21, 0x44	; 68
    186e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	f8 01       	movw	r30, r16
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1880:	fe 01       	movw	r30, r28
    1882:	eb 5b       	subi	r30, 0xBB	; 187
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	44 f4       	brge	.+16     	; 0x18ae <LCD_init+0x8c>
		__ticks = 1;
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 5b       	subi	r30, 0xBD	; 189
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	64 c0       	rjmp	.+200    	; 0x1976 <LCD_init+0x154>
	else if (__tmp > 65535)
    18ae:	fe 01       	movw	r30, r28
    18b0:	eb 5b       	subi	r30, 0xBB	; 187
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	57 e4       	ldi	r21, 0x47	; 71
    18c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <LCD_init+0xac>
    18cc:	43 c0       	rjmp	.+134    	; 0x1954 <LCD_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	fe 01       	movw	r30, r28
    18d0:	e7 5b       	subi	r30, 0xB7	; 183
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8e 01       	movw	r16, r28
    18ee:	0d 5b       	subi	r16, 0xBD	; 189
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	1f c0       	rjmp	.+62     	; 0x1944 <LCD_init+0x122>
    1906:	fe 01       	movw	r30, r28
    1908:	ef 5b       	subi	r30, 0xBF	; 191
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	88 ec       	ldi	r24, 0xC8	; 200
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1914:	fe 01       	movw	r30, r28
    1916:	ef 5b       	subi	r30, 0xBF	; 191
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_init+0xfc>
    1922:	fe 01       	movw	r30, r28
    1924:	ef 5b       	subi	r30, 0xBF	; 191
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	de 01       	movw	r26, r28
    192e:	ad 5b       	subi	r26, 0xBD	; 189
    1930:	bf 4f       	sbci	r27, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	ed 5b       	subi	r30, 0xBD	; 189
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	9c 93       	st	X, r25
    1942:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	fe 01       	movw	r30, r28
    1946:	ed 5b       	subi	r30, 0xBD	; 189
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	d1 f6       	brne	.-76     	; 0x1906 <LCD_init+0xe4>
    1952:	24 c0       	rjmp	.+72     	; 0x199c <LCD_init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	8e 01       	movw	r16, r28
    1956:	0d 5b       	subi	r16, 0xBD	; 189
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	fe 01       	movw	r30, r28
    195c:	eb 5b       	subi	r30, 0xBB	; 187
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	fe 01       	movw	r30, r28
    1978:	ed 5b       	subi	r30, 0xBD	; 189
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	fe 01       	movw	r30, r28
    1982:	ff 96       	adiw	r30, 0x3f	; 63
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
    1988:	fe 01       	movw	r30, r28
    198a:	ff 96       	adiw	r30, 0x3f	; 63
    198c:	80 81       	ld	r24, Z
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_init+0x16e>
    1994:	fe 01       	movw	r30, r28
    1996:	ff 96       	adiw	r30, 0x3f	; 63
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
#if LCD_MODE == LCD_8_BIT_MODE
  /*8_bit initialization for LCD */

  _delay_ms(35);

  LCD_send_cmnd(0b00111000);
    199c:	88 e3       	ldi	r24, 0x38	; 56
    199e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e2       	ldi	r26, 0x20	; 32
    19a8:	b2 e4       	ldi	r27, 0x42	; 66
    19aa:	8b af       	std	Y+59, r24	; 0x3b
    19ac:	9c af       	std	Y+60, r25	; 0x3c
    19ae:	ad af       	std	Y+61, r26	; 0x3d
    19b0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    19b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    19b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ba:	2b ea       	ldi	r18, 0xAB	; 171
    19bc:	3a ea       	ldi	r19, 0xAA	; 170
    19be:	4a e2       	ldi	r20, 0x2A	; 42
    19c0:	50 e4       	ldi	r21, 0x40	; 64
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8f ab       	std	Y+55, r24	; 0x37
    19cc:	98 af       	std	Y+56, r25	; 0x38
    19ce:	a9 af       	std	Y+57, r26	; 0x39
    19d0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19d2:	6f a9       	ldd	r22, Y+55	; 0x37
    19d4:	78 ad       	ldd	r23, Y+56	; 0x38
    19d6:	89 ad       	ldd	r24, Y+57	; 0x39
    19d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	1c f4       	brge	.+6      	; 0x19f0 <LCD_init+0x1ce>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8e ab       	std	Y+54, r24	; 0x36
    19ee:	91 c0       	rjmp	.+290    	; 0x1b12 <LCD_init+0x2f0>
	else if (__tmp > 255)
    19f0:	6f a9       	ldd	r22, Y+55	; 0x37
    19f2:	78 ad       	ldd	r23, Y+56	; 0x38
    19f4:	89 ad       	ldd	r24, Y+57	; 0x39
    19f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	53 e4       	ldi	r21, 0x43	; 67
    1a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <LCD_init+0x1e8>
    1a08:	7b c0       	rjmp	.+246    	; 0x1b00 <LCD_init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1a0a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a0c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8a ab       	std	Y+50, r24	; 0x32
    1a24:	9b ab       	std	Y+51, r25	; 0x33
    1a26:	ac ab       	std	Y+52, r26	; 0x34
    1a28:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	6a a9       	ldd	r22, Y+50	; 0x32
    1a2c:	7b a9       	ldd	r23, Y+51	; 0x33
    1a2e:	8c a9       	ldd	r24, Y+52	; 0x34
    1a30:	9d a9       	ldd	r25, Y+53	; 0x35
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8e a7       	std	Y+46, r24	; 0x2e
    1a44:	9f a7       	std	Y+47, r25	; 0x2f
    1a46:	a8 ab       	std	Y+48, r26	; 0x30
    1a48:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a4a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a4c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a4e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a50:	99 a9       	ldd	r25, Y+49	; 0x31
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <LCD_init+0x24a>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9d a7       	std	Y+45, r25	; 0x2d
    1a68:	8c a7       	std	Y+44, r24	; 0x2c
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <LCD_init+0x2c8>
	else if (__tmp > 65535)
    1a6c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a6e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a70:	88 a9       	ldd	r24, Y+48	; 0x30
    1a72:	99 a9       	ldd	r25, Y+49	; 0x31
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <LCD_init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	6a a9       	ldd	r22, Y+50	; 0x32
    1a86:	7b a9       	ldd	r23, Y+51	; 0x33
    1a88:	8c a9       	ldd	r24, Y+52	; 0x34
    1a8a:	9d a9       	ldd	r25, Y+53	; 0x35
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9d a7       	std	Y+45, r25	; 0x2d
    1aaa:	8c a7       	std	Y+44, r24	; 0x2c
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <LCD_init+0x2aa>
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9b a7       	std	Y+43, r25	; 0x2b
    1ab4:	8a a7       	std	Y+42, r24	; 0x2a
    1ab6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ab8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_init+0x298>
    1abe:	9b a7       	std	Y+43, r25	; 0x2b
    1ac0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ac4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9d a7       	std	Y+45, r25	; 0x2d
    1aca:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ace:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <LCD_init+0x28c>
    1ad4:	24 c0       	rjmp	.+72     	; 0x1b1e <LCD_init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ad8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ada:	88 a9       	ldd	r24, Y+48	; 0x30
    1adc:	99 a9       	ldd	r25, Y+49	; 0x31
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9d a7       	std	Y+45, r25	; 0x2d
    1ae8:	8c a7       	std	Y+44, r24	; 0x2c
    1aea:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aec:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aee:	99 a7       	std	Y+41, r25	; 0x29
    1af0:	88 a7       	std	Y+40, r24	; 0x28
    1af2:	88 a5       	ldd	r24, Y+40	; 0x28
    1af4:	99 a5       	ldd	r25, Y+41	; 0x29
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_init+0x2d4>
    1afa:	99 a7       	std	Y+41, r25	; 0x29
    1afc:	88 a7       	std	Y+40, r24	; 0x28
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b00:	6f a9       	ldd	r22, Y+55	; 0x37
    1b02:	78 ad       	ldd	r23, Y+56	; 0x38
    1b04:	89 ad       	ldd	r24, Y+57	; 0x39
    1b06:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8e ab       	std	Y+54, r24	; 0x36
    1b12:	8e a9       	ldd	r24, Y+54	; 0x36
    1b14:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b16:	8f a1       	ldd	r24, Y+39	; 0x27
    1b18:	8a 95       	dec	r24
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_init+0x2f6>
    1b1c:	8f a3       	std	Y+39, r24	; 0x27

  _delay_us(40);

  LCD_send_cmnd(0b00001111);
    1b1e:	8f e0       	ldi	r24, 0x0F	; 15
    1b20:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e2       	ldi	r26, 0x20	; 32
    1b2a:	b2 e4       	ldi	r27, 0x42	; 66
    1b2c:	8b a3       	std	Y+35, r24	; 0x23
    1b2e:	9c a3       	std	Y+36, r25	; 0x24
    1b30:	ad a3       	std	Y+37, r26	; 0x25
    1b32:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	2b ea       	ldi	r18, 0xAB	; 171
    1b3e:	3a ea       	ldi	r19, 0xAA	; 170
    1b40:	4a e2       	ldi	r20, 0x2A	; 42
    1b42:	50 e4       	ldi	r21, 0x40	; 64
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b4e:	98 a3       	std	Y+32, r25	; 0x20
    1b50:	a9 a3       	std	Y+33, r26	; 0x21
    1b52:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b54:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b56:	78 a1       	ldd	r23, Y+32	; 0x20
    1b58:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	1c f4       	brge	.+6      	; 0x1b72 <LCD_init+0x350>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b70:	91 c0       	rjmp	.+290    	; 0x1c94 <LCD_init+0x472>
	else if (__tmp > 255)
    1b72:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b74:	78 a1       	ldd	r23, Y+32	; 0x20
    1b76:	89 a1       	ldd	r24, Y+33	; 0x21
    1b78:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	53 e4       	ldi	r21, 0x43	; 67
    1b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	0c f0       	brlt	.+2      	; 0x1b8c <LCD_init+0x36a>
    1b8a:	7b c0       	rjmp	.+246    	; 0x1c82 <LCD_init+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b90:	8d a1       	ldd	r24, Y+37	; 0x25
    1b92:	9e a1       	ldd	r25, Y+38	; 0x26
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8a 8f       	std	Y+26, r24	; 0x1a
    1ba6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ba8:	ac 8f       	std	Y+28, r26	; 0x1c
    1baa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a ef       	ldi	r20, 0xFA	; 250
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8e 8b       	std	Y+22, r24	; 0x16
    1bc6:	9f 8b       	std	Y+23, r25	; 0x17
    1bc8:	a8 8f       	std	Y+24, r26	; 0x18
    1bca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1bcc:	6e 89       	ldd	r22, Y+22	; 0x16
    1bce:	7f 89       	ldd	r23, Y+23	; 0x17
    1bd0:	88 8d       	ldd	r24, Y+24	; 0x18
    1bd2:	99 8d       	ldd	r25, Y+25	; 0x19
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <LCD_init+0x3cc>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9d 8b       	std	Y+21, r25	; 0x15
    1bea:	8c 8b       	std	Y+20, r24	; 0x14
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <LCD_init+0x44a>
	else if (__tmp > 65535)
    1bee:	6e 89       	ldd	r22, Y+22	; 0x16
    1bf0:	7f 89       	ldd	r23, Y+23	; 0x17
    1bf2:	88 8d       	ldd	r24, Y+24	; 0x18
    1bf4:	99 8d       	ldd	r25, Y+25	; 0x19
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <LCD_init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9d 8b       	std	Y+21, r25	; 0x15
    1c2c:	8c 8b       	std	Y+20, r24	; 0x14
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <LCD_init+0x42c>
    1c30:	88 ec       	ldi	r24, 0xC8	; 200
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9b 8b       	std	Y+19, r25	; 0x13
    1c36:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c38:	8a 89       	ldd	r24, Y+18	; 0x12
    1c3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_init+0x41a>
    1c40:	9b 8b       	std	Y+19, r25	; 0x13
    1c42:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8c 89       	ldd	r24, Y+20	; 0x14
    1c46:	9d 89       	ldd	r25, Y+21	; 0x15
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9d 8b       	std	Y+21, r25	; 0x15
    1c4c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c50:	9d 89       	ldd	r25, Y+21	; 0x15
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <LCD_init+0x40e>
    1c56:	24 c0       	rjmp	.+72     	; 0x1ca0 <LCD_init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6e 89       	ldd	r22, Y+22	; 0x16
    1c5a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9d 8b       	std	Y+21, r25	; 0x15
    1c6a:	8c 8b       	std	Y+20, r24	; 0x14
    1c6c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c6e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c70:	99 8b       	std	Y+17, r25	; 0x11
    1c72:	88 8b       	std	Y+16, r24	; 0x10
    1c74:	88 89       	ldd	r24, Y+16	; 0x10
    1c76:	99 89       	ldd	r25, Y+17	; 0x11
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_init+0x456>
    1c7c:	99 8b       	std	Y+17, r25	; 0x11
    1c7e:	88 8b       	std	Y+16, r24	; 0x10
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <LCD_init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c84:	78 a1       	ldd	r23, Y+32	; 0x20
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8e 8f       	std	Y+30, r24	; 0x1e
    1c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9a:	8a 95       	dec	r24
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_init+0x478>
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f

  _delay_us(40);

  LCD_send_cmnd(0b00000001);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a0 e0       	ldi	r26, 0x00	; 0
    1cac:	b0 e4       	ldi	r27, 0x40	; 64
    1cae:	8b 87       	std	Y+11, r24	; 0x0b
    1cb0:	9c 87       	std	Y+12, r25	; 0x0c
    1cb2:	ad 87       	std	Y+13, r26	; 0x0d
    1cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a ef       	ldi	r20, 0xFA	; 250
    1cc4:	54 e4       	ldi	r21, 0x44	; 68
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8f 83       	std	Y+7, r24	; 0x07
    1cd0:	98 87       	std	Y+8, r25	; 0x08
    1cd2:	a9 87       	std	Y+9, r26	; 0x09
    1cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <LCD_init+0x4d6>
		__ticks = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <LCD_init+0x554>
	else if (__tmp > 65535)
    1cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfa:	78 85       	ldd	r23, Y+8	; 0x08
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	4f e7       	ldi	r20, 0x7F	; 127
    1d06:	57 e4       	ldi	r21, 0x47	; 71
    1d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	4c f5       	brge	.+82     	; 0x1d62 <LCD_init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e2       	ldi	r20, 0x20	; 32
    1d1e:	51 e4       	ldi	r21, 0x41	; 65
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <LCD_init+0x536>
    1d3a:	88 ec       	ldi	r24, 0xC8	; 200
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_init+0x524>
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <LCD_init+0x518>
    1d60:	14 c0       	rjmp	.+40     	; 0x1d8a <LCD_init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_init+0x560>
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01

  _delay_ms(2);

  LCD_send_cmnd(0b00000110);
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>

  LCD_send_cmnd(0b00000000);
  LCD_send_cmnd(0b01100000);

#endif
}
    1d90:	c4 5b       	subi	r28, 0xB4	; 180
    1d92:	df 4f       	sbci	r29, 0xFF	; 255
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <LCD_send_cmnd>:
void LCD_send_cmnd(uint_8 cmnd) {
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	69 97       	sbiw	r28, 0x19	; 25
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	89 8f       	std	Y+25, r24	; 0x19

  /*directons of all pins will be set from config file of DIO driver*/

#if LCD_MODE == LCD_8_BIT_MODE

  DI_set_pin_value(LCD_PORT_RS, LCD_PIN_RS,
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	63 e0       	ldi	r22, 0x03	; 3
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_low); /* RS low vlotage to recive cmnd*/

  DI_set_pin_value(LCD_PORT_Rw, LCD_PIN_RW,
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	64 e0       	ldi	r22, 0x04	; 4
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_low); /* RW low vlotage to write on LCD*/

  DI_set_port_value(LCD_PORT_DATA,
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DI_set_port_value>
                    cmnd); /* wrire cmnd on port that is connected with LCD*/

  DI_set_pin_value(
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	65 e0       	ldi	r22, 0x05	; 5
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e8       	ldi	r26, 0x80	; 128
    1dea:	bf e3       	ldi	r27, 0x3F	; 63
    1dec:	8d 8b       	std	Y+21, r24	; 0x15
    1dee:	9e 8b       	std	Y+22, r25	; 0x16
    1df0:	af 8b       	std	Y+23, r26	; 0x17
    1df2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	2b ea       	ldi	r18, 0xAB	; 171
    1dfe:	3a ea       	ldi	r19, 0xAA	; 170
    1e00:	4a e2       	ldi	r20, 0x2A	; 42
    1e02:	50 e4       	ldi	r21, 0x40	; 64
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	ab 8b       	std	Y+19, r26	; 0x13
    1e12:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e14:	69 89       	ldd	r22, Y+17	; 0x11
    1e16:	7a 89       	ldd	r23, Y+18	; 0x12
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e28:	88 23       	and	r24, r24
    1e2a:	1c f4       	brge	.+6      	; 0x1e32 <LCD_send_cmnd+0x8a>
		__ticks = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	88 8b       	std	Y+16, r24	; 0x10
    1e30:	91 c0       	rjmp	.+290    	; 0x1f54 <LCD_send_cmnd+0x1ac>
	else if (__tmp > 255)
    1e32:	69 89       	ldd	r22, Y+17	; 0x11
    1e34:	7a 89       	ldd	r23, Y+18	; 0x12
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	53 e4       	ldi	r21, 0x43	; 67
    1e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	0c f0       	brlt	.+2      	; 0x1e4c <LCD_send_cmnd+0xa4>
    1e4a:	7b c0       	rjmp	.+246    	; 0x1f42 <LCD_send_cmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a e7       	ldi	r20, 0x7A	; 122
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8c 87       	std	Y+12, r24	; 0x0c
    1e66:	9d 87       	std	Y+13, r25	; 0x0d
    1e68:	ae 87       	std	Y+14, r26	; 0x0e
    1e6a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e70:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e72:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a ef       	ldi	r20, 0xFA	; 250
    1e7a:	54 e4       	ldi	r21, 0x44	; 68
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	88 87       	std	Y+8, r24	; 0x08
    1e86:	99 87       	std	Y+9, r25	; 0x09
    1e88:	aa 87       	std	Y+10, r26	; 0x0a
    1e8a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e8c:	68 85       	ldd	r22, Y+8	; 0x08
    1e8e:	79 85       	ldd	r23, Y+9	; 0x09
    1e90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_send_cmnd+0x106>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9f 83       	std	Y+7, r25	; 0x07
    1eaa:	8e 83       	std	Y+6, r24	; 0x06
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_send_cmnd+0x184>
	else if (__tmp > 65535)
    1eae:	68 85       	ldd	r22, Y+8	; 0x08
    1eb0:	79 85       	ldd	r23, Y+9	; 0x09
    1eb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_send_cmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ecc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9f 83       	std	Y+7, r25	; 0x07
    1eec:	8e 83       	std	Y+6, r24	; 0x06
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_send_cmnd+0x166>
    1ef0:	88 ec       	ldi	r24, 0xC8	; 200
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9d 83       	std	Y+5, r25	; 0x05
    1ef6:	8c 83       	std	Y+4, r24	; 0x04
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_send_cmnd+0x154>
    1f00:	9d 83       	std	Y+5, r25	; 0x05
    1f02:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8e 81       	ldd	r24, Y+6	; 0x06
    1f06:	9f 81       	ldd	r25, Y+7	; 0x07
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9f 83       	std	Y+7, r25	; 0x07
    1f0c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f10:	9f 81       	ldd	r25, Y+7	; 0x07
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_send_cmnd+0x148>
    1f16:	24 c0       	rjmp	.+72     	; 0x1f60 <LCD_send_cmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	68 85       	ldd	r22, Y+8	; 0x08
    1f1a:	79 85       	ldd	r23, Y+9	; 0x09
    1f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9f 83       	std	Y+7, r25	; 0x07
    1f2a:	8e 83       	std	Y+6, r24	; 0x06
    1f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f30:	9b 83       	std	Y+3, r25	; 0x03
    1f32:	8a 83       	std	Y+2, r24	; 0x02
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	9b 81       	ldd	r25, Y+3	; 0x03
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_send_cmnd+0x190>
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LCD_send_cmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f42:	69 89       	ldd	r22, Y+17	; 0x11
    1f44:	7a 89       	ldd	r23, Y+18	; 0x12
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	88 8b       	std	Y+16, r24	; 0x10
    1f54:	88 89       	ldd	r24, Y+16	; 0x10
    1f56:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	8a 95       	dec	r24
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_send_cmnd+0x1b2>
    1f5e:	89 83       	std	Y+1, r24	; 0x01
      LCD_PORT_EN, LCD_PIN_EN,
      Pin_high); /*active enable of LCD to make LCD read the cmnd or data*/

  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	65 e0       	ldi	r22, 0x05	; 5
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low);
      /*cancel enable of LCD */ /*cancel enable of LCD */

#endif
}
    1f6a:	69 96       	adiw	r28, 0x19	; 25
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <LCD_write_char>:
void LCD_write_char(uint_8 data) {
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	69 97       	sbiw	r28, 0x19	; 25
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_MODE == LCD_8_BIT_MODE

  DI_set_pin_value(LCD_PORT_RS, LCD_PIN_RS,
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	63 e0       	ldi	r22, 0x03	; 3
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_high); /* RS high vlotage to recive data*/

  DI_set_pin_value(LCD_PORT_Rw, LCD_PIN_RW,
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	64 e0       	ldi	r22, 0x04	; 4
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_low); /* RW low vlotage to write on LCD*/

  DI_set_port_value(LCD_PORT_DATA,
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1faa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DI_set_port_value>
                    data); /* wrire cmnd on port that is connected with LCD*/

  DI_set_pin_value(
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	65 e0       	ldi	r22, 0x05	; 5
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	8d 8b       	std	Y+21, r24	; 0x15
    1fc2:	9e 8b       	std	Y+22, r25	; 0x16
    1fc4:	af 8b       	std	Y+23, r26	; 0x17
    1fc6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fca:	7e 89       	ldd	r23, Y+22	; 0x16
    1fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fce:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd0:	2b ea       	ldi	r18, 0xAB	; 171
    1fd2:	3a ea       	ldi	r19, 0xAA	; 170
    1fd4:	4a e2       	ldi	r20, 0x2A	; 42
    1fd6:	50 e4       	ldi	r21, 0x40	; 64
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	89 8b       	std	Y+17, r24	; 0x11
    1fe2:	9a 8b       	std	Y+18, r25	; 0x12
    1fe4:	ab 8b       	std	Y+19, r26	; 0x13
    1fe6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fe8:	69 89       	ldd	r22, Y+17	; 0x11
    1fea:	7a 89       	ldd	r23, Y+18	; 0x12
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	1c f4       	brge	.+6      	; 0x2006 <LCD_write_char+0x8a>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	88 8b       	std	Y+16, r24	; 0x10
    2004:	91 c0       	rjmp	.+290    	; 0x2128 <LCD_write_char+0x1ac>
	else if (__tmp > 255)
    2006:	69 89       	ldd	r22, Y+17	; 0x11
    2008:	7a 89       	ldd	r23, Y+18	; 0x12
    200a:	8b 89       	ldd	r24, Y+19	; 0x13
    200c:	9c 89       	ldd	r25, Y+20	; 0x14
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	53 e4       	ldi	r21, 0x43	; 67
    2016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	0c f0       	brlt	.+2      	; 0x2020 <LCD_write_char+0xa4>
    201e:	7b c0       	rjmp	.+246    	; 0x2116 <LCD_write_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2020:	6d 89       	ldd	r22, Y+21	; 0x15
    2022:	7e 89       	ldd	r23, Y+22	; 0x16
    2024:	8f 89       	ldd	r24, Y+23	; 0x17
    2026:	98 8d       	ldd	r25, Y+24	; 0x18
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a e7       	ldi	r20, 0x7A	; 122
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8c 87       	std	Y+12, r24	; 0x0c
    203a:	9d 87       	std	Y+13, r25	; 0x0d
    203c:	ae 87       	std	Y+14, r26	; 0x0e
    203e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6c 85       	ldd	r22, Y+12	; 0x0c
    2042:	7d 85       	ldd	r23, Y+13	; 0x0d
    2044:	8e 85       	ldd	r24, Y+14	; 0x0e
    2046:	9f 85       	ldd	r25, Y+15	; 0x0f
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	54 e4       	ldi	r21, 0x44	; 68
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	88 87       	std	Y+8, r24	; 0x08
    205a:	99 87       	std	Y+9, r25	; 0x09
    205c:	aa 87       	std	Y+10, r26	; 0x0a
    205e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2060:	68 85       	ldd	r22, Y+8	; 0x08
    2062:	79 85       	ldd	r23, Y+9	; 0x09
    2064:	8a 85       	ldd	r24, Y+10	; 0x0a
    2066:	9b 85       	ldd	r25, Y+11	; 0x0b
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <LCD_write_char+0x106>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9f 83       	std	Y+7, r25	; 0x07
    207e:	8e 83       	std	Y+6, r24	; 0x06
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <LCD_write_char+0x184>
	else if (__tmp > 65535)
    2082:	68 85       	ldd	r22, Y+8	; 0x08
    2084:	79 85       	ldd	r23, Y+9	; 0x09
    2086:	8a 85       	ldd	r24, Y+10	; 0x0a
    2088:	9b 85       	ldd	r25, Y+11	; 0x0b
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <LCD_write_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6c 85       	ldd	r22, Y+12	; 0x0c
    209c:	7d 85       	ldd	r23, Y+13	; 0x0d
    209e:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9f 83       	std	Y+7, r25	; 0x07
    20c0:	8e 83       	std	Y+6, r24	; 0x06
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <LCD_write_char+0x166>
    20c4:	88 ec       	ldi	r24, 0xC8	; 200
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9d 83       	std	Y+5, r25	; 0x05
    20ca:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	9d 81       	ldd	r25, Y+5	; 0x05
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_write_char+0x154>
    20d4:	9d 83       	std	Y+5, r25	; 0x05
    20d6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8e 81       	ldd	r24, Y+6	; 0x06
    20da:	9f 81       	ldd	r25, Y+7	; 0x07
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9f 83       	std	Y+7, r25	; 0x07
    20e0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8e 81       	ldd	r24, Y+6	; 0x06
    20e4:	9f 81       	ldd	r25, Y+7	; 0x07
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <LCD_write_char+0x148>
    20ea:	24 c0       	rjmp	.+72     	; 0x2134 <LCD_write_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	68 85       	ldd	r22, Y+8	; 0x08
    20ee:	79 85       	ldd	r23, Y+9	; 0x09
    20f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9f 83       	std	Y+7, r25	; 0x07
    20fe:	8e 83       	std	Y+6, r24	; 0x06
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	9f 81       	ldd	r25, Y+7	; 0x07
    2104:	9b 83       	std	Y+3, r25	; 0x03
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_write_char+0x190>
    2110:	9b 83       	std	Y+3, r25	; 0x03
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_write_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2116:	69 89       	ldd	r22, Y+17	; 0x11
    2118:	7a 89       	ldd	r23, Y+18	; 0x12
    211a:	8b 89       	ldd	r24, Y+19	; 0x13
    211c:	9c 89       	ldd	r25, Y+20	; 0x14
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	88 8b       	std	Y+16, r24	; 0x10
    2128:	88 89       	ldd	r24, Y+16	; 0x10
    212a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	8a 95       	dec	r24
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_write_char+0x1b2>
    2132:	89 83       	std	Y+1, r24	; 0x01
      LCD_PORT_EN, LCD_PIN_EN,
      Pin_high); /*active enable of LCD to make LCD read the cmnd or data*/

  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	65 e0       	ldi	r22, 0x05	; 5
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */

#endif
}
    213e:	69 96       	adiw	r28, 0x19	; 25
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <LCD_write_string>:

void LCD_write_string(uint_8 *ptr) {
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	61 97       	sbiw	r28, 0x11	; 17
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	99 8b       	std	Y+17, r25	; 0x11
    2166:	88 8b       	std	Y+16, r24	; 0x10

  uint_8 counter = 0;
    2168:	1f 86       	std	Y+15, r1	; 0x0f
  if (ptr != NULL) {
    216a:	88 89       	ldd	r24, Y+16	; 0x10
    216c:	99 89       	ldd	r25, Y+17	; 0x11
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	09 f4       	brne	.+2      	; 0x2174 <LCD_write_string+0x24>
    2172:	8d c0       	rjmp	.+282    	; 0x228e <LCD_write_string+0x13e>
    2174:	80 c0       	rjmp	.+256    	; 0x2276 <LCD_write_string+0x126>
    while (ptr[counter] != '\0') {

      LCD_write_char(ptr[counter]);
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	88 89       	ldd	r24, Y+16	; 0x10
    217e:	99 89       	ldd	r25, Y+17	; 0x11
    2180:	fc 01       	movw	r30, r24
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	80 81       	ld	r24, Z
    2188:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

      counter++;
    218c:	8f 85       	ldd	r24, Y+15	; 0x0f
    218e:	8f 5f       	subi	r24, 0xFF	; 255
    2190:	8f 87       	std	Y+15, r24	; 0x0f
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e2       	ldi	r26, 0x20	; 32
    2198:	b1 e4       	ldi	r27, 0x41	; 65
    219a:	8b 87       	std	Y+11, r24	; 0x0b
    219c:	9c 87       	std	Y+12, r25	; 0x0c
    219e:	ad 87       	std	Y+13, r26	; 0x0d
    21a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a ef       	ldi	r20, 0xFA	; 250
    21b0:	54 e4       	ldi	r21, 0x44	; 68
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	8f 83       	std	Y+7, r24	; 0x07
    21bc:	98 87       	std	Y+8, r25	; 0x08
    21be:	a9 87       	std	Y+9, r26	; 0x09
    21c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e8       	ldi	r20, 0x80	; 128
    21d0:	5f e3       	ldi	r21, 0x3F	; 63
    21d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d6:	88 23       	and	r24, r24
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <LCD_write_string+0x94>
		__ticks = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	3f c0       	rjmp	.+126    	; 0x2262 <LCD_write_string+0x112>
	else if (__tmp > 65535)
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	3f ef       	ldi	r19, 0xFF	; 255
    21f0:	4f e7       	ldi	r20, 0x7F	; 127
    21f2:	57 e4       	ldi	r21, 0x47	; 71
    21f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	4c f5       	brge	.+82     	; 0x224e <LCD_write_string+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	8d 85       	ldd	r24, Y+13	; 0x0d
    2202:	9e 85       	ldd	r25, Y+14	; 0x0e
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	0f c0       	rjmp	.+30     	; 0x2244 <LCD_write_string+0xf4>
    2226:	88 ec       	ldi	r24, 0xC8	; 200
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_write_string+0xe2>
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	69 f7       	brne	.-38     	; 0x2226 <LCD_write_string+0xd6>
    224c:	14 c0       	rjmp	.+40     	; 0x2276 <LCD_write_string+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD_write_string+0x11e>
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01

void LCD_write_string(uint_8 *ptr) {

  uint_8 counter = 0;
  if (ptr != NULL) {
    while (ptr[counter] != '\0') {
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	88 89       	ldd	r24, Y+16	; 0x10
    227e:	99 89       	ldd	r25, Y+17	; 0x11
    2280:	fc 01       	movw	r30, r24
    2282:	e2 0f       	add	r30, r18
    2284:	f3 1f       	adc	r31, r19
    2286:	80 81       	ld	r24, Z
    2288:	88 23       	and	r24, r24
    228a:	09 f0       	breq	.+2      	; 0x228e <LCD_write_string+0x13e>
    228c:	74 cf       	rjmp	.-280    	; 0x2176 <LCD_write_string+0x26>

      counter++;
      _delay_ms(10);
    }
  }
}
    228e:	61 96       	adiw	r28, 0x11	; 17
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <LCD_move_address_counter_of_DDRAM>:

uint_8 LCD_move_address_counter_of_DDRAM(uint_8 line_num, uint_8 location_num) {
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <LCD_move_address_counter_of_DDRAM+0x6>
    22a6:	0f 92       	push	r0
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	8a 83       	std	Y+2, r24	; 0x02
    22ae:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
  if ((line_num == LCD_LINE1 || line_num == LCD_LINE2) &&
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	19 f0       	breq	.+6      	; 0x22c0 <LCD_move_address_counter_of_DDRAM+0x20>
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	99 f4       	brne	.+38     	; 0x22e6 <LCD_move_address_counter_of_DDRAM+0x46>
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	88 32       	cpi	r24, 0x28	; 40
    22c4:	80 f4       	brcc	.+32     	; 0x22e6 <LCD_move_address_counter_of_DDRAM+0x46>
      (location_num <= 39)) {

    switch (line_num) {
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	29 f4       	brne	.+10     	; 0x22dc <LCD_move_address_counter_of_DDRAM+0x3c>

    case LCD_LINE1:
      LCD_send_cmnd(0x80 + location_num);
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	80 58       	subi	r24, 0x80	; 128
    22d6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <LCD_move_address_counter_of_DDRAM+0x48>
      break;

    default:
      LCD_send_cmnd(0xc0 + location_num);
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	80 54       	subi	r24, 0x40	; 64
    22e0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <LCD_move_address_counter_of_DDRAM+0x48>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    22e6:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <LCD_write_special_char>:

uint_8 LCD_write_special_char(uint_8 char_num, uint_8 *pattern, uint_8 line_num, uint_8 loaction) {
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	2c 97       	sbiw	r28, 0x0c	; 12
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	8c 83       	std	Y+4, r24	; 0x04
    230c:	7e 83       	std	Y+6, r23	; 0x06
    230e:	6d 83       	std	Y+5, r22	; 0x05
    2310:	4f 83       	std	Y+7, r20	; 0x07
    2312:	28 87       	std	Y+8, r18	; 0x08


  uint_8 Error_state = Return_Ok;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	8b 83       	std	Y+3, r24	; 0x03

  if ((char_num <= 7) && (line_num == 1 || line_num == 2) && (loaction <= 39)) {
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	88 30       	cpi	r24, 0x08	; 8
    231c:	08 f0       	brcs	.+2      	; 0x2320 <LCD_write_special_char+0x2a>
    231e:	c1 c0       	rjmp	.+386    	; 0x24a2 <LCD_write_special_char+0x1ac>
    2320:	8f 81       	ldd	r24, Y+7	; 0x07
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	21 f0       	breq	.+8      	; 0x232e <LCD_write_special_char+0x38>
    2326:	8f 81       	ldd	r24, Y+7	; 0x07
    2328:	82 30       	cpi	r24, 0x02	; 2
    232a:	09 f0       	breq	.+2      	; 0x232e <LCD_write_special_char+0x38>
    232c:	ba c0       	rjmp	.+372    	; 0x24a2 <LCD_write_special_char+0x1ac>
    232e:	88 85       	ldd	r24, Y+8	; 0x08
    2330:	88 32       	cpi	r24, 0x28	; 40
    2332:	08 f0       	brcs	.+2      	; 0x2336 <LCD_write_special_char+0x40>
    2334:	b6 c0       	rjmp	.+364    	; 0x24a2 <LCD_write_special_char+0x1ac>
    switch (char_num) {
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3c 87       	std	Y+12, r19	; 0x0c
    233e:	2b 87       	std	Y+11, r18	; 0x0b
    2340:	8b 85       	ldd	r24, Y+11	; 0x0b
    2342:	9c 85       	ldd	r25, Y+12	; 0x0c
    2344:	83 30       	cpi	r24, 0x03	; 3
    2346:	91 05       	cpc	r25, r1
    2348:	81 f1       	breq	.+96     	; 0x23aa <LCD_write_special_char+0xb4>
    234a:	2b 85       	ldd	r18, Y+11	; 0x0b
    234c:	3c 85       	ldd	r19, Y+12	; 0x0c
    234e:	24 30       	cpi	r18, 0x04	; 4
    2350:	31 05       	cpc	r19, r1
    2352:	7c f4       	brge	.+30     	; 0x2372 <LCD_write_special_char+0x7c>
    2354:	8b 85       	ldd	r24, Y+11	; 0x0b
    2356:	9c 85       	ldd	r25, Y+12	; 0x0c
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	91 05       	cpc	r25, r1
    235c:	f1 f0       	breq	.+60     	; 0x239a <LCD_write_special_char+0xa4>
    235e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2360:	3c 85       	ldd	r19, Y+12	; 0x0c
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	ec f4       	brge	.+58     	; 0x23a2 <LCD_write_special_char+0xac>
    2368:	8b 85       	ldd	r24, Y+11	; 0x0b
    236a:	9c 85       	ldd	r25, Y+12	; 0x0c
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	89 f0       	breq	.+34     	; 0x2392 <LCD_write_special_char+0x9c>
    2370:	2c c0       	rjmp	.+88     	; 0x23ca <LCD_write_special_char+0xd4>
    2372:	2b 85       	ldd	r18, Y+11	; 0x0b
    2374:	3c 85       	ldd	r19, Y+12	; 0x0c
    2376:	25 30       	cpi	r18, 0x05	; 5
    2378:	31 05       	cpc	r19, r1
    237a:	f9 f0       	breq	.+62     	; 0x23ba <LCD_write_special_char+0xc4>
    237c:	8b 85       	ldd	r24, Y+11	; 0x0b
    237e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2380:	85 30       	cpi	r24, 0x05	; 5
    2382:	91 05       	cpc	r25, r1
    2384:	b4 f0       	brlt	.+44     	; 0x23b2 <LCD_write_special_char+0xbc>
    2386:	2b 85       	ldd	r18, Y+11	; 0x0b
    2388:	3c 85       	ldd	r19, Y+12	; 0x0c
    238a:	26 30       	cpi	r18, 0x06	; 6
    238c:	31 05       	cpc	r19, r1
    238e:	c9 f0       	breq	.+50     	; 0x23c2 <LCD_write_special_char+0xcc>
    2390:	1c c0       	rjmp	.+56     	; 0x23ca <LCD_write_special_char+0xd4>

      /* set address counter in CGRAM*/

    case char0:
      LCD_send_cmnd(0b01000000);
    2392:	80 e4       	ldi	r24, 0x40	; 64
    2394:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    2398:	1b c0       	rjmp	.+54     	; 0x23d0 <LCD_write_special_char+0xda>
      break;

    case char1:
      LCD_send_cmnd(0b01001000);
    239a:	88 e4       	ldi	r24, 0x48	; 72
    239c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    23a0:	17 c0       	rjmp	.+46     	; 0x23d0 <LCD_write_special_char+0xda>
      break;

    case char2:
      LCD_send_cmnd(0b01010000);
    23a2:	80 e5       	ldi	r24, 0x50	; 80
    23a4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    23a8:	13 c0       	rjmp	.+38     	; 0x23d0 <LCD_write_special_char+0xda>
      break;
    case char3:
      LCD_send_cmnd(0b01011000);
    23aa:	88 e5       	ldi	r24, 0x58	; 88
    23ac:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_write_special_char+0xda>
      break;

    case char4:
      LCD_send_cmnd(0b01100000);
    23b2:	80 e6       	ldi	r24, 0x60	; 96
    23b4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    23b8:	0b c0       	rjmp	.+22     	; 0x23d0 <LCD_write_special_char+0xda>
      break;
    case char5:
      LCD_send_cmnd(0b01101000);
    23ba:	88 e6       	ldi	r24, 0x68	; 104
    23bc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <LCD_write_special_char+0xda>
      break;

    case char6:
      LCD_send_cmnd(0b01110000);
    23c2:	80 e7       	ldi	r24, 0x70	; 112
    23c4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <LCD_write_special_char+0xda>
      break;

    default:
      LCD_send_cmnd(0b01111000);
    23ca:	88 e7       	ldi	r24, 0x78	; 120
    23cc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
      break;
    }

    /*wtite special char in CGRAM*/

    for (int i = 0; i < 8; i++) {
    23d0:	1a 82       	std	Y+2, r1	; 0x02
    23d2:	19 82       	std	Y+1, r1	; 0x01
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_write_special_char+0xfe>
      LCD_write_char(pattern[i]);
    23d6:	29 81       	ldd	r18, Y+1	; 0x01
    23d8:	3a 81       	ldd	r19, Y+2	; 0x02
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	fc 01       	movw	r30, r24
    23e0:	e2 0f       	add	r30, r18
    23e2:	f3 1f       	adc	r31, r19
    23e4:	80 81       	ld	r24, Z
    23e6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
      break;
    }

    /*wtite special char in CGRAM*/

    for (int i = 0; i < 8; i++) {
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	88 30       	cpi	r24, 0x08	; 8
    23fa:	91 05       	cpc	r25, r1
    23fc:	64 f3       	brlt	.-40     	; 0x23d6 <LCD_write_special_char+0xe0>
      LCD_write_char(pattern[i]);
    }
    /*return address counter to DDRAM*/
    LCD_move_address_counter_of_DDRAM(line_num, loaction);
    23fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2400:	68 85       	ldd	r22, Y+8	; 0x08
    2402:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

    switch (char_num) {
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3a 87       	std	Y+10, r19	; 0x0a
    240e:	29 87       	std	Y+9, r18	; 0x09
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	83 30       	cpi	r24, 0x03	; 3
    2416:	91 05       	cpc	r25, r1
    2418:	81 f1       	breq	.+96     	; 0x247a <LCD_write_special_char+0x184>
    241a:	29 85       	ldd	r18, Y+9	; 0x09
    241c:	3a 85       	ldd	r19, Y+10	; 0x0a
    241e:	24 30       	cpi	r18, 0x04	; 4
    2420:	31 05       	cpc	r19, r1
    2422:	7c f4       	brge	.+30     	; 0x2442 <LCD_write_special_char+0x14c>
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	91 05       	cpc	r25, r1
    242c:	f1 f0       	breq	.+60     	; 0x246a <LCD_write_special_char+0x174>
    242e:	29 85       	ldd	r18, Y+9	; 0x09
    2430:	3a 85       	ldd	r19, Y+10	; 0x0a
    2432:	22 30       	cpi	r18, 0x02	; 2
    2434:	31 05       	cpc	r19, r1
    2436:	ec f4       	brge	.+58     	; 0x2472 <LCD_write_special_char+0x17c>
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	89 f0       	breq	.+34     	; 0x2462 <LCD_write_special_char+0x16c>
    2440:	2c c0       	rjmp	.+88     	; 0x249a <LCD_write_special_char+0x1a4>
    2442:	29 85       	ldd	r18, Y+9	; 0x09
    2444:	3a 85       	ldd	r19, Y+10	; 0x0a
    2446:	25 30       	cpi	r18, 0x05	; 5
    2448:	31 05       	cpc	r19, r1
    244a:	f9 f0       	breq	.+62     	; 0x248a <LCD_write_special_char+0x194>
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	85 30       	cpi	r24, 0x05	; 5
    2452:	91 05       	cpc	r25, r1
    2454:	b4 f0       	brlt	.+44     	; 0x2482 <LCD_write_special_char+0x18c>
    2456:	29 85       	ldd	r18, Y+9	; 0x09
    2458:	3a 85       	ldd	r19, Y+10	; 0x0a
    245a:	26 30       	cpi	r18, 0x06	; 6
    245c:	31 05       	cpc	r19, r1
    245e:	c9 f0       	breq	.+50     	; 0x2492 <LCD_write_special_char+0x19c>
    2460:	1c c0       	rjmp	.+56     	; 0x249a <LCD_write_special_char+0x1a4>

      /* show the required char in CGRAM */

    case char0:
      LCD_write_char(0);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2468:	1d c0       	rjmp	.+58     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    case char1:
      LCD_write_char(1);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2470:	19 c0       	rjmp	.+50     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    case char2:
      LCD_write_char(2);
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2478:	15 c0       	rjmp	.+42     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    case char3:
      LCD_write_char(3);
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2480:	11 c0       	rjmp	.+34     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    case char4:
      LCD_write_char(4);
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2488:	0d c0       	rjmp	.+26     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    case char5:
      LCD_write_char(5);
    248a:	85 e0       	ldi	r24, 0x05	; 5
    248c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2490:	09 c0       	rjmp	.+18     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    case char6:
      LCD_write_char(6);
    2492:	86 e0       	ldi	r24, 0x06	; 6
    2494:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <LCD_write_special_char+0x1ae>
      break;

    default:
      LCD_write_char(7);
    249a:	87 e0       	ldi	r24, 0x07	; 7
    249c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <LCD_write_special_char+0x1ae>

  }

  else {

    Error_state = Return_NOT_Ok;
    24a2:	1b 82       	std	Y+3, r1	; 0x03
  }

  return Error_state;
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24a6:	2c 96       	adiw	r28, 0x0c	; 12
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <KeyPad_Return_key>:
const uint_8 Keypad_shape[4][4] = KPD_FRAM;

/***************************************************************************************************/
/***************************************************************************************************/

uint_8 KeyPad_Return_key(uint_8 *returned_key) {
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	65 97       	sbiw	r28, 0x15	; 21
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	9d 8b       	std	Y+21, r25	; 0x15
    24ce:	8c 8b       	std	Y+20, r24	; 0x14

	*returned_key = 0xff;
    24d0:	ec 89       	ldd	r30, Y+20	; 0x14
    24d2:	fd 89       	ldd	r31, Y+21	; 0x15
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	80 83       	st	Z, r24
  uint_8 flag = 0;
    24d8:	1a 8a       	std	Y+18, r1	; 0x12

  uint_8 Error_state = Return_Ok;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	89 8b       	std	Y+17, r24	; 0x11

  uint_8 Returned_pin_value = 0;
    24de:	1b 8a       	std	Y+19, r1	; 0x13

  //DI_set_port_value(PORTA, 0xff); /******** will set all pins from DIO configer file   *******/

  if (returned_key != NULL) {
    24e0:	8c 89       	ldd	r24, Y+20	; 0x14
    24e2:	9d 89       	ldd	r25, Y+21	; 0x15
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	09 f4       	brne	.+2      	; 0x24ea <KeyPad_Return_key+0x32>
    24e8:	ec c0       	rjmp	.+472    	; 0x26c2 <KeyPad_Return_key+0x20a>

    for (uint_8 row_num = 0; row_num < 4; row_num++) {
    24ea:	18 8a       	std	Y+16, r1	; 0x10
    24ec:	e5 c0       	rjmp	.+458    	; 0x26b8 <KeyPad_Return_key+0x200>

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_low);
    24ee:	88 89       	ldd	r24, Y+16	; 0x10
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	fc 01       	movw	r30, r24
    24f6:	e3 5e       	subi	r30, 0xE3	; 227
    24f8:	fe 4f       	sbci	r31, 0xFE	; 254
    24fa:	90 81       	ld	r25, Z
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	69 2f       	mov	r22, r25
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
     
      for (uint_8 colum_num = 0; colum_num < 4; colum_num++) {
    2506:	1f 86       	std	Y+15, r1	; 0x0f
    2508:	c1 c0       	rjmp	.+386    	; 0x268c <KeyPad_Return_key+0x1d4>

        DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value);
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	fc 01       	movw	r30, r24
    2512:	ef 5d       	subi	r30, 0xDF	; 223
    2514:	fe 4f       	sbci	r31, 0xFE	; 254
    2516:	90 81       	ld	r25, Z
    2518:	9e 01       	movw	r18, r28
    251a:	2d 5e       	subi	r18, 0xED	; 237
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	69 2f       	mov	r22, r25
    2522:	a9 01       	movw	r20, r18
    2524:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_get_pin_value>
                          
        if (Returned_pin_value == Pin_low) {
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	88 23       	and	r24, r24
    252c:	09 f0       	breq	.+2      	; 0x2530 <KeyPad_Return_key+0x78>
    252e:	ab c0       	rjmp	.+342    	; 0x2686 <KeyPad_Return_key+0x1ce>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a0 ea       	ldi	r26, 0xA0	; 160
    2536:	b1 e4       	ldi	r27, 0x41	; 65
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	9c 87       	std	Y+12, r25	; 0x0c
    253c:	ad 87       	std	Y+13, r26	; 0x0d
    253e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8f 83       	std	Y+7, r24	; 0x07
    255a:	98 87       	std	Y+8, r25	; 0x08
    255c:	a9 87       	std	Y+9, r26	; 0x09
    255e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	2c f4       	brge	.+10     	; 0x2582 <KeyPad_Return_key+0xca>
		__ticks = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <KeyPad_Return_key+0x148>
	else if (__tmp > 65535)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	4c f5       	brge	.+82     	; 0x25ec <KeyPad_Return_key+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <KeyPad_Return_key+0x12a>
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <KeyPad_Return_key+0x118>
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <KeyPad_Return_key+0x10c>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <KeyPad_Return_key+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <KeyPad_Return_key+0x154>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
           1- read the pins again to update its value
           2-if its value still low that mean you still press on the key
           so we using while loop to update the value of the pin until iys value chang to high
           */

         /*1-*/ DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value); 
    2614:	8f 85       	ldd	r24, Y+15	; 0x0f
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	fc 01       	movw	r30, r24
    261c:	ef 5d       	subi	r30, 0xDF	; 223
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	90 81       	ld	r25, Z
    2622:	9e 01       	movw	r18, r28
    2624:	2d 5e       	subi	r18, 0xED	; 237
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	69 2f       	mov	r22, r25
    262c:	a9 01       	movw	r20, r18
    262e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_get_pin_value>
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <KeyPad_Return_key+0x19a>
                            

         /*2-*/ while (Returned_pin_value == Pin_low) /* comment*/
          {

            DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num], &Returned_pin_value); /* comment*/
    2634:	8f 85       	ldd	r24, Y+15	; 0x0f
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	fc 01       	movw	r30, r24
    263c:	ef 5d       	subi	r30, 0xDF	; 223
    263e:	fe 4f       	sbci	r31, 0xFE	; 254
    2640:	90 81       	ld	r25, Z
    2642:	9e 01       	movw	r18, r28
    2644:	2d 5e       	subi	r18, 0xED	; 237
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	69 2f       	mov	r22, r25
    264c:	a9 01       	movw	r20, r18
    264e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_get_pin_value>
           */

         /*1-*/ DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value); 
                            

         /*2-*/ while (Returned_pin_value == Pin_low) /* comment*/
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	88 23       	and	r24, r24
    2656:	71 f3       	breq	.-36     	; 0x2634 <KeyPad_Return_key+0x17c>

            DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num], &Returned_pin_value); /* comment*/
                             
          }

          *returned_key = Keypad_shape[row_num][colum_num];
    2658:	88 89       	ldd	r24, Y+16	; 0x10
    265a:	48 2f       	mov	r20, r24
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	ca 01       	movw	r24, r20
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	fc 01       	movw	r30, r24
    2674:	eb 5d       	subi	r30, 0xDB	; 219
    2676:	fe 4f       	sbci	r31, 0xFE	; 254
    2678:	80 81       	ld	r24, Z
    267a:	ec 89       	ldd	r30, Y+20	; 0x14
    267c:	fd 89       	ldd	r31, Y+21	; 0x15
    267e:	80 83       	st	Z, r24

          flag = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	8a 8b       	std	Y+18, r24	; 0x12
    2684:	07 c0       	rjmp	.+14     	; 0x2694 <KeyPad_Return_key+0x1dc>

    for (uint_8 row_num = 0; row_num < 4; row_num++) {

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_low);
     
      for (uint_8 colum_num = 0; colum_num < 4; colum_num++) {
    2686:	8f 85       	ldd	r24, Y+15	; 0x0f
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	8f 87       	std	Y+15, r24	; 0x0f
    268c:	8f 85       	ldd	r24, Y+15	; 0x0f
    268e:	84 30       	cpi	r24, 0x04	; 4
    2690:	08 f4       	brcc	.+2      	; 0x2694 <KeyPad_Return_key+0x1dc>
    2692:	3b cf       	rjmp	.-394    	; 0x250a <KeyPad_Return_key+0x52>

          break;
        }
      }

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_high);
    2694:	88 89       	ldd	r24, Y+16	; 0x10
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	fc 01       	movw	r30, r24
    269c:	e3 5e       	subi	r30, 0xE3	; 227
    269e:	fe 4f       	sbci	r31, 0xFE	; 254
    26a0:	90 81       	ld	r25, Z
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	69 2f       	mov	r22, r25
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

      if (flag == 1) {
    26ac:	8a 89       	ldd	r24, Y+18	; 0x12
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	49 f0       	breq	.+18     	; 0x26c4 <KeyPad_Return_key+0x20c>

  //DI_set_port_value(PORTA, 0xff); /******** will set all pins from DIO configer file   *******/

  if (returned_key != NULL) {

    for (uint_8 row_num = 0; row_num < 4; row_num++) {
    26b2:	88 89       	ldd	r24, Y+16	; 0x10
    26b4:	8f 5f       	subi	r24, 0xFF	; 255
    26b6:	88 8b       	std	Y+16, r24	; 0x10
    26b8:	88 89       	ldd	r24, Y+16	; 0x10
    26ba:	84 30       	cpi	r24, 0x04	; 4
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <KeyPad_Return_key+0x208>
    26be:	17 cf       	rjmp	.-466    	; 0x24ee <KeyPad_Return_key+0x36>
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <KeyPad_Return_key+0x20c>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    26c2:	19 8a       	std	Y+17, r1	; 0x11
  }

  return Error_state;
    26c4:	89 89       	ldd	r24, Y+17	; 0x11
}
    26c6:	65 96       	adiw	r28, 0x15	; 21
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <main>:
  uint_8 test1 = 0;
  uint_8 test2 = 0;

  void toggle_Led (void);

int main() {
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62

	 GIE_Enable();
    26e0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GIE_Enable>

	 set_call_fun(INT2,toggle_Led);
    26e4:	2f e7       	ldi	r18, 0x7F	; 127
    26e6:	33 e1       	ldi	r19, 0x13	; 19
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	b9 01       	movw	r22, r18
    26ec:	0e 94 06 0a 	call	0x140c	; 0x140c <set_call_fun>

	 INT_Enable(INT2,FALLING_EDGE);
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	62 e0       	ldi	r22, 0x02	; 2
    26f4:	0e 94 2e 0a 	call	0x145c	; 0x145c <INT_Enable>
	 DIO_INTI();
    26f8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_INTI>
    26fc:	ff cf       	rjmp	.-2      	; 0x26fc <main+0x24>

000026fe <toggle_Led>:

	 while(1);

	return 0;
}
 void toggle_Led (void){
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	ca 54       	subi	r28, 0x4A	; 74
    270c:	d0 40       	sbci	r29, 0x00	; 0
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61





	 	 LCD_init();
    2718:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_init>

	 	 LCD_write_string("Enter Passward");
    271c:	80 e6       	ldi	r24, 0x60	; 96
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
	 	 LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>
    272c:	9e c4       	rjmp	.+2364   	; 0x306a <toggle_Led+0x96c>
  // LCD_move_address_counter_of_DDRAM(LCD_LINE2,0);

  while (counter < 4) /*to scan the keypad continousily*/
  {

    KeyPad_Return_key(&key);
    272e:	8c e3       	ldi	r24, 0x3C	; 60
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <KeyPad_Return_key>

    if (key != 0xff) /*to check if you press any key or not*/
    2736:	80 91 3c 01 	lds	r24, 0x013C
    273a:	8f 3f       	cpi	r24, 0xFF	; 255
    273c:	09 f4       	brne	.+2      	; 0x2740 <toggle_Led+0x42>
    273e:	95 c4       	rjmp	.+2346   	; 0x306a <toggle_Led+0x96c>
    {
      if (key == CLAER_LCD) {
    2740:	80 91 3c 01 	lds	r24, 0x013C
    2744:	84 34       	cpi	r24, 0x44	; 68
    2746:	31 f4       	brne	.+12     	; 0x2754 <toggle_Led+0x56>

        LCD_send_cmnd(0b00000001);
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
        counter = 0;
    274e:	10 92 3d 01 	sts	0x013D, r1
    2752:	8b c4       	rjmp	.+2326   	; 0x306a <toggle_Led+0x96c>
        continue;
      }

      // LCD_write_char(key);

      LCD_write_special_char(char2, pattern, LCD_LINE2, counter);
    2754:	90 91 3d 01 	lds	r25, 0x013D
    2758:	25 e0       	ldi	r18, 0x05	; 5
    275a:	31 e0       	ldi	r19, 0x01	; 1
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	b9 01       	movw	r22, r18
    2760:	42 e0       	ldi	r20, 0x02	; 2
    2762:	29 2f       	mov	r18, r25
    2764:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

      passwawrd[counter] = key;
    2768:	80 91 3d 01 	lds	r24, 0x013D
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	20 91 3c 01 	lds	r18, 0x013C
    2774:	fc 01       	movw	r30, r24
    2776:	e2 5c       	subi	r30, 0xC2	; 194
    2778:	fe 4f       	sbci	r31, 0xFE	; 254
    277a:	20 83       	st	Z, r18

      counter++;
    277c:	80 91 3d 01 	lds	r24, 0x013D
    2780:	8f 5f       	subi	r24, 0xFF	; 255
    2782:	80 93 3d 01 	sts	0x013D, r24

      if (counter == 4) {
    2786:	80 91 3d 01 	lds	r24, 0x013D
    278a:	84 30       	cpi	r24, 0x04	; 4
    278c:	09 f0       	breq	.+2      	; 0x2790 <toggle_Led+0x92>
    278e:	6d c4       	rjmp	.+2266   	; 0x306a <toggle_Led+0x96c>

        if ((passwawrd[0] == '1') && (passwawrd[1] == '2') &&
    2790:	80 91 3e 01 	lds	r24, 0x013E
    2794:	81 33       	cpi	r24, 0x31	; 49
    2796:	09 f0       	breq	.+2      	; 0x279a <toggle_Led+0x9c>
    2798:	34 c4       	rjmp	.+2152   	; 0x3002 <toggle_Led+0x904>
    279a:	80 91 3f 01 	lds	r24, 0x013F
    279e:	82 33       	cpi	r24, 0x32	; 50
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <toggle_Led+0xa6>
    27a2:	2f c4       	rjmp	.+2142   	; 0x3002 <toggle_Led+0x904>
    27a4:	80 91 40 01 	lds	r24, 0x0140
    27a8:	83 33       	cpi	r24, 0x33	; 51
    27aa:	09 f0       	breq	.+2      	; 0x27ae <toggle_Led+0xb0>
    27ac:	2a c4       	rjmp	.+2132   	; 0x3002 <toggle_Led+0x904>
    27ae:	80 91 41 01 	lds	r24, 0x0141
    27b2:	84 33       	cpi	r24, 0x34	; 52
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <toggle_Led+0xba>
    27b6:	25 c4       	rjmp	.+2122   	; 0x3002 <toggle_Led+0x904>
            (passwawrd[2] == '3') && (passwawrd[3] == '4')) {

          DI_set_pin_value(PORTB, PIN0, Pin_high);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

          LCD_move_address_counter_of_DDRAM(LCD_LINE1, 0);
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

          LCD_send_cmnd(0b00000001);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>

          LCD_write_string("welcome To Motor");
    27d0:	8f e6       	ldi	r24, 0x6F	; 111
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

          LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

          LCD_write_string("Desh Board");
    27e0:	80 e8       	ldi	r24, 0x80	; 128
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
    27e8:	fe 01       	movw	r30, r28
    27ea:	ed 5b       	subi	r30, 0xBD	; 189
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a8 ec       	ldi	r26, 0xC8	; 200
    27f4:	b2 e4       	ldi	r27, 0x42	; 66
    27f6:	80 83       	st	Z, r24
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	a2 83       	std	Z+2, r26	; 0x02
    27fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	8e 01       	movw	r16, r28
    2800:	01 5c       	subi	r16, 0xC1	; 193
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	fe 01       	movw	r30, r28
    2806:	ed 5b       	subi	r30, 0xBD	; 189
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4a ef       	ldi	r20, 0xFA	; 250
    2818:	54 e4       	ldi	r21, 0x44	; 68
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	f8 01       	movw	r30, r16
    2824:	80 83       	st	Z, r24
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	a2 83       	std	Z+2, r26	; 0x02
    282a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282c:	fe 01       	movw	r30, r28
    282e:	ff 96       	adiw	r30, 0x3f	; 63
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <toggle_Led+0x154>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9e af       	std	Y+62, r25	; 0x3e
    284e:	8d af       	std	Y+61, r24	; 0x3d
    2850:	46 c0       	rjmp	.+140    	; 0x28de <toggle_Led+0x1e0>
	else if (__tmp > 65535)
    2852:	fe 01       	movw	r30, r28
    2854:	ff 96       	adiw	r30, 0x3f	; 63
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	64 f5       	brge	.+88     	; 0x28c6 <toggle_Led+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	fe 01       	movw	r30, r28
    2870:	ed 5b       	subi	r30, 0xBD	; 189
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9e af       	std	Y+62, r25	; 0x3e
    289a:	8d af       	std	Y+61, r24	; 0x3d
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <toggle_Led+0x1be>
    289e:	88 ec       	ldi	r24, 0xC8	; 200
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9c af       	std	Y+60, r25	; 0x3c
    28a4:	8b af       	std	Y+59, r24	; 0x3b
    28a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    28a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <toggle_Led+0x1ac>
    28ae:	9c af       	std	Y+60, r25	; 0x3c
    28b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	9e af       	std	Y+62, r25	; 0x3e
    28ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    28be:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	69 f7       	brne	.-38     	; 0x289e <toggle_Led+0x1a0>
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <toggle_Led+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	fe 01       	movw	r30, r28
    28c8:	ff 96       	adiw	r30, 0x3f	; 63
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e af       	std	Y+62, r25	; 0x3e
    28dc:	8d af       	std	Y+61, r24	; 0x3d
    28de:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e2:	9a af       	std	Y+58, r25	; 0x3a
    28e4:	89 af       	std	Y+57, r24	; 0x39
    28e6:	89 ad       	ldd	r24, Y+57	; 0x39
    28e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <toggle_Led+0x1ec>
    28ee:	9a af       	std	Y+58, r25	; 0x3a
    28f0:	89 af       	std	Y+57, r24	; 0x39

          _delay_ms(100);

          while (1) {

            LCD_send_cmnd(0b00000001);
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>

            LCD_move_address_counter_of_DDRAM(LCD_LINE1, 0);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

            LCD_write_char('1');
    2900:	81 e3       	ldi	r24, 0x31	; 49
    2902:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

            LCD_write_special_char(char1, dash, LCD_LINE1, 1);
    2906:	2d e0       	ldi	r18, 0x0D	; 13
    2908:	31 e0       	ldi	r19, 0x01	; 1
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	b9 01       	movw	r22, r18
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	21 e0       	ldi	r18, 0x01	; 1
    2912:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

            LCD_write_string("DCMotor");
    2916:	8b e8       	ldi	r24, 0x8B	; 139
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

            LCD_move_address_counter_of_DDRAM(LCD_LINE1, 10);
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	6a e0       	ldi	r22, 0x0A	; 10
    2922:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

            LCD_write_char('3');
    2926:	83 e3       	ldi	r24, 0x33	; 51
    2928:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

            LCD_write_special_char(char1, dash, LCD_LINE1, 11);
    292c:	2d e0       	ldi	r18, 0x0D	; 13
    292e:	31 e0       	ldi	r19, 0x01	; 1
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	b9 01       	movw	r22, r18
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	2b e0       	ldi	r18, 0x0B	; 11
    2938:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

            LCD_write_string("EXIT");
    293c:	83 e9       	ldi	r24, 0x93	; 147
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

            LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

            LCD_write_char('2');
    294c:	82 e3       	ldi	r24, 0x32	; 50
    294e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

            LCD_write_special_char(char1, dash, LCD_LINE2, 1);
    2952:	2d e0       	ldi	r18, 0x0D	; 13
    2954:	31 e0       	ldi	r19, 0x01	; 1
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	b9 01       	movw	r22, r18
    295a:	42 e0       	ldi	r20, 0x02	; 2
    295c:	21 e0       	ldi	r18, 0x01	; 1
    295e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

            LCD_write_string("Stepper Motor");
    2962:	88 e9       	ldi	r24, 0x98	; 152
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	ac e8       	ldi	r26, 0x8C	; 140
    2970:	b2 e4       	ldi	r27, 0x42	; 66
    2972:	8d ab       	std	Y+53, r24	; 0x35
    2974:	9e ab       	std	Y+54, r25	; 0x36
    2976:	af ab       	std	Y+55, r26	; 0x37
    2978:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	6d a9       	ldd	r22, Y+53	; 0x35
    297c:	7e a9       	ldd	r23, Y+54	; 0x36
    297e:	8f a9       	ldd	r24, Y+55	; 0x37
    2980:	98 ad       	ldd	r25, Y+56	; 0x38
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	4a ef       	ldi	r20, 0xFA	; 250
    2988:	54 e4       	ldi	r21, 0x44	; 68
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	89 ab       	std	Y+49, r24	; 0x31
    2994:	9a ab       	std	Y+50, r25	; 0x32
    2996:	ab ab       	std	Y+51, r26	; 0x33
    2998:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    299a:	69 a9       	ldd	r22, Y+49	; 0x31
    299c:	7a a9       	ldd	r23, Y+50	; 0x32
    299e:	8b a9       	ldd	r24, Y+51	; 0x33
    29a0:	9c a9       	ldd	r25, Y+52	; 0x34
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	2c f4       	brge	.+10     	; 0x29bc <toggle_Led+0x2be>
		__ticks = 1;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	98 ab       	std	Y+48, r25	; 0x30
    29b8:	8f a7       	std	Y+47, r24	; 0x2f
    29ba:	3f c0       	rjmp	.+126    	; 0x2a3a <toggle_Led+0x33c>
	else if (__tmp > 65535)
    29bc:	69 a9       	ldd	r22, Y+49	; 0x31
    29be:	7a a9       	ldd	r23, Y+50	; 0x32
    29c0:	8b a9       	ldd	r24, Y+51	; 0x33
    29c2:	9c a9       	ldd	r25, Y+52	; 0x34
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	4c f5       	brge	.+82     	; 0x2a26 <toggle_Led+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d4:	6d a9       	ldd	r22, Y+53	; 0x35
    29d6:	7e a9       	ldd	r23, Y+54	; 0x36
    29d8:	8f a9       	ldd	r24, Y+55	; 0x37
    29da:	98 ad       	ldd	r25, Y+56	; 0x38
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e2       	ldi	r20, 0x20	; 32
    29e2:	51 e4       	ldi	r21, 0x41	; 65
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	98 ab       	std	Y+48, r25	; 0x30
    29fa:	8f a7       	std	Y+47, r24	; 0x2f
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <toggle_Led+0x31e>
    29fe:	88 ec       	ldi	r24, 0xC8	; 200
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	9e a7       	std	Y+46, r25	; 0x2e
    2a04:	8d a7       	std	Y+45, r24	; 0x2d
    2a06:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a08:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <toggle_Led+0x30c>
    2a0e:	9e a7       	std	Y+46, r25	; 0x2e
    2a10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a14:	98 a9       	ldd	r25, Y+48	; 0x30
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	98 ab       	std	Y+48, r25	; 0x30
    2a1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	69 f7       	brne	.-38     	; 0x29fe <toggle_Led+0x300>
    2a24:	14 c0       	rjmp	.+40     	; 0x2a4e <toggle_Led+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	69 a9       	ldd	r22, Y+49	; 0x31
    2a28:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	98 ab       	std	Y+48, r25	; 0x30
    2a38:	8f a7       	std	Y+47, r24	; 0x2f
    2a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a3e:	9c a7       	std	Y+44, r25	; 0x2c
    2a40:	8b a7       	std	Y+43, r24	; 0x2b
    2a42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a44:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <toggle_Led+0x348>
    2a4a:	9c a7       	std	Y+44, r25	; 0x2c
    2a4c:	8b a7       	std	Y+43, r24	; 0x2b
  /****************************************************************************************************************************************/
  /****************************************************************************************************************************************/

            while (1) {

              test1 = 0;
    2a4e:	10 92 46 01 	sts	0x0146, r1
              test = 0;
    2a52:	10 92 45 01 	sts	0x0145, r1

              KeyPad_Return_key(&key);
    2a56:	8c e3       	ldi	r24, 0x3C	; 60
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <KeyPad_Return_key>
              if (key != 0xff) { /*to check if you press any key or not*/
    2a5e:	80 91 3c 01 	lds	r24, 0x013C
    2a62:	8f 3f       	cpi	r24, 0xFF	; 255
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <toggle_Led+0x36a>
    2a66:	bb c2       	rjmp	.+1398   	; 0x2fde <toggle_Led+0x8e0>


/*********************************************************/if (key == '1') /************************************************************************/
    2a68:	80 91 3c 01 	lds	r24, 0x013C
    2a6c:	81 33       	cpi	r24, 0x31	; 49
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <toggle_Led+0x374>
    2a70:	f0 c0       	rjmp	.+480    	; 0x2c52 <toggle_Led+0x554>
                {

                  LCD_send_cmnd(0b00000001);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>

                  LCD_move_address_counter_of_DDRAM(LCD_LINE1, 0);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

                  LCD_write_char('1');
    2a80:	81 e3       	ldi	r24, 0x31	; 49
    2a82:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

                  LCD_write_special_char(char1, dash, LCD_LINE1, 1);
    2a86:	2d e0       	ldi	r18, 0x0D	; 13
    2a88:	31 e0       	ldi	r19, 0x01	; 1
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	21 e0       	ldi	r18, 0x01	; 1
    2a92:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

                  LCD_write_string("Rotate CW");
    2a96:	86 ea       	ldi	r24, 0xA6	; 166
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

                  LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

                  LCD_write_char('2');
    2aa6:	82 e3       	ldi	r24, 0x32	; 50
    2aa8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

                  LCD_write_special_char(char1, dash, LCD_LINE2, 1);
    2aac:	2d e0       	ldi	r18, 0x0D	; 13
    2aae:	31 e0       	ldi	r19, 0x01	; 1
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	42 e0       	ldi	r20, 0x02	; 2
    2ab6:	21 e0       	ldi	r18, 0x01	; 1
    2ab8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

                  LCD_write_string("Rotate CCW");
    2abc:	80 eb       	ldi	r24, 0xB0	; 176
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

                  while (1) {

                    KeyPad_Return_key(&key);
    2ac4:	8c e3       	ldi	r24, 0x3C	; 60
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <KeyPad_Return_key>

                    if (key != 0xff) { /*to check if you press any key or not*/
    2acc:	80 91 3c 01 	lds	r24, 0x013C
    2ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <toggle_Led+0x3d8>
    2ad4:	b8 c0       	rjmp	.+368    	; 0x2c46 <toggle_Led+0x548>

                      switch (key) {
    2ad6:	80 91 3c 01 	lds	r24, 0x013C
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	2b 96       	adiw	r28, 0x0b	; 11
    2ae0:	3f af       	std	Y+63, r19	; 0x3f
    2ae2:	2e af       	std	Y+62, r18	; 0x3e
    2ae4:	2b 97       	sbiw	r28, 0x0b	; 11
    2ae6:	2b 96       	adiw	r28, 0x0b	; 11
    2ae8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aec:	2b 97       	sbiw	r28, 0x0b	; 11
    2aee:	81 33       	cpi	r24, 0x31	; 49
    2af0:	91 05       	cpc	r25, r1
    2af2:	41 f0       	breq	.+16     	; 0x2b04 <toggle_Led+0x406>
    2af4:	2b 96       	adiw	r28, 0x0b	; 11
    2af6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2af8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2afa:	2b 97       	sbiw	r28, 0x0b	; 11
    2afc:	e2 33       	cpi	r30, 0x32	; 50
    2afe:	f1 05       	cpc	r31, r1
    2b00:	89 f0       	breq	.+34     	; 0x2b24 <toggle_Led+0x426>
    2b02:	20 c0       	rjmp	.+64     	; 0x2b44 <toggle_Led+0x446>

                      case ('1'):
                        DI_set_pin_value(PORTC, PIN1, Pin_low);
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                        DI_set_pin_value(PORTC, PIN0, Pin_high);
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                        test1++;
    2b18:	80 91 46 01 	lds	r24, 0x0146
    2b1c:	8f 5f       	subi	r24, 0xFF	; 255
    2b1e:	80 93 46 01 	sts	0x0146, r24
    2b22:	91 c0       	rjmp	.+290    	; 0x2c46 <toggle_Led+0x548>
                        break;

                      case ('2'):

                        DI_set_pin_value(PORTC, PIN0, Pin_low);
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                        DI_set_pin_value(PORTC, PIN1, Pin_high);
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	41 e0       	ldi	r20, 0x01	; 1
    2b34:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                        test1++;
    2b38:	80 91 46 01 	lds	r24, 0x0146
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	80 93 46 01 	sts	0x0146, r24
    2b42:	81 c0       	rjmp	.+258    	; 0x2c46 <toggle_Led+0x548>
                        break;

                      default:

                        LCD_send_cmnd(0b00000001);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
                        LCD_write_string("Error");
    2b4a:	8b eb       	ldi	r24, 0xBB	; 187
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	ac e8       	ldi	r26, 0x8C	; 140
    2b58:	b2 e4       	ldi	r27, 0x42	; 66
    2b5a:	8f a3       	std	Y+39, r24	; 0x27
    2b5c:	98 a7       	std	Y+40, r25	; 0x28
    2b5e:	a9 a7       	std	Y+41, r26	; 0x29
    2b60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6f a1       	ldd	r22, Y+39	; 0x27
    2b64:	78 a5       	ldd	r23, Y+40	; 0x28
    2b66:	89 a5       	ldd	r24, Y+41	; 0x29
    2b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	8b a3       	std	Y+35, r24	; 0x23
    2b7c:	9c a3       	std	Y+36, r25	; 0x24
    2b7e:	ad a3       	std	Y+37, r26	; 0x25
    2b80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b82:	6b a1       	ldd	r22, Y+35	; 0x23
    2b84:	7c a1       	ldd	r23, Y+36	; 0x24
    2b86:	8d a1       	ldd	r24, Y+37	; 0x25
    2b88:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <toggle_Led+0x4a6>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9a a3       	std	Y+34, r25	; 0x22
    2ba0:	89 a3       	std	Y+33, r24	; 0x21
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <toggle_Led+0x524>
	else if (__tmp > 65535)
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <toggle_Led+0x510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <toggle_Led+0x506>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	98 a3       	std	Y+32, r25	; 0x20
    2bec:	8f 8f       	std	Y+31, r24	; 0x1f
    2bee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bf0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <toggle_Led+0x4f4>
    2bf6:	98 a3       	std	Y+32, r25	; 0x20
    2bf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9a a3       	std	Y+34, r25	; 0x22
    2c02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	89 a1       	ldd	r24, Y+33	; 0x21
    2c06:	9a a1       	ldd	r25, Y+34	; 0x22
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <toggle_Led+0x4e8>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <toggle_Led+0x538>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c10:	7c a1       	ldd	r23, Y+36	; 0x24
    2c12:	8d a1       	ldd	r24, Y+37	; 0x25
    2c14:	9e a1       	ldd	r25, Y+38	; 0x26
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9a a3       	std	Y+34, r25	; 0x22
    2c20:	89 a3       	std	Y+33, r24	; 0x21
    2c22:	89 a1       	ldd	r24, Y+33	; 0x21
    2c24:	9a a1       	ldd	r25, Y+34	; 0x22
    2c26:	9e 8f       	std	Y+30, r25	; 0x1e
    2c28:	8d 8f       	std	Y+29, r24	; 0x1d
    2c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <toggle_Led+0x530>
    2c32:	9e 8f       	std	Y+30, r25	; 0x1e
    2c34:	8d 8f       	std	Y+29, r24	; 0x1d
                        _delay_ms(70);
                        LCD_send_cmnd(0b00000001);
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
                        test1++;
    2c3c:	80 91 46 01 	lds	r24, 0x0146
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	80 93 46 01 	sts	0x0146, r24

                        break;
                      }
                    }

                    if (test1 != 0) {
    2c46:	80 91 46 01 	lds	r24, 0x0146
    2c4a:	88 23       	and	r24, r24
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <toggle_Led+0x552>
    2c4e:	c7 c1       	rjmp	.+910    	; 0x2fde <toggle_Led+0x8e0>
    2c50:	39 cf       	rjmp	.-398    	; 0x2ac4 <toggle_Led+0x3c6>

 /****************************************************************************************************************************************************/

 /****************************************************************************************************************************************************/

                else if (key == '2') {
    2c52:	80 91 3c 01 	lds	r24, 0x013C
    2c56:	82 33       	cpi	r24, 0x32	; 50
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <toggle_Led+0x55e>
    2c5a:	87 c1       	rjmp	.+782    	; 0x2f6a <toggle_Led+0x86c>

                  LCD_send_cmnd(0b00000001);
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>

                  LCD_write_char('1');
    2c62:	81 e3       	ldi	r24, 0x31	; 49
    2c64:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

                  LCD_write_special_char(char1, dash, LCD_LINE1, 1);
    2c68:	2d e0       	ldi	r18, 0x0D	; 13
    2c6a:	31 e0       	ldi	r19, 0x01	; 1
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	b9 01       	movw	r22, r18
    2c70:	41 e0       	ldi	r20, 0x01	; 1
    2c72:	21 e0       	ldi	r18, 0x01	; 1
    2c74:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

                  LCD_write_string("Enter Angle");
    2c78:	81 ec       	ldi	r24, 0xC1	; 193
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

                  LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

                  while (1) {

                    KeyPad_Return_key(&key);
    2c88:	8c e3       	ldi	r24, 0x3C	; 60
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <KeyPad_Return_key>
                    degree = key;
    2c90:	80 91 3c 01 	lds	r24, 0x013C
    2c94:	88 2f       	mov	r24, r24
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	90 93 44 01 	sts	0x0144, r25
    2c9c:	80 93 43 01 	sts	0x0143, r24

                    if (key != 0xff) {
    2ca0:	80 91 3c 01 	lds	r24, 0x013C
    2ca4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca6:	81 f3       	breq	.-32     	; 0x2c88 <toggle_Led+0x58a>

                      LCD_write_char(key);
    2ca8:	80 91 3c 01 	lds	r24, 0x013C
    2cac:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	a8 e4       	ldi	r26, 0x48	; 72
    2cb6:	b2 e4       	ldi	r27, 0x42	; 66
    2cb8:	89 8f       	std	Y+25, r24	; 0x19
    2cba:	9a 8f       	std	Y+26, r25	; 0x1a
    2cbc:	ab 8f       	std	Y+27, r26	; 0x1b
    2cbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	4a ef       	ldi	r20, 0xFA	; 250
    2cce:	54 e4       	ldi	r21, 0x44	; 68
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	8d 8b       	std	Y+21, r24	; 0x15
    2cda:	9e 8b       	std	Y+22, r25	; 0x16
    2cdc:	af 8b       	std	Y+23, r26	; 0x17
    2cde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	2c f4       	brge	.+10     	; 0x2d02 <toggle_Led+0x604>
		__ticks = 1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9c 8b       	std	Y+20, r25	; 0x14
    2cfe:	8b 8b       	std	Y+19, r24	; 0x13
    2d00:	3f c0       	rjmp	.+126    	; 0x2d80 <toggle_Led+0x682>
	else if (__tmp > 65535)
    2d02:	6d 89       	ldd	r22, Y+21	; 0x15
    2d04:	7e 89       	ldd	r23, Y+22	; 0x16
    2d06:	8f 89       	ldd	r24, Y+23	; 0x17
    2d08:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	3f ef       	ldi	r19, 0xFF	; 255
    2d0e:	4f e7       	ldi	r20, 0x7F	; 127
    2d10:	57 e4       	ldi	r21, 0x47	; 71
    2d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d16:	18 16       	cp	r1, r24
    2d18:	4c f5       	brge	.+82     	; 0x2d6c <toggle_Led+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9c 8b       	std	Y+20, r25	; 0x14
    2d40:	8b 8b       	std	Y+19, r24	; 0x13
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <toggle_Led+0x664>
    2d44:	88 ec       	ldi	r24, 0xC8	; 200
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9a 8b       	std	Y+18, r25	; 0x12
    2d4a:	89 8b       	std	Y+17, r24	; 0x11
    2d4c:	89 89       	ldd	r24, Y+17	; 0x11
    2d4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <toggle_Led+0x652>
    2d54:	9a 8b       	std	Y+18, r25	; 0x12
    2d56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d58:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9c 8b       	std	Y+20, r25	; 0x14
    2d60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	8b 89       	ldd	r24, Y+19	; 0x13
    2d64:	9c 89       	ldd	r25, Y+20	; 0x14
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	69 f7       	brne	.-38     	; 0x2d44 <toggle_Led+0x646>
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <toggle_Led+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d70:	8f 89       	ldd	r24, Y+23	; 0x17
    2d72:	98 8d       	ldd	r25, Y+24	; 0x18
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9c 8b       	std	Y+20, r25	; 0x14
    2d7e:	8b 8b       	std	Y+19, r24	; 0x13
    2d80:	8b 89       	ldd	r24, Y+19	; 0x13
    2d82:	9c 89       	ldd	r25, Y+20	; 0x14
    2d84:	98 8b       	std	Y+16, r25	; 0x10
    2d86:	8f 87       	std	Y+15, r24	; 0x0f
    2d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8a:	98 89       	ldd	r25, Y+16	; 0x10
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <toggle_Led+0x68e>
    2d90:	98 8b       	std	Y+16, r25	; 0x10
    2d92:	8f 87       	std	Y+15, r24	; 0x0f

                      break;
                    }
                  }

                  LCD_send_cmnd(0b00000001);
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
                  LCD_move_address_counter_of_DDRAM(LCD_LINE1, 0);
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	60 e0       	ldi	r22, 0x00	; 0
    2d9e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>
                  LCD_write_char('1');
    2da2:	81 e3       	ldi	r24, 0x31	; 49
    2da4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

                  LCD_write_special_char(char1, dash, LCD_LINE1, 1);
    2da8:	2d e0       	ldi	r18, 0x0D	; 13
    2daa:	31 e0       	ldi	r19, 0x01	; 1
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	b9 01       	movw	r22, r18
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	21 e0       	ldi	r18, 0x01	; 1
    2db4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

                  LCD_write_string("Rotate CW");
    2db8:	86 ea       	ldi	r24, 0xA6	; 166
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

                  LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_move_address_counter_of_DDRAM>

                  LCD_write_char('2');
    2dc8:	82 e3       	ldi	r24, 0x32	; 50
    2dca:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_write_char>

                  LCD_write_special_char(char1, dash, LCD_LINE2, 1);
    2dce:	2d e0       	ldi	r18, 0x0D	; 13
    2dd0:	31 e0       	ldi	r19, 0x01	; 1
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	b9 01       	movw	r22, r18
    2dd6:	42 e0       	ldi	r20, 0x02	; 2
    2dd8:	21 e0       	ldi	r18, 0x01	; 1
    2dda:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>

                  LCD_write_string("Rotate CCW");
    2dde:	80 eb       	ldi	r24, 0xB0	; 176
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

                  while (1) {

                    KeyPad_Return_key(&key);
    2de6:	8c e3       	ldi	r24, 0x3C	; 60
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <KeyPad_Return_key>

                    if (key != 0xff) { /*to check if you press any key or not*/
    2dee:	80 91 3c 01 	lds	r24, 0x013C
    2df2:	8f 3f       	cpi	r24, 0xFF	; 255
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <toggle_Led+0x6fa>
    2df6:	b4 c0       	rjmp	.+360    	; 0x2f60 <toggle_Led+0x862>

                      switch (key) {
    2df8:	80 91 3c 01 	lds	r24, 0x013C
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	29 96       	adiw	r28, 0x09	; 9
    2e02:	3f af       	std	Y+63, r19	; 0x3f
    2e04:	2e af       	std	Y+62, r18	; 0x3e
    2e06:	29 97       	sbiw	r28, 0x09	; 9
    2e08:	29 96       	adiw	r28, 0x09	; 9
    2e0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e0e:	29 97       	sbiw	r28, 0x09	; 9
    2e10:	81 33       	cpi	r24, 0x31	; 49
    2e12:	91 05       	cpc	r25, r1
    2e14:	41 f0       	breq	.+16     	; 0x2e26 <toggle_Led+0x728>
    2e16:	29 96       	adiw	r28, 0x09	; 9
    2e18:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e1c:	29 97       	sbiw	r28, 0x09	; 9
    2e1e:	e2 33       	cpi	r30, 0x32	; 50
    2e20:	f1 05       	cpc	r31, r1
    2e22:	79 f0       	breq	.+30     	; 0x2e42 <toggle_Led+0x744>
    2e24:	1c c0       	rjmp	.+56     	; 0x2e5e <toggle_Led+0x760>

                      case ('1'):

                        MOVE_STEPPER_MOTOR(CW, degree);
    2e26:	20 91 43 01 	lds	r18, 0x0143
    2e2a:	30 91 44 01 	lds	r19, 0x0144
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	b9 01       	movw	r22, r18
    2e32:	0e 94 46 18 	call	0x308c	; 0x308c <MOVE_STEPPER_MOTOR>
                        test++;
    2e36:	80 91 45 01 	lds	r24, 0x0145
    2e3a:	8f 5f       	subi	r24, 0xFF	; 255
    2e3c:	80 93 45 01 	sts	0x0145, r24
    2e40:	8f c0       	rjmp	.+286    	; 0x2f60 <toggle_Led+0x862>
                        break;

                      case ('2'):
                        MOVE_STEPPER_MOTOR(CCW, degree);
    2e42:	20 91 43 01 	lds	r18, 0x0143
    2e46:	30 91 44 01 	lds	r19, 0x0144
    2e4a:	8f ef       	ldi	r24, 0xFF	; 255
    2e4c:	b9 01       	movw	r22, r18
    2e4e:	0e 94 46 18 	call	0x308c	; 0x308c <MOVE_STEPPER_MOTOR>
                        test++;
    2e52:	80 91 45 01 	lds	r24, 0x0145
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	80 93 45 01 	sts	0x0145, r24
    2e5c:	81 c0       	rjmp	.+258    	; 0x2f60 <toggle_Led+0x862>
                        break;

                      default:

                        LCD_send_cmnd(0b00000001);
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
                        LCD_write_string("Error");
    2e64:	8b eb       	ldi	r24, 0xBB	; 187
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 ea       	ldi	r26, 0xA0	; 160
    2e72:	b2 e4       	ldi	r27, 0x42	; 66
    2e74:	8b 87       	std	Y+11, r24	; 0x0b
    2e76:	9c 87       	std	Y+12, r25	; 0x0c
    2e78:	ad 87       	std	Y+13, r26	; 0x0d
    2e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a ef       	ldi	r20, 0xFA	; 250
    2e8a:	54 e4       	ldi	r21, 0x44	; 68
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8f 83       	std	Y+7, r24	; 0x07
    2e96:	98 87       	std	Y+8, r25	; 0x08
    2e98:	a9 87       	std	Y+9, r26	; 0x09
    2e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <toggle_Led+0x7c0>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <toggle_Led+0x83e>
	else if (__tmp > 65535)
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <toggle_Led+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <toggle_Led+0x820>
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <toggle_Led+0x80e>
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	9e 81       	ldd	r25, Y+6	; 0x06
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <toggle_Led+0x802>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <toggle_Led+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2a:	78 85       	ldd	r23, Y+8	; 0x08
    2f2c:	89 85       	ldd	r24, Y+9	; 0x09
    2f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <toggle_Led+0x84a>
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01

                        _delay_ms(80);
                        LCD_send_cmnd(0b00000001);
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
                        test++;
    2f56:	80 91 45 01 	lds	r24, 0x0145
    2f5a:	8f 5f       	subi	r24, 0xFF	; 255
    2f5c:	80 93 45 01 	sts	0x0145, r24

                        break;
                      }
                    }

                    if (test != 0) {
    2f60:	80 91 45 01 	lds	r24, 0x0145
    2f64:	88 23       	and	r24, r24
    2f66:	d9 f5       	brne	.+118    	; 0x2fde <toggle_Led+0x8e0>
    2f68:	3e cf       	rjmp	.-388    	; 0x2de6 <toggle_Led+0x6e8>
                    }
                  }

                }
 /*******************************************************************************************************************************************************/
                else if (key == '3') {
    2f6a:	80 91 3c 01 	lds	r24, 0x013C
    2f6e:	83 33       	cpi	r24, 0x33	; 51
    2f70:	b1 f5       	brne	.+108    	; 0x2fde <toggle_Led+0x8e0>
                  LCD_send_cmnd(0b00000001);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
                  LCD_write_string("Existing");
    2f78:	8d ec       	ldi	r24, 0xCD	; 205
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
                  LCD_write_special_char(char5, dot, LCD_LINE1, 8);
    2f80:	25 e1       	ldi	r18, 0x15	; 21
    2f82:	31 e0       	ldi	r19, 0x01	; 1
    2f84:	85 e0       	ldi	r24, 0x05	; 5
    2f86:	b9 01       	movw	r22, r18
    2f88:	41 e0       	ldi	r20, 0x01	; 1
    2f8a:	28 e0       	ldi	r18, 0x08	; 8
    2f8c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>
                  LCD_write_special_char(char5, dot, LCD_LINE1, 9);
    2f90:	25 e1       	ldi	r18, 0x15	; 21
    2f92:	31 e0       	ldi	r19, 0x01	; 1
    2f94:	85 e0       	ldi	r24, 0x05	; 5
    2f96:	b9 01       	movw	r22, r18
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	29 e0       	ldi	r18, 0x09	; 9
    2f9c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>
                  LCD_write_special_char(char5, dot, LCD_LINE1, 10);
    2fa0:	25 e1       	ldi	r18, 0x15	; 21
    2fa2:	31 e0       	ldi	r19, 0x01	; 1
    2fa4:	85 e0       	ldi	r24, 0x05	; 5
    2fa6:	b9 01       	movw	r22, r18
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	2a e0       	ldi	r18, 0x0A	; 10
    2fac:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>
                  LCD_write_special_char(char5, dot, LCD_LINE1, 11);
    2fb0:	25 e1       	ldi	r18, 0x15	; 21
    2fb2:	31 e0       	ldi	r19, 0x01	; 1
    2fb4:	85 e0       	ldi	r24, 0x05	; 5
    2fb6:	b9 01       	movw	r22, r18
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	2b e0       	ldi	r18, 0x0B	; 11
    2fbc:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_write_special_char>
                  test2++;
    2fc0:	80 91 47 01 	lds	r24, 0x0147
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	80 93 47 01 	sts	0x0147, r24
                  DI_set_pin_value(PORTC, PIN1, Pin_low);
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	61 e0       	ldi	r22, 0x01	; 1
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                  DI_set_pin_value(PORTC, PIN0, Pin_low);
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

  /*******************************************************************************************************************************************************/

              } // check if enter any num

              if (test1 != 0) {
    2fde:	80 91 46 01 	lds	r24, 0x0146
    2fe2:	88 23       	and	r24, r24
    2fe4:	49 f4       	brne	.+18     	; 0x2ff8 <toggle_Led+0x8fa>

                break;
              }

              if (test != 0) {
    2fe6:	80 91 45 01 	lds	r24, 0x0145
    2fea:	88 23       	and	r24, r24
    2fec:	29 f4       	brne	.+10     	; 0x2ff8 <toggle_Led+0x8fa>
                break;
              }

              if (test2 != 0) {
    2fee:	80 91 47 01 	lds	r24, 0x0147
    2ff2:	88 23       	and	r24, r24
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <toggle_Led+0x8fa>
    2ff6:	2b cd       	rjmp	.-1450   	; 0x2a4e <toggle_Led+0x350>
                break;
              }

            } //  nested while

            if (test2 != 0) {
    2ff8:	80 91 47 01 	lds	r24, 0x0147
    2ffc:	88 23       	and	r24, r24
    2ffe:	a9 f5       	brne	.+106    	; 0x306a <toggle_Led+0x96c>
    3000:	78 cc       	rjmp	.-1808   	; 0x28f2 <toggle_Led+0x1f4>

 /*******************************************************************************************************************************************************/

        else { // else for if the pass is correct or not

          log_out++;
    3002:	80 91 42 01 	lds	r24, 0x0142
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	80 93 42 01 	sts	0x0142, r24

          if (log_out == 3) {
    300c:	80 91 42 01 	lds	r24, 0x0142
    3010:	83 30       	cpi	r24, 0x03	; 3
    3012:	a1 f4       	brne	.+40     	; 0x303c <toggle_Led+0x93e>
            DI_set_pin_value(PORTB, PIN1, Pin_high);
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	61 e0       	ldi	r22, 0x01	; 1
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

            LCD_send_cmnd(0b00000001);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
            LCD_write_string("wrong Passward");
    3024:	86 ed       	ldi	r24, 0xD6	; 214
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>

            LCD_send_cmnd(0b00000001);
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
            LCD_write_string("access failed");
    3032:	85 ee       	ldi	r24, 0xE5	; 229
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
    303a:	1c c0       	rjmp	.+56     	; 0x3074 <toggle_Led+0x976>

            break;
          }

          counter = 0;
    303c:	10 92 3d 01 	sts	0x013D, r1

          LCD_send_cmnd(0b00000001);
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>

          LCD_write_string("wrong Passward");
    3046:	86 ed       	ldi	r24, 0xD6	; 214
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
          LCD_send_cmnd(0b00000001);
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
          LCD_write_string("try again");
    3054:	83 ef       	ldi	r24, 0xF3	; 243
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
          LCD_send_cmnd(0b00000001);
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_send_cmnd>
          LCD_write_string("Enter Passward");
    3062:	80 e6       	ldi	r24, 0x60	; 96
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_write_string>
	 	 LCD_write_string("Enter Passward");
	 	 LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);

  // LCD_move_address_counter_of_DDRAM(LCD_LINE2,0);

  while (counter < 4) /*to scan the keypad continousily*/
    306a:	80 91 3d 01 	lds	r24, 0x013D
    306e:	84 30       	cpi	r24, 0x04	; 4
    3070:	08 f4       	brcc	.+2      	; 0x3074 <toggle_Led+0x976>
    3072:	5d cb       	rjmp	.-2374   	; 0x272e <toggle_Led+0x30>





 }
    3074:	c6 5b       	subi	r28, 0xB6	; 182
    3076:	df 4f       	sbci	r29, 0xFF	; 255
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <MOVE_STEPPER_MOTOR>:



#include "stepper_interface.h"

uint_8 MOVE_STEPPER_MOTOR(sint_8 direction , uint_16 angle){
    308c:	0f 93       	push	r16
    308e:	1f 93       	push	r17
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	c3 5a       	subi	r28, 0xA3	; 163
    309a:	d0 40       	sbci	r29, 0x00	; 0
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	fe 01       	movw	r30, r28
    30a8:	ef 55       	subi	r30, 0x5F	; 95
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 83       	st	Z, r24
    30ae:	fe 01       	movw	r30, r28
    30b0:	ee 55       	subi	r30, 0x5E	; 94
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	71 83       	std	Z+1, r23	; 0x01
    30b6:	60 83       	st	Z, r22

	uint_8 error_state = Return_Ok;
    30b8:	fe 01       	movw	r30, r28
    30ba:	e0 56       	subi	r30, 0x60	; 96
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	80 83       	st	Z, r24
	uint_8 counter2 = (((angle-48)*2048UL)/360)/4;
    30c2:	fe 01       	movw	r30, r28
    30c4:	ee 55       	subi	r30, 0x5E	; 94
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	c0 97       	sbiw	r24, 0x30	; 48
    30ce:	cc 01       	movw	r24, r24
    30d0:	a0 e0       	ldi	r26, 0x00	; 0
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	07 2e       	mov	r0, r23
    30d6:	7b e0       	ldi	r23, 0x0B	; 11
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	aa 1f       	adc	r26, r26
    30de:	bb 1f       	adc	r27, r27
    30e0:	7a 95       	dec	r23
    30e2:	d1 f7       	brne	.-12     	; 0x30d8 <MOVE_STEPPER_MOTOR+0x4c>
    30e4:	70 2d       	mov	r23, r0
    30e6:	20 ea       	ldi	r18, 0xA0	; 160
    30e8:	35 e0       	ldi	r19, 0x05	; 5
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 5d 20 	call	0x40ba	; 0x40ba <__udivmodsi4>
    30f6:	da 01       	movw	r26, r20
    30f8:	c9 01       	movw	r24, r18
    30fa:	fe 01       	movw	r30, r28
    30fc:	e1 56       	subi	r30, 0x61	; 97
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 83       	st	Z, r24

	if(  ((angle-48)>0)  &&   ((angle-48)<=360)  ){
    3102:	fe 01       	movw	r30, r28
    3104:	ee 55       	subi	r30, 0x5E	; 94
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	80 33       	cpi	r24, 0x30	; 48
    310e:	91 05       	cpc	r25, r1
    3110:	11 f4       	brne	.+4      	; 0x3116 <MOVE_STEPPER_MOTOR+0x8a>
    3112:	0c 94 49 20 	jmp	0x4092	; 0x4092 <MOVE_STEPPER_MOTOR+0x1006>
    3116:	fe 01       	movw	r30, r28
    3118:	ee 55       	subi	r30, 0x5E	; 94
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
    3120:	c0 97       	sbiw	r24, 0x30	; 48
    3122:	21 e0       	ldi	r18, 0x01	; 1
    3124:	89 36       	cpi	r24, 0x69	; 105
    3126:	92 07       	cpc	r25, r18
    3128:	08 f0       	brcs	.+2      	; 0x312c <MOVE_STEPPER_MOTOR+0xa0>
    312a:	b3 c7       	rjmp	.+3942   	; 0x4092 <MOVE_STEPPER_MOTOR+0x1006>

		switch (direction) {
    312c:	fe 01       	movw	r30, r28
    312e:	ef 55       	subi	r30, 0x5F	; 95
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	80 81       	ld	r24, Z
    3134:	99 27       	eor	r25, r25
    3136:	87 fd       	sbrc	r24, 7
    3138:	90 95       	com	r25
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	91 05       	cpc	r25, r1
    313e:	09 f0       	breq	.+2      	; 0x3142 <MOVE_STEPPER_MOTOR+0xb6>
    3140:	d0 c4       	rjmp	.+2464   	; 0x3ae2 <MOVE_STEPPER_MOTOR+0xa56>
			case  CW :

				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_low);
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	62 e0       	ldi	r22, 0x02	; 2
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
										DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    314c:	82 e0       	ldi	r24, 0x02	; 2
    314e:	63 e0       	ldi	r22, 0x03	; 3
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
										DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3156:	82 e0       	ldi	r24, 0x02	; 2
    3158:	64 e0       	ldi	r22, 0x04	; 4
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
										DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    3160:	82 e0       	ldi	r24, 0x02	; 2
    3162:	65 e0       	ldi	r22, 0x05	; 5
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    316a:	fe 01       	movw	r30, r28
    316c:	e9 56       	subi	r30, 0x69	; 105
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	a0 e2       	ldi	r26, 0x20	; 32
    3176:	b1 e4       	ldi	r27, 0x41	; 65
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3180:	8e 01       	movw	r16, r28
    3182:	0d 56       	subi	r16, 0x6D	; 109
    3184:	1f 4f       	sbci	r17, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	e9 56       	subi	r30, 0x69	; 105
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ef       	ldi	r20, 0xFA	; 250
    319a:	54 e4       	ldi	r21, 0x44	; 68
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	f8 01       	movw	r30, r16
    31a6:	80 83       	st	Z, r24
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	a2 83       	std	Z+2, r26	; 0x02
    31ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ae:	fe 01       	movw	r30, r28
    31b0:	ed 56       	subi	r30, 0x6D	; 109
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	44 f4       	brge	.+16     	; 0x31dc <MOVE_STEPPER_MOTOR+0x150>
		__ticks = 1;
    31cc:	fe 01       	movw	r30, r28
    31ce:	ef 56       	subi	r30, 0x6F	; 111
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	64 c0       	rjmp	.+200    	; 0x32a4 <MOVE_STEPPER_MOTOR+0x218>
	else if (__tmp > 65535)
    31dc:	fe 01       	movw	r30, r28
    31de:	ed 56       	subi	r30, 0x6D	; 109
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <MOVE_STEPPER_MOTOR+0x170>
    31fa:	43 c0       	rjmp	.+134    	; 0x3282 <MOVE_STEPPER_MOTOR+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	fe 01       	movw	r30, r28
    31fe:	e9 56       	subi	r30, 0x69	; 105
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8e 01       	movw	r16, r28
    321c:	0f 56       	subi	r16, 0x6F	; 111
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	f8 01       	movw	r30, r16
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	80 83       	st	Z, r24
    3232:	1f c0       	rjmp	.+62     	; 0x3272 <MOVE_STEPPER_MOTOR+0x1e6>
    3234:	fe 01       	movw	r30, r28
    3236:	e1 57       	subi	r30, 0x71	; 113
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	80 83       	st	Z, r24
    3242:	fe 01       	movw	r30, r28
    3244:	e1 57       	subi	r30, 0x71	; 113
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <MOVE_STEPPER_MOTOR+0x1c0>
    3250:	fe 01       	movw	r30, r28
    3252:	e1 57       	subi	r30, 0x71	; 113
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	de 01       	movw	r26, r28
    325c:	af 56       	subi	r26, 0x6F	; 111
    325e:	bf 4f       	sbci	r27, 0xFF	; 255
    3260:	fe 01       	movw	r30, r28
    3262:	ef 56       	subi	r30, 0x6F	; 111
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	11 96       	adiw	r26, 0x01	; 1
    326e:	9c 93       	st	X, r25
    3270:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3272:	fe 01       	movw	r30, r28
    3274:	ef 56       	subi	r30, 0x6F	; 111
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	d1 f6       	brne	.-76     	; 0x3234 <MOVE_STEPPER_MOTOR+0x1a8>
    3280:	28 c0       	rjmp	.+80     	; 0x32d2 <MOVE_STEPPER_MOTOR+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	8e 01       	movw	r16, r28
    3284:	0f 56       	subi	r16, 0x6F	; 111
    3286:	1f 4f       	sbci	r17, 0xFF	; 255
    3288:	fe 01       	movw	r30, r28
    328a:	ed 56       	subi	r30, 0x6D	; 109
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	60 81       	ld	r22, Z
    3290:	71 81       	ldd	r23, Z+1	; 0x01
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	de 01       	movw	r26, r28
    32a6:	a3 57       	subi	r26, 0x73	; 115
    32a8:	bf 4f       	sbci	r27, 0xFF	; 255
    32aa:	fe 01       	movw	r30, r28
    32ac:	ef 56       	subi	r30, 0x6F	; 111
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	9c 93       	st	X, r25
    32b8:	8e 93       	st	-X, r24
    32ba:	fe 01       	movw	r30, r28
    32bc:	e3 57       	subi	r30, 0x73	; 115
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	80 81       	ld	r24, Z
    32c2:	91 81       	ldd	r25, Z+1	; 0x01
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <MOVE_STEPPER_MOTOR+0x238>
    32c8:	fe 01       	movw	r30, r28
    32ca:	e3 57       	subi	r30, 0x73	; 115
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	80 83       	st	Z, r24
										_delay_ms(10);

			for(int i = 1 ; i <=counter2 ; i++){
    32d2:	fe 01       	movw	r30, r28
    32d4:	e3 56       	subi	r30, 0x63	; 99
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	91 83       	std	Z+1, r25	; 0x01
    32de:	80 83       	st	Z, r24
    32e0:	28 c3       	rjmp	.+1616   	; 0x3932 <MOVE_STEPPER_MOTOR+0x8a6>


						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    32e2:	82 e0       	ldi	r24, 0x02	; 2
    32e4:	62 e0       	ldi	r22, 0x02	; 2
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	63 e0       	ldi	r22, 0x03	; 3
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	64 e0       	ldi	r22, 0x04	; 4
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	65 e0       	ldi	r22, 0x05	; 5
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    330a:	fe 01       	movw	r30, r28
    330c:	e7 57       	subi	r30, 0x77	; 119
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	a0 e2       	ldi	r26, 0x20	; 32
    3316:	b1 e4       	ldi	r27, 0x41	; 65
    3318:	80 83       	st	Z, r24
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	a2 83       	std	Z+2, r26	; 0x02
    331e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3320:	8e 01       	movw	r16, r28
    3322:	0b 57       	subi	r16, 0x7B	; 123
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	fe 01       	movw	r30, r28
    3328:	e7 57       	subi	r30, 0x77	; 119
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	4a ef       	ldi	r20, 0xFA	; 250
    333a:	54 e4       	ldi	r21, 0x44	; 68
    333c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	80 83       	st	Z, r24
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	a2 83       	std	Z+2, r26	; 0x02
    334c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334e:	fe 01       	movw	r30, r28
    3350:	eb 57       	subi	r30, 0x7B	; 123
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	60 81       	ld	r22, Z
    3356:	71 81       	ldd	r23, Z+1	; 0x01
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	93 81       	ldd	r25, Z+3	; 0x03
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3368:	88 23       	and	r24, r24
    336a:	44 f4       	brge	.+16     	; 0x337c <MOVE_STEPPER_MOTOR+0x2f0>
		__ticks = 1;
    336c:	fe 01       	movw	r30, r28
    336e:	ed 57       	subi	r30, 0x7D	; 125
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	80 83       	st	Z, r24
    337a:	64 c0       	rjmp	.+200    	; 0x3444 <MOVE_STEPPER_MOTOR+0x3b8>
	else if (__tmp > 65535)
    337c:	fe 01       	movw	r30, r28
    337e:	eb 57       	subi	r30, 0x7B	; 123
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	0c f0       	brlt	.+2      	; 0x339c <MOVE_STEPPER_MOTOR+0x310>
    339a:	43 c0       	rjmp	.+134    	; 0x3422 <MOVE_STEPPER_MOTOR+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	fe 01       	movw	r30, r28
    339e:	e7 57       	subi	r30, 0x77	; 119
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8e 01       	movw	r16, r28
    33bc:	0d 57       	subi	r16, 0x7D	; 125
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	f8 01       	movw	r30, r16
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
    33d2:	1f c0       	rjmp	.+62     	; 0x3412 <MOVE_STEPPER_MOTOR+0x386>
    33d4:	fe 01       	movw	r30, r28
    33d6:	ef 57       	subi	r30, 0x7F	; 127
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	88 ec       	ldi	r24, 0xC8	; 200
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	80 83       	st	Z, r24
    33e2:	fe 01       	movw	r30, r28
    33e4:	ef 57       	subi	r30, 0x7F	; 127
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <MOVE_STEPPER_MOTOR+0x360>
    33f0:	fe 01       	movw	r30, r28
    33f2:	ef 57       	subi	r30, 0x7F	; 127
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	de 01       	movw	r26, r28
    33fc:	ad 57       	subi	r26, 0x7D	; 125
    33fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3400:	fe 01       	movw	r30, r28
    3402:	ed 57       	subi	r30, 0x7D	; 125
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	80 81       	ld	r24, Z
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	11 96       	adiw	r26, 0x01	; 1
    340e:	9c 93       	st	X, r25
    3410:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3412:	fe 01       	movw	r30, r28
    3414:	ed 57       	subi	r30, 0x7D	; 125
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	d1 f6       	brne	.-76     	; 0x33d4 <MOVE_STEPPER_MOTOR+0x348>
    3420:	27 c0       	rjmp	.+78     	; 0x3470 <MOVE_STEPPER_MOTOR+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	8e 01       	movw	r16, r28
    3424:	0d 57       	subi	r16, 0x7D	; 125
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	fe 01       	movw	r30, r28
    342a:	eb 57       	subi	r30, 0x7B	; 123
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	f8 01       	movw	r30, r16
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	de 01       	movw	r26, r28
    3446:	a1 58       	subi	r26, 0x81	; 129
    3448:	bf 4f       	sbci	r27, 0xFF	; 255
    344a:	fe 01       	movw	r30, r28
    344c:	ed 57       	subi	r30, 0x7D	; 125
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 81       	ld	r24, Z
    3452:	91 81       	ldd	r25, Z+1	; 0x01
    3454:	8d 93       	st	X+, r24
    3456:	9c 93       	st	X, r25
    3458:	fe 01       	movw	r30, r28
    345a:	e1 58       	subi	r30, 0x81	; 129
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <MOVE_STEPPER_MOTOR+0x3d6>
    3466:	fe 01       	movw	r30, r28
    3468:	e1 58       	subi	r30, 0x81	; 129
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
						_delay_ms(10);

						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	62 e0       	ldi	r22, 0x02	; 2
    3474:	41 e0       	ldi	r20, 0x01	; 1
    3476:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    347a:	82 e0       	ldi	r24, 0x02	; 2
    347c:	63 e0       	ldi	r22, 0x03	; 3
    347e:	41 e0       	ldi	r20, 0x01	; 1
    3480:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_low);
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	64 e0       	ldi	r22, 0x04	; 4
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    348e:	82 e0       	ldi	r24, 0x02	; 2
    3490:	65 e0       	ldi	r22, 0x05	; 5
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3498:	fe 01       	movw	r30, r28
    349a:	e5 58       	subi	r30, 0x85	; 133
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	a0 e2       	ldi	r26, 0x20	; 32
    34a4:	b1 e4       	ldi	r27, 0x41	; 65
    34a6:	80 83       	st	Z, r24
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	a2 83       	std	Z+2, r26	; 0x02
    34ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ae:	8e 01       	movw	r16, r28
    34b0:	09 58       	subi	r16, 0x89	; 137
    34b2:	1f 4f       	sbci	r17, 0xFF	; 255
    34b4:	fe 01       	movw	r30, r28
    34b6:	e5 58       	subi	r30, 0x85	; 133
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	f8 01       	movw	r30, r16
    34d4:	80 83       	st	Z, r24
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	a2 83       	std	Z+2, r26	; 0x02
    34da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34dc:	fe 01       	movw	r30, r28
    34de:	e9 58       	subi	r30, 0x89	; 137
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	93 81       	ldd	r25, Z+3	; 0x03
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	44 f4       	brge	.+16     	; 0x350a <MOVE_STEPPER_MOTOR+0x47e>
		__ticks = 1;
    34fa:	fe 01       	movw	r30, r28
    34fc:	eb 58       	subi	r30, 0x8B	; 139
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	80 83       	st	Z, r24
    3508:	64 c0       	rjmp	.+200    	; 0x35d2 <MOVE_STEPPER_MOTOR+0x546>
	else if (__tmp > 65535)
    350a:	fe 01       	movw	r30, r28
    350c:	e9 58       	subi	r30, 0x89	; 137
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	0c f0       	brlt	.+2      	; 0x352a <MOVE_STEPPER_MOTOR+0x49e>
    3528:	43 c0       	rjmp	.+134    	; 0x35b0 <MOVE_STEPPER_MOTOR+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352a:	fe 01       	movw	r30, r28
    352c:	e5 58       	subi	r30, 0x85	; 133
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	60 81       	ld	r22, Z
    3532:	71 81       	ldd	r23, Z+1	; 0x01
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e2       	ldi	r20, 0x20	; 32
    353e:	51 e4       	ldi	r21, 0x41	; 65
    3540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	8e 01       	movw	r16, r28
    354a:	0b 58       	subi	r16, 0x8B	; 139
    354c:	1f 4f       	sbci	r17, 0xFF	; 255
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	f8 01       	movw	r30, r16
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
    3560:	1f c0       	rjmp	.+62     	; 0x35a0 <MOVE_STEPPER_MOTOR+0x514>
    3562:	fe 01       	movw	r30, r28
    3564:	ed 58       	subi	r30, 0x8D	; 141
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	88 ec       	ldi	r24, 0xC8	; 200
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	80 83       	st	Z, r24
    3570:	fe 01       	movw	r30, r28
    3572:	ed 58       	subi	r30, 0x8D	; 141
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <MOVE_STEPPER_MOTOR+0x4ee>
    357e:	fe 01       	movw	r30, r28
    3580:	ed 58       	subi	r30, 0x8D	; 141
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	91 83       	std	Z+1, r25	; 0x01
    3586:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3588:	de 01       	movw	r26, r28
    358a:	ab 58       	subi	r26, 0x8B	; 139
    358c:	bf 4f       	sbci	r27, 0xFF	; 255
    358e:	fe 01       	movw	r30, r28
    3590:	eb 58       	subi	r30, 0x8B	; 139
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	11 96       	adiw	r26, 0x01	; 1
    359c:	9c 93       	st	X, r25
    359e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a0:	fe 01       	movw	r30, r28
    35a2:	eb 58       	subi	r30, 0x8B	; 139
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	d1 f6       	brne	.-76     	; 0x3562 <MOVE_STEPPER_MOTOR+0x4d6>
    35ae:	27 c0       	rjmp	.+78     	; 0x35fe <MOVE_STEPPER_MOTOR+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	8e 01       	movw	r16, r28
    35b2:	0b 58       	subi	r16, 0x8B	; 139
    35b4:	1f 4f       	sbci	r17, 0xFF	; 255
    35b6:	fe 01       	movw	r30, r28
    35b8:	e9 58       	subi	r30, 0x89	; 137
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	60 81       	ld	r22, Z
    35be:	71 81       	ldd	r23, Z+1	; 0x01
    35c0:	82 81       	ldd	r24, Z+2	; 0x02
    35c2:	93 81       	ldd	r25, Z+3	; 0x03
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	f8 01       	movw	r30, r16
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24
    35d2:	de 01       	movw	r26, r28
    35d4:	af 58       	subi	r26, 0x8F	; 143
    35d6:	bf 4f       	sbci	r27, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	eb 58       	subi	r30, 0x8B	; 139
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	8d 93       	st	X+, r24
    35e4:	9c 93       	st	X, r25
    35e6:	fe 01       	movw	r30, r28
    35e8:	ef 58       	subi	r30, 0x8F	; 143
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 81       	ld	r24, Z
    35ee:	91 81       	ldd	r25, Z+1	; 0x01
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <MOVE_STEPPER_MOTOR+0x564>
    35f4:	fe 01       	movw	r30, r28
    35f6:	ef 58       	subi	r30, 0x8F	; 143
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	80 83       	st	Z, r24
						_delay_ms(10);

						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	62 e0       	ldi	r22, 0x02	; 2
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_low);
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	63 e0       	ldi	r22, 0x03	; 3
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	64 e0       	ldi	r22, 0x04	; 4
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	65 e0       	ldi	r22, 0x05	; 5
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3626:	fe 01       	movw	r30, r28
    3628:	e3 59       	subi	r30, 0x93	; 147
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	a0 e2       	ldi	r26, 0x20	; 32
    3632:	b1 e4       	ldi	r27, 0x41	; 65
    3634:	80 83       	st	Z, r24
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	a2 83       	std	Z+2, r26	; 0x02
    363a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363c:	8e 01       	movw	r16, r28
    363e:	07 59       	subi	r16, 0x97	; 151
    3640:	1f 4f       	sbci	r17, 0xFF	; 255
    3642:	fe 01       	movw	r30, r28
    3644:	e3 59       	subi	r30, 0x93	; 147
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	4a ef       	ldi	r20, 0xFA	; 250
    3656:	54 e4       	ldi	r21, 0x44	; 68
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	f8 01       	movw	r30, r16
    3662:	80 83       	st	Z, r24
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	a2 83       	std	Z+2, r26	; 0x02
    3668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    366a:	fe 01       	movw	r30, r28
    366c:	e7 59       	subi	r30, 0x97	; 151
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e8       	ldi	r20, 0x80	; 128
    367e:	5f e3       	ldi	r21, 0x3F	; 63
    3680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3684:	88 23       	and	r24, r24
    3686:	44 f4       	brge	.+16     	; 0x3698 <MOVE_STEPPER_MOTOR+0x60c>
		__ticks = 1;
    3688:	fe 01       	movw	r30, r28
    368a:	e9 59       	subi	r30, 0x99	; 153
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
    3696:	64 c0       	rjmp	.+200    	; 0x3760 <MOVE_STEPPER_MOTOR+0x6d4>
	else if (__tmp > 65535)
    3698:	fe 01       	movw	r30, r28
    369a:	e7 59       	subi	r30, 0x97	; 151
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	3f ef       	ldi	r19, 0xFF	; 255
    36aa:	4f e7       	ldi	r20, 0x7F	; 127
    36ac:	57 e4       	ldi	r21, 0x47	; 71
    36ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b2:	18 16       	cp	r1, r24
    36b4:	0c f0       	brlt	.+2      	; 0x36b8 <MOVE_STEPPER_MOTOR+0x62c>
    36b6:	43 c0       	rjmp	.+134    	; 0x373e <MOVE_STEPPER_MOTOR+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b8:	fe 01       	movw	r30, r28
    36ba:	e3 59       	subi	r30, 0x93	; 147
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e2       	ldi	r20, 0x20	; 32
    36cc:	51 e4       	ldi	r21, 0x41	; 65
    36ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	8e 01       	movw	r16, r28
    36d8:	09 59       	subi	r16, 0x99	; 153
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	bc 01       	movw	r22, r24
    36de:	cd 01       	movw	r24, r26
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	f8 01       	movw	r30, r16
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
    36ee:	1f c0       	rjmp	.+62     	; 0x372e <MOVE_STEPPER_MOTOR+0x6a2>
    36f0:	fe 01       	movw	r30, r28
    36f2:	eb 59       	subi	r30, 0x9B	; 155
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	88 ec       	ldi	r24, 0xC8	; 200
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
    36fe:	fe 01       	movw	r30, r28
    3700:	eb 59       	subi	r30, 0x9B	; 155
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 81       	ld	r24, Z
    3706:	91 81       	ldd	r25, Z+1	; 0x01
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	f1 f7       	brne	.-4      	; 0x3708 <MOVE_STEPPER_MOTOR+0x67c>
    370c:	fe 01       	movw	r30, r28
    370e:	eb 59       	subi	r30, 0x9B	; 155
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3716:	de 01       	movw	r26, r28
    3718:	a9 59       	subi	r26, 0x99	; 153
    371a:	bf 4f       	sbci	r27, 0xFF	; 255
    371c:	fe 01       	movw	r30, r28
    371e:	e9 59       	subi	r30, 0x99	; 153
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	80 81       	ld	r24, Z
    3724:	91 81       	ldd	r25, Z+1	; 0x01
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	11 96       	adiw	r26, 0x01	; 1
    372a:	9c 93       	st	X, r25
    372c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372e:	fe 01       	movw	r30, r28
    3730:	e9 59       	subi	r30, 0x99	; 153
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	d1 f6       	brne	.-76     	; 0x36f0 <MOVE_STEPPER_MOTOR+0x664>
    373c:	27 c0       	rjmp	.+78     	; 0x378c <MOVE_STEPPER_MOTOR+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373e:	8e 01       	movw	r16, r28
    3740:	09 59       	subi	r16, 0x99	; 153
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	fe 01       	movw	r30, r28
    3746:	e7 59       	subi	r30, 0x97	; 151
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	f8 01       	movw	r30, r16
    375c:	91 83       	std	Z+1, r25	; 0x01
    375e:	80 83       	st	Z, r24
    3760:	de 01       	movw	r26, r28
    3762:	ad 59       	subi	r26, 0x9D	; 157
    3764:	bf 4f       	sbci	r27, 0xFF	; 255
    3766:	fe 01       	movw	r30, r28
    3768:	e9 59       	subi	r30, 0x99	; 153
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	8d 93       	st	X+, r24
    3772:	9c 93       	st	X, r25
    3774:	fe 01       	movw	r30, r28
    3776:	ed 59       	subi	r30, 0x9D	; 157
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 81       	ld	r24, Z
    377c:	91 81       	ldd	r25, Z+1	; 0x01
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <MOVE_STEPPER_MOTOR+0x6f2>
    3782:	fe 01       	movw	r30, r28
    3784:	ed 59       	subi	r30, 0x9D	; 157
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	91 83       	std	Z+1, r25	; 0x01
    378a:	80 83       	st	Z, r24
						_delay_ms(10);



						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_low);
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	62 e0       	ldi	r22, 0x02	; 2
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	63 e0       	ldi	r22, 0x03	; 3
    379a:	41 e0       	ldi	r20, 0x01	; 1
    379c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	64 e0       	ldi	r22, 0x04	; 4
    37a4:	41 e0       	ldi	r20, 0x01	; 1
    37a6:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
						DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	65 e0       	ldi	r22, 0x05	; 5
    37ae:	41 e0       	ldi	r20, 0x01	; 1
    37b0:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    37b4:	fe 01       	movw	r30, r28
    37b6:	e1 5a       	subi	r30, 0xA1	; 161
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	a0 e2       	ldi	r26, 0x20	; 32
    37c0:	b1 e4       	ldi	r27, 0x41	; 65
    37c2:	80 83       	st	Z, r24
    37c4:	91 83       	std	Z+1, r25	; 0x01
    37c6:	a2 83       	std	Z+2, r26	; 0x02
    37c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ca:	8e 01       	movw	r16, r28
    37cc:	05 5a       	subi	r16, 0xA5	; 165
    37ce:	1f 4f       	sbci	r17, 0xFF	; 255
    37d0:	fe 01       	movw	r30, r28
    37d2:	e1 5a       	subi	r30, 0xA1	; 161
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	f8 01       	movw	r30, r16
    37f0:	80 83       	st	Z, r24
    37f2:	91 83       	std	Z+1, r25	; 0x01
    37f4:	a2 83       	std	Z+2, r26	; 0x02
    37f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37f8:	fe 01       	movw	r30, r28
    37fa:	e5 5a       	subi	r30, 0xA5	; 165
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	60 81       	ld	r22, Z
    3800:	71 81       	ldd	r23, Z+1	; 0x01
    3802:	82 81       	ldd	r24, Z+2	; 0x02
    3804:	93 81       	ldd	r25, Z+3	; 0x03
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e8       	ldi	r20, 0x80	; 128
    380c:	5f e3       	ldi	r21, 0x3F	; 63
    380e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3812:	88 23       	and	r24, r24
    3814:	44 f4       	brge	.+16     	; 0x3826 <MOVE_STEPPER_MOTOR+0x79a>
		__ticks = 1;
    3816:	fe 01       	movw	r30, r28
    3818:	e7 5a       	subi	r30, 0xA7	; 167
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	80 83       	st	Z, r24
    3824:	64 c0       	rjmp	.+200    	; 0x38ee <MOVE_STEPPER_MOTOR+0x862>
	else if (__tmp > 65535)
    3826:	fe 01       	movw	r30, r28
    3828:	e5 5a       	subi	r30, 0xA5	; 165
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	60 81       	ld	r22, Z
    382e:	71 81       	ldd	r23, Z+1	; 0x01
    3830:	82 81       	ldd	r24, Z+2	; 0x02
    3832:	93 81       	ldd	r25, Z+3	; 0x03
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	4f e7       	ldi	r20, 0x7F	; 127
    383a:	57 e4       	ldi	r21, 0x47	; 71
    383c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3840:	18 16       	cp	r1, r24
    3842:	0c f0       	brlt	.+2      	; 0x3846 <MOVE_STEPPER_MOTOR+0x7ba>
    3844:	43 c0       	rjmp	.+134    	; 0x38cc <MOVE_STEPPER_MOTOR+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3846:	fe 01       	movw	r30, r28
    3848:	e1 5a       	subi	r30, 0xA1	; 161
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	60 81       	ld	r22, Z
    384e:	71 81       	ldd	r23, Z+1	; 0x01
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e2       	ldi	r20, 0x20	; 32
    385a:	51 e4       	ldi	r21, 0x41	; 65
    385c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	8e 01       	movw	r16, r28
    3866:	07 5a       	subi	r16, 0xA7	; 167
    3868:	1f 4f       	sbci	r17, 0xFF	; 255
    386a:	bc 01       	movw	r22, r24
    386c:	cd 01       	movw	r24, r26
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	f8 01       	movw	r30, r16
    3878:	91 83       	std	Z+1, r25	; 0x01
    387a:	80 83       	st	Z, r24
    387c:	1f c0       	rjmp	.+62     	; 0x38bc <MOVE_STEPPER_MOTOR+0x830>
    387e:	fe 01       	movw	r30, r28
    3880:	e9 5a       	subi	r30, 0xA9	; 169
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	88 ec       	ldi	r24, 0xC8	; 200
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24
    388c:	fe 01       	movw	r30, r28
    388e:	e9 5a       	subi	r30, 0xA9	; 169
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <MOVE_STEPPER_MOTOR+0x80a>
    389a:	fe 01       	movw	r30, r28
    389c:	e9 5a       	subi	r30, 0xA9	; 169
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a4:	de 01       	movw	r26, r28
    38a6:	a7 5a       	subi	r26, 0xA7	; 167
    38a8:	bf 4f       	sbci	r27, 0xFF	; 255
    38aa:	fe 01       	movw	r30, r28
    38ac:	e7 5a       	subi	r30, 0xA7	; 167
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	80 81       	ld	r24, Z
    38b2:	91 81       	ldd	r25, Z+1	; 0x01
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	11 96       	adiw	r26, 0x01	; 1
    38b8:	9c 93       	st	X, r25
    38ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38bc:	fe 01       	movw	r30, r28
    38be:	e7 5a       	subi	r30, 0xA7	; 167
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	d1 f6       	brne	.-76     	; 0x387e <MOVE_STEPPER_MOTOR+0x7f2>
    38ca:	27 c0       	rjmp	.+78     	; 0x391a <MOVE_STEPPER_MOTOR+0x88e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38cc:	8e 01       	movw	r16, r28
    38ce:	07 5a       	subi	r16, 0xA7	; 167
    38d0:	1f 4f       	sbci	r17, 0xFF	; 255
    38d2:	fe 01       	movw	r30, r28
    38d4:	e5 5a       	subi	r30, 0xA5	; 165
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	60 81       	ld	r22, Z
    38da:	71 81       	ldd	r23, Z+1	; 0x01
    38dc:	82 81       	ldd	r24, Z+2	; 0x02
    38de:	93 81       	ldd	r25, Z+3	; 0x03
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	f8 01       	movw	r30, r16
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
    38ee:	de 01       	movw	r26, r28
    38f0:	ab 5a       	subi	r26, 0xAB	; 171
    38f2:	bf 4f       	sbci	r27, 0xFF	; 255
    38f4:	fe 01       	movw	r30, r28
    38f6:	e7 5a       	subi	r30, 0xA7	; 167
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	8d 93       	st	X+, r24
    3900:	9c 93       	st	X, r25
    3902:	fe 01       	movw	r30, r28
    3904:	eb 5a       	subi	r30, 0xAB	; 171
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	80 81       	ld	r24, Z
    390a:	91 81       	ldd	r25, Z+1	; 0x01
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	f1 f7       	brne	.-4      	; 0x390c <MOVE_STEPPER_MOTOR+0x880>
    3910:	fe 01       	movw	r30, r28
    3912:	eb 5a       	subi	r30, 0xAB	; 171
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	91 83       	std	Z+1, r25	; 0x01
    3918:	80 83       	st	Z, r24
										DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
										DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
										DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
										_delay_ms(10);

			for(int i = 1 ; i <=counter2 ; i++){
    391a:	de 01       	movw	r26, r28
    391c:	a3 56       	subi	r26, 0x63	; 99
    391e:	bf 4f       	sbci	r27, 0xFF	; 255
    3920:	fe 01       	movw	r30, r28
    3922:	e3 56       	subi	r30, 0x63	; 99
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 81       	ld	r24, Z
    3928:	91 81       	ldd	r25, Z+1	; 0x01
    392a:	01 96       	adiw	r24, 0x01	; 1
    392c:	11 96       	adiw	r26, 0x01	; 1
    392e:	9c 93       	st	X, r25
    3930:	8e 93       	st	-X, r24
    3932:	fe 01       	movw	r30, r28
    3934:	e1 56       	subi	r30, 0x61	; 97
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	80 81       	ld	r24, Z
    393a:	28 2f       	mov	r18, r24
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	fe 01       	movw	r30, r28
    3940:	e3 56       	subi	r30, 0x63	; 99
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 81       	ld	r24, Z
    3946:	91 81       	ldd	r25, Z+1	; 0x01
    3948:	28 17       	cp	r18, r24
    394a:	39 07       	cpc	r19, r25
    394c:	0c f0       	brlt	.+2      	; 0x3950 <MOVE_STEPPER_MOTOR+0x8c4>
    394e:	c9 cc       	rjmp	.-1646   	; 0x32e2 <MOVE_STEPPER_MOTOR+0x256>



			}

			DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	62 e0       	ldi	r22, 0x02	; 2
    3954:	41 e0       	ldi	r20, 0x01	; 1
    3956:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    395a:	82 e0       	ldi	r24, 0x02	; 2
    395c:	63 e0       	ldi	r22, 0x03	; 3
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3964:	82 e0       	ldi	r24, 0x02	; 2
    3966:	64 e0       	ldi	r22, 0x04	; 4
    3968:	41 e0       	ldi	r20, 0x01	; 1
    396a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	65 e0       	ldi	r22, 0x05	; 5
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3978:	fe 01       	movw	r30, r28
    397a:	ef 5a       	subi	r30, 0xAF	; 175
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	a0 e2       	ldi	r26, 0x20	; 32
    3984:	b1 e4       	ldi	r27, 0x41	; 65
    3986:	80 83       	st	Z, r24
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	a2 83       	std	Z+2, r26	; 0x02
    398c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398e:	8e 01       	movw	r16, r28
    3990:	03 5b       	subi	r16, 0xB3	; 179
    3992:	1f 4f       	sbci	r17, 0xFF	; 255
    3994:	fe 01       	movw	r30, r28
    3996:	ef 5a       	subi	r30, 0xAF	; 175
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	60 81       	ld	r22, Z
    399c:	71 81       	ldd	r23, Z+1	; 0x01
    399e:	82 81       	ldd	r24, Z+2	; 0x02
    39a0:	93 81       	ldd	r25, Z+3	; 0x03
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4a ef       	ldi	r20, 0xFA	; 250
    39a8:	54 e4       	ldi	r21, 0x44	; 68
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	f8 01       	movw	r30, r16
    39b4:	80 83       	st	Z, r24
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	a2 83       	std	Z+2, r26	; 0x02
    39ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39bc:	fe 01       	movw	r30, r28
    39be:	e3 5b       	subi	r30, 0xB3	; 179
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e8       	ldi	r20, 0x80	; 128
    39d0:	5f e3       	ldi	r21, 0x3F	; 63
    39d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d6:	88 23       	and	r24, r24
    39d8:	44 f4       	brge	.+16     	; 0x39ea <MOVE_STEPPER_MOTOR+0x95e>
		__ticks = 1;
    39da:	fe 01       	movw	r30, r28
    39dc:	e5 5b       	subi	r30, 0xB5	; 181
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	91 83       	std	Z+1, r25	; 0x01
    39e6:	80 83       	st	Z, r24
    39e8:	64 c0       	rjmp	.+200    	; 0x3ab2 <MOVE_STEPPER_MOTOR+0xa26>
	else if (__tmp > 65535)
    39ea:	fe 01       	movw	r30, r28
    39ec:	e3 5b       	subi	r30, 0xB3	; 179
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	60 81       	ld	r22, Z
    39f2:	71 81       	ldd	r23, Z+1	; 0x01
    39f4:	82 81       	ldd	r24, Z+2	; 0x02
    39f6:	93 81       	ldd	r25, Z+3	; 0x03
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	0c f0       	brlt	.+2      	; 0x3a0a <MOVE_STEPPER_MOTOR+0x97e>
    3a08:	43 c0       	rjmp	.+134    	; 0x3a90 <MOVE_STEPPER_MOTOR+0xa04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	ef 5a       	subi	r30, 0xAF	; 175
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	82 81       	ldd	r24, Z+2	; 0x02
    3a16:	93 81       	ldd	r25, Z+3	; 0x03
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e2       	ldi	r20, 0x20	; 32
    3a1e:	51 e4       	ldi	r21, 0x41	; 65
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	8e 01       	movw	r16, r28
    3a2a:	05 5b       	subi	r16, 0xB5	; 181
    3a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	80 83       	st	Z, r24
    3a40:	1f c0       	rjmp	.+62     	; 0x3a80 <MOVE_STEPPER_MOTOR+0x9f4>
    3a42:	fe 01       	movw	r30, r28
    3a44:	e7 5b       	subi	r30, 0xB7	; 183
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	88 ec       	ldi	r24, 0xC8	; 200
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	80 83       	st	Z, r24
    3a50:	fe 01       	movw	r30, r28
    3a52:	e7 5b       	subi	r30, 0xB7	; 183
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <MOVE_STEPPER_MOTOR+0x9ce>
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e7 5b       	subi	r30, 0xB7	; 183
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	de 01       	movw	r26, r28
    3a6a:	a5 5b       	subi	r26, 0xB5	; 181
    3a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e5 5b       	subi	r30, 0xB5	; 181
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	80 81       	ld	r24, Z
    3a76:	91 81       	ldd	r25, Z+1	; 0x01
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	11 96       	adiw	r26, 0x01	; 1
    3a7c:	9c 93       	st	X, r25
    3a7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a80:	fe 01       	movw	r30, r28
    3a82:	e5 5b       	subi	r30, 0xB5	; 181
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	d1 f6       	brne	.-76     	; 0x3a42 <MOVE_STEPPER_MOTOR+0x9b6>
    3a8e:	05 c3       	rjmp	.+1546   	; 0x409a <MOVE_STEPPER_MOTOR+0x100e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a90:	8e 01       	movw	r16, r28
    3a92:	05 5b       	subi	r16, 0xB5	; 181
    3a94:	1f 4f       	sbci	r17, 0xFF	; 255
    3a96:	fe 01       	movw	r30, r28
    3a98:	e3 5b       	subi	r30, 0xB3	; 179
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	60 81       	ld	r22, Z
    3a9e:	71 81       	ldd	r23, Z+1	; 0x01
    3aa0:	82 81       	ldd	r24, Z+2	; 0x02
    3aa2:	93 81       	ldd	r25, Z+3	; 0x03
    3aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	f8 01       	movw	r30, r16
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	80 83       	st	Z, r24
    3ab2:	de 01       	movw	r26, r28
    3ab4:	a9 5b       	subi	r26, 0xB9	; 185
    3ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e5 5b       	subi	r30, 0xB5	; 181
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	80 81       	ld	r24, Z
    3ac0:	91 81       	ldd	r25, Z+1	; 0x01
    3ac2:	11 96       	adiw	r26, 0x01	; 1
    3ac4:	9c 93       	st	X, r25
    3ac6:	8e 93       	st	-X, r24
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e9 5b       	subi	r30, 0xB9	; 185
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <MOVE_STEPPER_MOTOR+0xa46>
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e9 5b       	subi	r30, 0xB9	; 185
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
    3ae0:	dc c2       	rjmp	.+1464   	; 0x409a <MOVE_STEPPER_MOTOR+0x100e>


			default:


				DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    3ae2:	82 e0       	ldi	r24, 0x02	; 2
    3ae4:	62 e0       	ldi	r22, 0x02	; 2
    3ae6:	41 e0       	ldi	r20, 0x01	; 1
    3ae8:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    3aec:	82 e0       	ldi	r24, 0x02	; 2
    3aee:	63 e0       	ldi	r22, 0x03	; 3
    3af0:	41 e0       	ldi	r20, 0x01	; 1
    3af2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3af6:	82 e0       	ldi	r24, 0x02	; 2
    3af8:	64 e0       	ldi	r22, 0x04	; 4
    3afa:	41 e0       	ldi	r20, 0x01	; 1
    3afc:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    3b00:	82 e0       	ldi	r24, 0x02	; 2
    3b02:	65 e0       	ldi	r22, 0x05	; 5
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	ed 5b       	subi	r30, 0xBD	; 189
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	a0 e2       	ldi	r26, 0x20	; 32
    3b16:	b1 e4       	ldi	r27, 0x41	; 65
    3b18:	80 83       	st	Z, r24
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	a2 83       	std	Z+2, r26	; 0x02
    3b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b20:	8e 01       	movw	r16, r28
    3b22:	01 5c       	subi	r16, 0xC1	; 193
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	fe 01       	movw	r30, r28
    3b28:	ed 5b       	subi	r30, 0xBD	; 189
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	4a ef       	ldi	r20, 0xFA	; 250
    3b3a:	54 e4       	ldi	r21, 0x44	; 68
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	f8 01       	movw	r30, r16
    3b46:	80 83       	st	Z, r24
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	a2 83       	std	Z+2, r26	; 0x02
    3b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ff 96       	adiw	r30, 0x3f	; 63
    3b52:	60 81       	ld	r22, Z
    3b54:	71 81       	ldd	r23, Z+1	; 0x01
    3b56:	82 81       	ldd	r24, Z+2	; 0x02
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e8       	ldi	r20, 0x80	; 128
    3b60:	5f e3       	ldi	r21, 0x3F	; 63
    3b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b66:	88 23       	and	r24, r24
    3b68:	2c f4       	brge	.+10     	; 0x3b74 <MOVE_STEPPER_MOTOR+0xae8>
		__ticks = 1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9e af       	std	Y+62, r25	; 0x3e
    3b70:	8d af       	std	Y+61, r24	; 0x3d
    3b72:	46 c0       	rjmp	.+140    	; 0x3c00 <MOVE_STEPPER_MOTOR+0xb74>
	else if (__tmp > 65535)
    3b74:	fe 01       	movw	r30, r28
    3b76:	ff 96       	adiw	r30, 0x3f	; 63
    3b78:	60 81       	ld	r22, Z
    3b7a:	71 81       	ldd	r23, Z+1	; 0x01
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	93 81       	ldd	r25, Z+3	; 0x03
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	3f ef       	ldi	r19, 0xFF	; 255
    3b84:	4f e7       	ldi	r20, 0x7F	; 127
    3b86:	57 e4       	ldi	r21, 0x47	; 71
    3b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8c:	18 16       	cp	r1, r24
    3b8e:	64 f5       	brge	.+88     	; 0x3be8 <MOVE_STEPPER_MOTOR+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	fe 01       	movw	r30, r28
    3b92:	ed 5b       	subi	r30, 0xBD	; 189
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9e af       	std	Y+62, r25	; 0x3e
    3bbc:	8d af       	std	Y+61, r24	; 0x3d
    3bbe:	0f c0       	rjmp	.+30     	; 0x3bde <MOVE_STEPPER_MOTOR+0xb52>
    3bc0:	88 ec       	ldi	r24, 0xC8	; 200
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9c af       	std	Y+60, r25	; 0x3c
    3bc6:	8b af       	std	Y+59, r24	; 0x3b
    3bc8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bca:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <MOVE_STEPPER_MOTOR+0xb40>
    3bd0:	9c af       	std	Y+60, r25	; 0x3c
    3bd2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	9e af       	std	Y+62, r25	; 0x3e
    3bdc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	8d ad       	ldd	r24, Y+61	; 0x3d
    3be0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	69 f7       	brne	.-38     	; 0x3bc0 <MOVE_STEPPER_MOTOR+0xb34>
    3be6:	16 c0       	rjmp	.+44     	; 0x3c14 <MOVE_STEPPER_MOTOR+0xb88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be8:	fe 01       	movw	r30, r28
    3bea:	ff 96       	adiw	r30, 0x3f	; 63
    3bec:	60 81       	ld	r22, Z
    3bee:	71 81       	ldd	r23, Z+1	; 0x01
    3bf0:	82 81       	ldd	r24, Z+2	; 0x02
    3bf2:	93 81       	ldd	r25, Z+3	; 0x03
    3bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	9e af       	std	Y+62, r25	; 0x3e
    3bfe:	8d af       	std	Y+61, r24	; 0x3d
    3c00:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c02:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c04:	9a af       	std	Y+58, r25	; 0x3a
    3c06:	89 af       	std	Y+57, r24	; 0x39
    3c08:	89 ad       	ldd	r24, Y+57	; 0x39
    3c0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <MOVE_STEPPER_MOTOR+0xb80>
    3c10:	9a af       	std	Y+58, r25	; 0x3a
    3c12:	89 af       	std	Y+57, r24	; 0x39
									_delay_ms(10);


				for(int i = 1 ; i <=(counter2+1) ; i++){
    3c14:	fe 01       	movw	r30, r28
    3c16:	e5 56       	subi	r30, 0x65	; 101
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	80 83       	st	Z, r24
    3c22:	24 c2       	rjmp	.+1096   	; 0x406c <MOVE_STEPPER_MOTOR+0xfe0>


					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_low);
    3c24:	82 e0       	ldi	r24, 0x02	; 2
    3c26:	62 e0       	ldi	r22, 0x02	; 2
    3c28:	40 e0       	ldi	r20, 0x00	; 0
    3c2a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    3c2e:	82 e0       	ldi	r24, 0x02	; 2
    3c30:	63 e0       	ldi	r22, 0x03	; 3
    3c32:	41 e0       	ldi	r20, 0x01	; 1
    3c34:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3c38:	82 e0       	ldi	r24, 0x02	; 2
    3c3a:	64 e0       	ldi	r22, 0x04	; 4
    3c3c:	41 e0       	ldi	r20, 0x01	; 1
    3c3e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    3c42:	82 e0       	ldi	r24, 0x02	; 2
    3c44:	65 e0       	ldi	r22, 0x05	; 5
    3c46:	41 e0       	ldi	r20, 0x01	; 1
    3c48:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a0 e2       	ldi	r26, 0x20	; 32
    3c52:	b1 e4       	ldi	r27, 0x41	; 65
    3c54:	8d ab       	std	Y+53, r24	; 0x35
    3c56:	9e ab       	std	Y+54, r25	; 0x36
    3c58:	af ab       	std	Y+55, r26	; 0x37
    3c5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c5c:	6d a9       	ldd	r22, Y+53	; 0x35
    3c5e:	7e a9       	ldd	r23, Y+54	; 0x36
    3c60:	8f a9       	ldd	r24, Y+55	; 0x37
    3c62:	98 ad       	ldd	r25, Y+56	; 0x38
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	4a ef       	ldi	r20, 0xFA	; 250
    3c6a:	54 e4       	ldi	r21, 0x44	; 68
    3c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	89 ab       	std	Y+49, r24	; 0x31
    3c76:	9a ab       	std	Y+50, r25	; 0x32
    3c78:	ab ab       	std	Y+51, r26	; 0x33
    3c7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c7c:	69 a9       	ldd	r22, Y+49	; 0x31
    3c7e:	7a a9       	ldd	r23, Y+50	; 0x32
    3c80:	8b a9       	ldd	r24, Y+51	; 0x33
    3c82:	9c a9       	ldd	r25, Y+52	; 0x34
    3c84:	20 e0       	ldi	r18, 0x00	; 0
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	40 e8       	ldi	r20, 0x80	; 128
    3c8a:	5f e3       	ldi	r21, 0x3F	; 63
    3c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c90:	88 23       	and	r24, r24
    3c92:	2c f4       	brge	.+10     	; 0x3c9e <MOVE_STEPPER_MOTOR+0xc12>
		__ticks = 1;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	98 ab       	std	Y+48, r25	; 0x30
    3c9a:	8f a7       	std	Y+47, r24	; 0x2f
    3c9c:	3f c0       	rjmp	.+126    	; 0x3d1c <MOVE_STEPPER_MOTOR+0xc90>
	else if (__tmp > 65535)
    3c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    3ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	3f ef       	ldi	r19, 0xFF	; 255
    3caa:	4f e7       	ldi	r20, 0x7F	; 127
    3cac:	57 e4       	ldi	r21, 0x47	; 71
    3cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cb2:	18 16       	cp	r1, r24
    3cb4:	4c f5       	brge	.+82     	; 0x3d08 <MOVE_STEPPER_MOTOR+0xc7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb6:	6d a9       	ldd	r22, Y+53	; 0x35
    3cb8:	7e a9       	ldd	r23, Y+54	; 0x36
    3cba:	8f a9       	ldd	r24, Y+55	; 0x37
    3cbc:	98 ad       	ldd	r25, Y+56	; 0x38
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	40 e2       	ldi	r20, 0x20	; 32
    3cc4:	51 e4       	ldi	r21, 0x41	; 65
    3cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	bc 01       	movw	r22, r24
    3cd0:	cd 01       	movw	r24, r26
    3cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	98 ab       	std	Y+48, r25	; 0x30
    3cdc:	8f a7       	std	Y+47, r24	; 0x2f
    3cde:	0f c0       	rjmp	.+30     	; 0x3cfe <MOVE_STEPPER_MOTOR+0xc72>
    3ce0:	88 ec       	ldi	r24, 0xC8	; 200
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	9e a7       	std	Y+46, r25	; 0x2e
    3ce6:	8d a7       	std	Y+45, r24	; 0x2d
    3ce8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cea:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <MOVE_STEPPER_MOTOR+0xc60>
    3cf0:	9e a7       	std	Y+46, r25	; 0x2e
    3cf2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    3cf8:	01 97       	sbiw	r24, 0x01	; 1
    3cfa:	98 ab       	std	Y+48, r25	; 0x30
    3cfc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d00:	98 a9       	ldd	r25, Y+48	; 0x30
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	69 f7       	brne	.-38     	; 0x3ce0 <MOVE_STEPPER_MOTOR+0xc54>
    3d06:	14 c0       	rjmp	.+40     	; 0x3d30 <MOVE_STEPPER_MOTOR+0xca4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d08:	69 a9       	ldd	r22, Y+49	; 0x31
    3d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    3d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    3d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    3d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	98 ab       	std	Y+48, r25	; 0x30
    3d1a:	8f a7       	std	Y+47, r24	; 0x2f
    3d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d20:	9c a7       	std	Y+44, r25	; 0x2c
    3d22:	8b a7       	std	Y+43, r24	; 0x2b
    3d24:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d26:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <MOVE_STEPPER_MOTOR+0xc9c>
    3d2c:	9c a7       	std	Y+44, r25	; 0x2c
    3d2e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(10);

					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    3d30:	82 e0       	ldi	r24, 0x02	; 2
    3d32:	62 e0       	ldi	r22, 0x02	; 2
    3d34:	41 e0       	ldi	r20, 0x01	; 1
    3d36:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_low);
    3d3a:	82 e0       	ldi	r24, 0x02	; 2
    3d3c:	63 e0       	ldi	r22, 0x03	; 3
    3d3e:	40 e0       	ldi	r20, 0x00	; 0
    3d40:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3d44:	82 e0       	ldi	r24, 0x02	; 2
    3d46:	64 e0       	ldi	r22, 0x04	; 4
    3d48:	41 e0       	ldi	r20, 0x01	; 1
    3d4a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    3d4e:	82 e0       	ldi	r24, 0x02	; 2
    3d50:	65 e0       	ldi	r22, 0x05	; 5
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	a0 e2       	ldi	r26, 0x20	; 32
    3d5e:	b1 e4       	ldi	r27, 0x41	; 65
    3d60:	8f a3       	std	Y+39, r24	; 0x27
    3d62:	98 a7       	std	Y+40, r25	; 0x28
    3d64:	a9 a7       	std	Y+41, r26	; 0x29
    3d66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d68:	6f a1       	ldd	r22, Y+39	; 0x27
    3d6a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d6c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	4a ef       	ldi	r20, 0xFA	; 250
    3d76:	54 e4       	ldi	r21, 0x44	; 68
    3d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	8b a3       	std	Y+35, r24	; 0x23
    3d82:	9c a3       	std	Y+36, r25	; 0x24
    3d84:	ad a3       	std	Y+37, r26	; 0x25
    3d86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d88:	6b a1       	ldd	r22, Y+35	; 0x23
    3d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	40 e8       	ldi	r20, 0x80	; 128
    3d96:	5f e3       	ldi	r21, 0x3F	; 63
    3d98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d9c:	88 23       	and	r24, r24
    3d9e:	2c f4       	brge	.+10     	; 0x3daa <MOVE_STEPPER_MOTOR+0xd1e>
		__ticks = 1;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	9a a3       	std	Y+34, r25	; 0x22
    3da6:	89 a3       	std	Y+33, r24	; 0x21
    3da8:	3f c0       	rjmp	.+126    	; 0x3e28 <MOVE_STEPPER_MOTOR+0xd9c>
	else if (__tmp > 65535)
    3daa:	6b a1       	ldd	r22, Y+35	; 0x23
    3dac:	7c a1       	ldd	r23, Y+36	; 0x24
    3dae:	8d a1       	ldd	r24, Y+37	; 0x25
    3db0:	9e a1       	ldd	r25, Y+38	; 0x26
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	3f ef       	ldi	r19, 0xFF	; 255
    3db6:	4f e7       	ldi	r20, 0x7F	; 127
    3db8:	57 e4       	ldi	r21, 0x47	; 71
    3dba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dbe:	18 16       	cp	r1, r24
    3dc0:	4c f5       	brge	.+82     	; 0x3e14 <MOVE_STEPPER_MOTOR+0xd88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc2:	6f a1       	ldd	r22, Y+39	; 0x27
    3dc4:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc6:	89 a5       	ldd	r24, Y+41	; 0x29
    3dc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	40 e2       	ldi	r20, 0x20	; 32
    3dd0:	51 e4       	ldi	r21, 0x41	; 65
    3dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	bc 01       	movw	r22, r24
    3ddc:	cd 01       	movw	r24, r26
    3dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	9a a3       	std	Y+34, r25	; 0x22
    3de8:	89 a3       	std	Y+33, r24	; 0x21
    3dea:	0f c0       	rjmp	.+30     	; 0x3e0a <MOVE_STEPPER_MOTOR+0xd7e>
    3dec:	88 ec       	ldi	r24, 0xC8	; 200
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	98 a3       	std	Y+32, r25	; 0x20
    3df2:	8f 8f       	std	Y+31, r24	; 0x1f
    3df4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3df6:	98 a1       	ldd	r25, Y+32	; 0x20
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <MOVE_STEPPER_MOTOR+0xd6c>
    3dfc:	98 a3       	std	Y+32, r25	; 0x20
    3dfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e00:	89 a1       	ldd	r24, Y+33	; 0x21
    3e02:	9a a1       	ldd	r25, Y+34	; 0x22
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	9a a3       	std	Y+34, r25	; 0x22
    3e08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	69 f7       	brne	.-38     	; 0x3dec <MOVE_STEPPER_MOTOR+0xd60>
    3e12:	14 c0       	rjmp	.+40     	; 0x3e3c <MOVE_STEPPER_MOTOR+0xdb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e14:	6b a1       	ldd	r22, Y+35	; 0x23
    3e16:	7c a1       	ldd	r23, Y+36	; 0x24
    3e18:	8d a1       	ldd	r24, Y+37	; 0x25
    3e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	9a a3       	std	Y+34, r25	; 0x22
    3e26:	89 a3       	std	Y+33, r24	; 0x21
    3e28:	89 a1       	ldd	r24, Y+33	; 0x21
    3e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e2c:	9e 8f       	std	Y+30, r25	; 0x1e
    3e2e:	8d 8f       	std	Y+29, r24	; 0x1d
    3e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e34:	01 97       	sbiw	r24, 0x01	; 1
    3e36:	f1 f7       	brne	.-4      	; 0x3e34 <MOVE_STEPPER_MOTOR+0xda8>
    3e38:	9e 8f       	std	Y+30, r25	; 0x1e
    3e3a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(10);

					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	62 e0       	ldi	r22, 0x02	; 2
    3e40:	41 e0       	ldi	r20, 0x01	; 1
    3e42:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    3e46:	82 e0       	ldi	r24, 0x02	; 2
    3e48:	63 e0       	ldi	r22, 0x03	; 3
    3e4a:	41 e0       	ldi	r20, 0x01	; 1
    3e4c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_low);
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	64 e0       	ldi	r22, 0x04	; 4
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_high);
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
    3e5c:	65 e0       	ldi	r22, 0x05	; 5
    3e5e:	41 e0       	ldi	r20, 0x01	; 1
    3e60:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	a0 e2       	ldi	r26, 0x20	; 32
    3e6a:	b1 e4       	ldi	r27, 0x41	; 65
    3e6c:	89 8f       	std	Y+25, r24	; 0x19
    3e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    3e70:	ab 8f       	std	Y+27, r26	; 0x1b
    3e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e74:	69 8d       	ldd	r22, Y+25	; 0x19
    3e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	4a ef       	ldi	r20, 0xFA	; 250
    3e82:	54 e4       	ldi	r21, 0x44	; 68
    3e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	8d 8b       	std	Y+21, r24	; 0x15
    3e8e:	9e 8b       	std	Y+22, r25	; 0x16
    3e90:	af 8b       	std	Y+23, r26	; 0x17
    3e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e94:	6d 89       	ldd	r22, Y+21	; 0x15
    3e96:	7e 89       	ldd	r23, Y+22	; 0x16
    3e98:	8f 89       	ldd	r24, Y+23	; 0x17
    3e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e8       	ldi	r20, 0x80	; 128
    3ea2:	5f e3       	ldi	r21, 0x3F	; 63
    3ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ea8:	88 23       	and	r24, r24
    3eaa:	2c f4       	brge	.+10     	; 0x3eb6 <MOVE_STEPPER_MOTOR+0xe2a>
		__ticks = 1;
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	9c 8b       	std	Y+20, r25	; 0x14
    3eb2:	8b 8b       	std	Y+19, r24	; 0x13
    3eb4:	3f c0       	rjmp	.+126    	; 0x3f34 <MOVE_STEPPER_MOTOR+0xea8>
	else if (__tmp > 65535)
    3eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eba:	8f 89       	ldd	r24, Y+23	; 0x17
    3ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	3f ef       	ldi	r19, 0xFF	; 255
    3ec2:	4f e7       	ldi	r20, 0x7F	; 127
    3ec4:	57 e4       	ldi	r21, 0x47	; 71
    3ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eca:	18 16       	cp	r1, r24
    3ecc:	4c f5       	brge	.+82     	; 0x3f20 <MOVE_STEPPER_MOTOR+0xe94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ece:	69 8d       	ldd	r22, Y+25	; 0x19
    3ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e2       	ldi	r20, 0x20	; 32
    3edc:	51 e4       	ldi	r21, 0x41	; 65
    3ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	bc 01       	movw	r22, r24
    3ee8:	cd 01       	movw	r24, r26
    3eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	9c 8b       	std	Y+20, r25	; 0x14
    3ef4:	8b 8b       	std	Y+19, r24	; 0x13
    3ef6:	0f c0       	rjmp	.+30     	; 0x3f16 <MOVE_STEPPER_MOTOR+0xe8a>
    3ef8:	88 ec       	ldi	r24, 0xC8	; 200
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	9a 8b       	std	Y+18, r25	; 0x12
    3efe:	89 8b       	std	Y+17, r24	; 0x11
    3f00:	89 89       	ldd	r24, Y+17	; 0x11
    3f02:	9a 89       	ldd	r25, Y+18	; 0x12
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <MOVE_STEPPER_MOTOR+0xe78>
    3f08:	9a 8b       	std	Y+18, r25	; 0x12
    3f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	9c 8b       	std	Y+20, r25	; 0x14
    3f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f16:	8b 89       	ldd	r24, Y+19	; 0x13
    3f18:	9c 89       	ldd	r25, Y+20	; 0x14
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	69 f7       	brne	.-38     	; 0x3ef8 <MOVE_STEPPER_MOTOR+0xe6c>
    3f1e:	14 c0       	rjmp	.+40     	; 0x3f48 <MOVE_STEPPER_MOTOR+0xebc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f20:	6d 89       	ldd	r22, Y+21	; 0x15
    3f22:	7e 89       	ldd	r23, Y+22	; 0x16
    3f24:	8f 89       	ldd	r24, Y+23	; 0x17
    3f26:	98 8d       	ldd	r25, Y+24	; 0x18
    3f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	9c 8b       	std	Y+20, r25	; 0x14
    3f32:	8b 8b       	std	Y+19, r24	; 0x13
    3f34:	8b 89       	ldd	r24, Y+19	; 0x13
    3f36:	9c 89       	ldd	r25, Y+20	; 0x14
    3f38:	98 8b       	std	Y+16, r25	; 0x10
    3f3a:	8f 87       	std	Y+15, r24	; 0x0f
    3f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f3e:	98 89       	ldd	r25, Y+16	; 0x10
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <MOVE_STEPPER_MOTOR+0xeb4>
    3f44:	98 8b       	std	Y+16, r25	; 0x10
    3f46:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10);



					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FIRST_PIN , Pin_high);
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	62 e0       	ldi	r22, 0x02	; 2
    3f4c:	41 e0       	ldi	r20, 0x01	; 1
    3f4e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_SECOND_PIN , Pin_high);
    3f52:	82 e0       	ldi	r24, 0x02	; 2
    3f54:	63 e0       	ldi	r22, 0x03	; 3
    3f56:	41 e0       	ldi	r20, 0x01	; 1
    3f58:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
    3f5c:	82 e0       	ldi	r24, 0x02	; 2
    3f5e:	64 e0       	ldi	r22, 0x04	; 4
    3f60:	41 e0       	ldi	r20, 0x01	; 1
    3f62:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
					DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
    3f66:	82 e0       	ldi	r24, 0x02	; 2
    3f68:	65 e0       	ldi	r22, 0x05	; 5
    3f6a:	40 e0       	ldi	r20, 0x00	; 0
    3f6c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	a0 e2       	ldi	r26, 0x20	; 32
    3f76:	b1 e4       	ldi	r27, 0x41	; 65
    3f78:	8b 87       	std	Y+11, r24	; 0x0b
    3f7a:	9c 87       	std	Y+12, r25	; 0x0c
    3f7c:	ad 87       	std	Y+13, r26	; 0x0d
    3f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	4a ef       	ldi	r20, 0xFA	; 250
    3f8e:	54 e4       	ldi	r21, 0x44	; 68
    3f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	8f 83       	std	Y+7, r24	; 0x07
    3f9a:	98 87       	std	Y+8, r25	; 0x08
    3f9c:	a9 87       	std	Y+9, r26	; 0x09
    3f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa2:	78 85       	ldd	r23, Y+8	; 0x08
    3fa4:	89 85       	ldd	r24, Y+9	; 0x09
    3fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e8       	ldi	r20, 0x80	; 128
    3fae:	5f e3       	ldi	r21, 0x3F	; 63
    3fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fb4:	88 23       	and	r24, r24
    3fb6:	2c f4       	brge	.+10     	; 0x3fc2 <MOVE_STEPPER_MOTOR+0xf36>
		__ticks = 1;
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	9e 83       	std	Y+6, r25	; 0x06
    3fbe:	8d 83       	std	Y+5, r24	; 0x05
    3fc0:	3f c0       	rjmp	.+126    	; 0x4040 <MOVE_STEPPER_MOTOR+0xfb4>
	else if (__tmp > 65535)
    3fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc4:	78 85       	ldd	r23, Y+8	; 0x08
    3fc6:	89 85       	ldd	r24, Y+9	; 0x09
    3fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	3f ef       	ldi	r19, 0xFF	; 255
    3fce:	4f e7       	ldi	r20, 0x7F	; 127
    3fd0:	57 e4       	ldi	r21, 0x47	; 71
    3fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fd6:	18 16       	cp	r1, r24
    3fd8:	4c f5       	brge	.+82     	; 0x402c <MOVE_STEPPER_MOTOR+0xfa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e2       	ldi	r20, 0x20	; 32
    3fe8:	51 e4       	ldi	r21, 0x41	; 65
    3fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	bc 01       	movw	r22, r24
    3ff4:	cd 01       	movw	r24, r26
    3ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	9e 83       	std	Y+6, r25	; 0x06
    4000:	8d 83       	std	Y+5, r24	; 0x05
    4002:	0f c0       	rjmp	.+30     	; 0x4022 <MOVE_STEPPER_MOTOR+0xf96>
    4004:	88 ec       	ldi	r24, 0xC8	; 200
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	9c 83       	std	Y+4, r25	; 0x04
    400a:	8b 83       	std	Y+3, r24	; 0x03
    400c:	8b 81       	ldd	r24, Y+3	; 0x03
    400e:	9c 81       	ldd	r25, Y+4	; 0x04
    4010:	01 97       	sbiw	r24, 0x01	; 1
    4012:	f1 f7       	brne	.-4      	; 0x4010 <MOVE_STEPPER_MOTOR+0xf84>
    4014:	9c 83       	std	Y+4, r25	; 0x04
    4016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4018:	8d 81       	ldd	r24, Y+5	; 0x05
    401a:	9e 81       	ldd	r25, Y+6	; 0x06
    401c:	01 97       	sbiw	r24, 0x01	; 1
    401e:	9e 83       	std	Y+6, r25	; 0x06
    4020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4022:	8d 81       	ldd	r24, Y+5	; 0x05
    4024:	9e 81       	ldd	r25, Y+6	; 0x06
    4026:	00 97       	sbiw	r24, 0x00	; 0
    4028:	69 f7       	brne	.-38     	; 0x4004 <MOVE_STEPPER_MOTOR+0xf78>
    402a:	14 c0       	rjmp	.+40     	; 0x4054 <MOVE_STEPPER_MOTOR+0xfc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    402c:	6f 81       	ldd	r22, Y+7	; 0x07
    402e:	78 85       	ldd	r23, Y+8	; 0x08
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	9e 83       	std	Y+6, r25	; 0x06
    403e:	8d 83       	std	Y+5, r24	; 0x05
    4040:	8d 81       	ldd	r24, Y+5	; 0x05
    4042:	9e 81       	ldd	r25, Y+6	; 0x06
    4044:	9a 83       	std	Y+2, r25	; 0x02
    4046:	89 83       	std	Y+1, r24	; 0x01
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	f1 f7       	brne	.-4      	; 0x404c <MOVE_STEPPER_MOTOR+0xfc0>
    4050:	9a 83       	std	Y+2, r25	; 0x02
    4052:	89 83       	std	Y+1, r24	; 0x01
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_THIRD_PIN , Pin_high);
									DI_set_pin_value(STEPPER_MOTOR_PORT , STEPPER_MOTOR_FOURTH_PIN , Pin_low);
									_delay_ms(10);


				for(int i = 1 ; i <=(counter2+1) ; i++){
    4054:	de 01       	movw	r26, r28
    4056:	a5 56       	subi	r26, 0x65	; 101
    4058:	bf 4f       	sbci	r27, 0xFF	; 255
    405a:	fe 01       	movw	r30, r28
    405c:	e5 56       	subi	r30, 0x65	; 101
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 81       	ld	r24, Z
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	01 96       	adiw	r24, 0x01	; 1
    4066:	11 96       	adiw	r26, 0x01	; 1
    4068:	9c 93       	st	X, r25
    406a:	8e 93       	st	-X, r24
    406c:	fe 01       	movw	r30, r28
    406e:	e1 56       	subi	r30, 0x61	; 97
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	88 2f       	mov	r24, r24
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	9c 01       	movw	r18, r24
    407a:	2f 5f       	subi	r18, 0xFF	; 255
    407c:	3f 4f       	sbci	r19, 0xFF	; 255
    407e:	fe 01       	movw	r30, r28
    4080:	e5 56       	subi	r30, 0x65	; 101
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	80 81       	ld	r24, Z
    4086:	91 81       	ldd	r25, Z+1	; 0x01
    4088:	28 17       	cp	r18, r24
    408a:	39 07       	cpc	r19, r25
    408c:	0c f0       	brlt	.+2      	; 0x4090 <MOVE_STEPPER_MOTOR+0x1004>
    408e:	ca cd       	rjmp	.-1132   	; 0x3c24 <MOVE_STEPPER_MOTOR+0xb98>
    4090:	04 c0       	rjmp	.+8      	; 0x409a <MOVE_STEPPER_MOTOR+0x100e>

	}

	else{

		error_state=Return_NOT_Ok;
    4092:	fe 01       	movw	r30, r28
    4094:	e0 56       	subi	r30, 0x60	; 96
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	10 82       	st	Z, r1

	}


	return error_state;
    409a:	fe 01       	movw	r30, r28
    409c:	e0 56       	subi	r30, 0x60	; 96
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	80 81       	ld	r24, Z


}
    40a2:	cd 55       	subi	r28, 0x5D	; 93
    40a4:	df 4f       	sbci	r29, 0xFF	; 255
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	08 95       	ret

000040ba <__udivmodsi4>:
    40ba:	a1 e2       	ldi	r26, 0x21	; 33
    40bc:	1a 2e       	mov	r1, r26
    40be:	aa 1b       	sub	r26, r26
    40c0:	bb 1b       	sub	r27, r27
    40c2:	fd 01       	movw	r30, r26
    40c4:	0d c0       	rjmp	.+26     	; 0x40e0 <__udivmodsi4_ep>

000040c6 <__udivmodsi4_loop>:
    40c6:	aa 1f       	adc	r26, r26
    40c8:	bb 1f       	adc	r27, r27
    40ca:	ee 1f       	adc	r30, r30
    40cc:	ff 1f       	adc	r31, r31
    40ce:	a2 17       	cp	r26, r18
    40d0:	b3 07       	cpc	r27, r19
    40d2:	e4 07       	cpc	r30, r20
    40d4:	f5 07       	cpc	r31, r21
    40d6:	20 f0       	brcs	.+8      	; 0x40e0 <__udivmodsi4_ep>
    40d8:	a2 1b       	sub	r26, r18
    40da:	b3 0b       	sbc	r27, r19
    40dc:	e4 0b       	sbc	r30, r20
    40de:	f5 0b       	sbc	r31, r21

000040e0 <__udivmodsi4_ep>:
    40e0:	66 1f       	adc	r22, r22
    40e2:	77 1f       	adc	r23, r23
    40e4:	88 1f       	adc	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	1a 94       	dec	r1
    40ea:	69 f7       	brne	.-38     	; 0x40c6 <__udivmodsi4_loop>
    40ec:	60 95       	com	r22
    40ee:	70 95       	com	r23
    40f0:	80 95       	com	r24
    40f2:	90 95       	com	r25
    40f4:	9b 01       	movw	r18, r22
    40f6:	ac 01       	movw	r20, r24
    40f8:	bd 01       	movw	r22, r26
    40fa:	cf 01       	movw	r24, r30
    40fc:	08 95       	ret

000040fe <__prologue_saves__>:
    40fe:	2f 92       	push	r2
    4100:	3f 92       	push	r3
    4102:	4f 92       	push	r4
    4104:	5f 92       	push	r5
    4106:	6f 92       	push	r6
    4108:	7f 92       	push	r7
    410a:	8f 92       	push	r8
    410c:	9f 92       	push	r9
    410e:	af 92       	push	r10
    4110:	bf 92       	push	r11
    4112:	cf 92       	push	r12
    4114:	df 92       	push	r13
    4116:	ef 92       	push	r14
    4118:	ff 92       	push	r15
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	cf 93       	push	r28
    4120:	df 93       	push	r29
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	ca 1b       	sub	r28, r26
    4128:	db 0b       	sbc	r29, r27
    412a:	0f b6       	in	r0, 0x3f	; 63
    412c:	f8 94       	cli
    412e:	de bf       	out	0x3e, r29	; 62
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	cd bf       	out	0x3d, r28	; 61
    4134:	09 94       	ijmp

00004136 <__epilogue_restores__>:
    4136:	2a 88       	ldd	r2, Y+18	; 0x12
    4138:	39 88       	ldd	r3, Y+17	; 0x11
    413a:	48 88       	ldd	r4, Y+16	; 0x10
    413c:	5f 84       	ldd	r5, Y+15	; 0x0f
    413e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4140:	7d 84       	ldd	r7, Y+13	; 0x0d
    4142:	8c 84       	ldd	r8, Y+12	; 0x0c
    4144:	9b 84       	ldd	r9, Y+11	; 0x0b
    4146:	aa 84       	ldd	r10, Y+10	; 0x0a
    4148:	b9 84       	ldd	r11, Y+9	; 0x09
    414a:	c8 84       	ldd	r12, Y+8	; 0x08
    414c:	df 80       	ldd	r13, Y+7	; 0x07
    414e:	ee 80       	ldd	r14, Y+6	; 0x06
    4150:	fd 80       	ldd	r15, Y+5	; 0x05
    4152:	0c 81       	ldd	r16, Y+4	; 0x04
    4154:	1b 81       	ldd	r17, Y+3	; 0x03
    4156:	aa 81       	ldd	r26, Y+2	; 0x02
    4158:	b9 81       	ldd	r27, Y+1	; 0x01
    415a:	ce 0f       	add	r28, r30
    415c:	d1 1d       	adc	r29, r1
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	ed 01       	movw	r28, r26
    416a:	08 95       	ret

0000416c <_exit>:
    416c:	f8 94       	cli

0000416e <__stop_program>:
    416e:	ff cf       	rjmp	.-2      	; 0x416e <__stop_program>
